


/*
        ******************************************
        *******************************************
        JAVASCRIPT UI CONTROLS HERE
        ******************************************
        *******************************************
*/

/* ############################################
  UI NAVIGATION 
 ##############################################
 */
$(document).ready(function () {
    $(".sidebar-menu a").each(function () {
        if (this.href == window.location.href) {
            $(this).parent().addClass("active"); // add active to li of the current link
            //$(this).parent().parent().parent().addClass("open");
            //alert($(this).parent().parent().parent().parent().parent().attr('id'));
            // -- problem here with sidebar-- $(this).parent().parent().parent().addClass("active"); // add active class to an anchor
            $(this).parent().parent().parent().parent().parent().addClass("active"); // add active class to an anchor
        }
    });
    $(".breadcrumb a").each(function () {
        if (this.getAttribute("href") != '') {
            $(this).parent().addClass("required"); // add active to li of the current link
            //alert(this.getAttribute("href"));
        }
    });
    $(".link-bar a").each(function () {
        if ($(this).data('id') == $(this).data('link')) {
           // $(this).addClass("piaget-bg-active");
        }
    });
    $('.layoutsidebar .sidebar-heading').each(function () {
        var li = 0;
        $(this).next('ul').each(function () {
            $(this).find('li').each(function () {
                if (!$(this).is(":hidden")) li++;
            });
        });
        if (li == 0) { $(this).hide(); $(this).next('ul').hide()}
    });
});
$(function () {
    var iconDown = true
    $("#advancedSearchButton").click(function () {
        var icon = $(this).find("i")

        if (iconDown) {
            iconDown = false
            icon.removeClass("fa-caret-down").addClass("fa-caret-up")
        } else {
            iconDown = true
            icon.removeClass("fa-caret-up").addClass("fa-caret-down")
        }
    })
})







/* ############################################
  DATEPICKER FUNCTIONS JS
 ##############################################
 */
//Definir plugin datepicker nos inputs do tipo date
function SetUpDatepicker(id) {
    $('.datepicker').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        autoUpdateInput: false,
        autoApply: true,
        locale: { format: 'DD-MM-YYYY',daysOfWeek: [
                "Dom",
                "Seg",
                "Ter",
                "Qua",
                "Qui",
                "Sex",
                "Sab"
            ],
            monthNames: [
                "Janeiro",
                "Fevereiro",
                "Março",
                "Abril",
                "Maio",
                "Junho",
                "Julho",
                "Agosto",
                "Setembro",
                "Outubro",
                "Novembro",
                "Dezembro"
            ],  },
        minYear: 1999,
        maxYear: new Date().getFullYear() + 15
    });
    $('.datepickerDisablePastDate').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        autoUpdateInput: false,
        autoApply: true,
        locale: { format: 'DD-MM-YYYY', daysOfWeek: [
                "Dom",
                "Seg",
                "Ter",
                "Qua",
                "Qui",
                "Sex",
                "Sab"
            ],
            monthNames: [
                "Janeiro",
                "Fevereiro",
                "Março",
                "Abril",
                "Maio",
                "Junho",
                "Julho",
                "Agosto",
                "Setembro",
                "Outubro",
                "Novembro",
                "Dezembro"
            ],  },
        minYear: 1999,
        minDate: new Date(),
        maxYear: new Date().getFullYear() + 15
    });
    $('.datepickerDisableFutureDate').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        autoUpdateInput: false,
        autoApply: true,
        locale: { format: 'DD-MM-YYYY', daysOfWeek: [
                "Dom",
                "Seg",
                "Ter",
                "Qua",
                "Qui",
                "Sex",
                "Sab"
            ],
            monthNames: [
                "Janeiro",
                "Fevereiro",
                "Março",
                "Abril",
                "Maio",
                "Junho",
                "Julho",
                "Agosto",
                "Setembro",
                "Outubro",
                "Novembro",
                "Dezembro"
            ],  },
        minYear: 1905,
        /*minDate: new Date(),*/
        maxDate: new Date()
    });
    $('.Disablecalendardatepicker').daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        autoUpdateInput: false,
        autoApply: true,
        locale: {
            format: 'DD-MM-YYYY', daysOfWeek: [
                "Dom",
                "Seg",
                "Ter",
                "Qua",
                "Qui",
                "Sex",
                "Sab"
            ],
            monthNames: [
                "Janeiro",
                "Fevereiro",
                "Março",
                "Abril",
                "Maio",
                "Junho",
                "Julho",
                "Agosto",
                "Setembro",
                "Outubro",
                "Novembro",
                "Dezembro"
            ],
        },
        minDate: new Date($("#DisableDateIni").val()),
        maxDate: new Date($("#DisableDateEnd").val())
    });
    // Disablecalendardatepicker with Loop over date options
    $('.Disablecalendardatepicker_' + id).daterangepicker({
        singleDatePicker: true,
        showDropdowns: true,
        autoUpdateInput: false,
        autoApply: true,
        locale: {
            format: 'DD-MM-YYYY', daysOfWeek: [
                "Dom",
                "Seg",
                "Ter",
                "Qua",
                "Qui",
                "Sex",
                "Sab"
            ],
            monthNames: [
                "Janeiro",
                "Fevereiro",
                "Março",
                "Abril",
                "Maio",
                "Junho",
                "Julho",
                "Agosto",
                "Setembro",
                "Outubro",
                "Novembro",
                "Dezembro"
            ],
        },
        minDate: new Date($(".DisableDateIni_" + id).val()),
        maxDate: new Date($(".DisableDateEnd_" + id).val())
    });

    $('.datepicker, .datepickerDisablePastDate, .datepickerDisableFutureDate, .Disablecalendardatepicker, .Disablecalendardatepicker_'+id).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format('DD-MM-YYYY'));
    });
    // Prevent data entry :: Readonly Input
    $('.datepicker, .datepickerDisablePastDate, .datepickerDisableFutureDate, .Disablecalendardatepicker, .Disablecalendardatepicker_' + id).on('keydown paste focus mousedown', function (e) {
        if (e.keyCode != 9)
            e.preventDefault();
    });
}



/* ############################################
  AUTHENTICATION HELPERS
 ##############################################
 */
$(document).on("change", "#isAutomaticPasswordEmail", function () {
    if ($(this).is(":checked")) {
        $('#Password').attr('readonly', true);
        $('#ConfirmPassword').attr('readonly', true);
        $('#Password').val('');
        $('#ConfirmPassword').val('');
        $('.GenPasswordRow').show();
        //$('#Email').prop('required', true);
        generatePassword();
    } else {
        $('#Password').attr('readonly', false);
        $('#ConfirmPassword').attr('readonly', false);
        $('#Password').val('');
        $('#ConfirmPassword').val('');
        $('.GenPasswordRow').hide();
        //$('#Email').prop('required', false);
    }
});
$(document).on("change", "#isAutomaticEmail", function () {
    if ($(this).is(":checked")) {
        $('.GenPasswordRowEmail').show();
        $('#Email').prop('required', true);
        generatePassword();
    } else {
        $('.GenPasswordRowEmail').hide();
        $('#Email').prop('required', false);
    }
});
$(document).on("change", "#isAutomaticPasswordSMS", function () {
    if ($(this).is(":checked")) {
        $('.GenPasswordRowSMS').show();
        $('#Telephone').prop('required', true);
        generatePassword();
    } else {
        $('.GenPasswordRowSMS').hide();
        $('#Telephone').prop('required', false);
    }
});
$(document).on("change", "#isOAuth2Valid", function () {
    if ($(this).is(":checked")) {
        $('#OAuth2Provider').attr('disabled', false);
        $('#OAuth2ID').attr('disabled', false);
        $('#OAuth2Provider').val('').change();
        $('#OAuth2ID').val('');
        $('#OAuth2Provider').prop('required', true);
        $('#OAuth2ID').prop('required', true);
        $('.OAuth2Row').show();
    } else {
        $('#OAuth2Provider').attr('disabled', true);
        $('#OAuth2ID').attr('disabled', true);
        $('#OAuth2Provider').val('').change();
        $('#OAuth2ID').val('');
        $('#OAuth2Provider').prop('required', false);
        $('#OAuth2ID').prop('required', false);
        $('.OAuth2Row').hide();
    }
});
$(document).on("change", "#isLDAPValid", function () {
    if ($(this).is(":checked")) {
        $('#LADPHost').attr('disabled', false);
        $('#LADPBase').attr('disabled', false);
        $('#LADPHost').val('');
        $('#LADPBase').val('');
        $('#LADPHost').prop('required', true);
        $('#LADPBase').prop('required', true);
        $('.LDAPRow').show();
    } else {
        $('#LADPHost').attr('disabled', true);
        $('#LADPBase').attr('disabled', true);
        $('#LADPHost').val('');
        $('#LADPBase').val('');
        $('#LADPHost').prop('required', false);
        $('#LADPBase').prop('required', false);
        $('.LDAPRow').hide();
    }
});
$(document).on("change", "#ScheduledStatus", function () {
    if ($(this).is(":checked")) {
        $('#DateAct').attr('disabled', false);
        $('#DateDisact').attr('disabled', false);
        $('#DateAct').val('');
        $('#DateDisact').val('');
        $('#DateAct').prop('required', true);
        $('#DateDisact').prop('required', true);
        $('#Status').attr('disabled', true);
        $('#Status').hide();
        $('#StatusPending').show();
        $('.dateActRow').show();
    } else {
        $('#DateAct').attr('disabled', true);
        $('#DateDisact').attr('disabled', true);
        $('#DateAct').val('');
        $('#DateDisact').val('');
        $('#DateAct').prop('required', false);
        $('#DateDisact').prop('required', false);
        $('#Status').attr('disabled', false);
        $('#Status').show();
        $('#StatusPending').hide();
        $('.dateActRow').hide();
    }
});
function checkDisabled(entity) {
    if (entity == "isOAuth2Valid") {
        if ($('#isOAuth2Valid').is(":checked")) {
            $('#OAuth2Provider').attr('disabled', false);
            $('#OAuth2ID').attr('disabled', false);
            $('#OAuth2Provider').prop('required', true);
            $('#OAuth2ID').prop('required', true);
            $('.OAuth2Row').show();
        } else {
            $('#OAuth2Provider').attr('disabled', true);
            $('#OAuth2ID').attr('disabled', true);
            $('#OAuth2Provider').prop('required', false);
            $('#OAuth2ID').prop('required', false);
            $('.OAuth2Row').hide();
        }
    }
    if (entity == "isLDAPValid") {
        if ($('#isLDAPValid').is(":checked")) {
            $('#LADPHost').attr('disabled', false);
            $('#LADPBase').attr('disabled', false);
            $('#LADPHost').prop('required', true);
            $('#LADPBase').prop('required', true);
            $('.LDAPRow').show();
        } else {
            $('#LADPHost').attr('disabled', true);
            $('#LADPBase').attr('disabled', true);
            $('#LADPHost').prop('required', false);
            $('#LADPBase').prop('required', false);
            $('.LDAPRow').hide();
        }
    }
    if (entity == "ScheduledStatus") {
        if ($('#ScheduledStatus').is(":checked")) {
            $('#DateAct').attr('disabled', false);
            $('#DateDisact').attr('disabled', false);
            //$('#DateAct').val('');
            //$('#DateDisact').val('');
            $('#DateAct').prop('required', true);
            $('#DateDisact').prop('required', true);
            $('#Status').attr('disabled', true);
            $('#Status').hide();
            $('#StatusPending').show();
            $('.dateActRow').show();
        } else {
            $('#DateAct').attr('disabled', true);
            $('#DateDisact').attr('disabled', true);
            //$('#DateAct').val('');
            //$('#DateDisact').val('');
            $('#DateAct').prop('required', false);
            $('#DateDisact').prop('required', false);
            $('#Status').attr('disabled', false);
            $('#Status').show();
            $('#StatusPending').hide();
            $('.dateActRow').hide();
        }
    }
}

var characteristics = [];
$(document).on("change", ".spacescharacteristics_check", function () {
    if ($(this).is(":checked")) {
        var value = $(this).val();
        var obrigatorio = $('#requiredOptionSelect_' + value).data('obrigatorio');
        characteristics.push(value);
        $('.prop_' + value).css('visibility', 'visible');
        $('#requiredOptionSelect_' + value).prop("disabled", false);
        if (obrigatorio=='1') $('#requiredOptionSelect_' + value).val("1");
    } else {
        var value = $(this).val();
        //Removing Array Items By Value Using Splice
        for (var i = 0; i < characteristics.length; i++) {
            if (characteristics[i] === $(this).val()) {
                characteristics.splice(i, 1);
            }
        }
        $('.prop_' + value).css('visibility', 'hidden');
        $('#requiredOptionSelect_' + value).prop("disabled", true);
    }
});


/* ############################################
  PASSWORD GENERATOR
 ##############################################
 */
function generatePassword() {
    var passwordLength = 16;
    var numberChars = "0123456789";
    var upperChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var lowerChars = "abcdefghijklmnopqrstuvwxyz";
    var specialChars = "!@#$%^&*(){}/-\+_=.,?";
    var allChars = numberChars + upperChars + lowerChars + specialChars;
    var randPasswordArray = Array(passwordLength);
    randPasswordArray[0] = numberChars;
    randPasswordArray[1] = upperChars;
    randPasswordArray[2] = lowerChars;
    randPasswordArray[3] = specialChars;
    randPasswordArray = randPasswordArray.fill(allChars, 4);
    var randomPassword = shuffleArray(randPasswordArray.map(function (x) { return x[Math.floor(Math.random() * x.length)] })).join('');
    // Copy password to DOM
    document.getElementById("GenPassword").value = randomPassword;
    document.getElementById("Password").value = randomPassword;
    document.getElementById("ConfirmPassword").value = randomPassword;
}
function copyPassword() {
    var copyText = document.getElementById("GenPassword");
    copyText.select();
    document.execCommand("copy");
}
function ShufflePassword() {
    generatePassword();
}
function shuffleArray(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
}





/* ############################################
  COUNTRY AND CITY ADDRESS HELPERS START
 ##############################################
 */
function addressHelper() {
    // Get Input helpers
    var CountryId = $('.SelectCountry').val();
    var AO = null; // ANGOLAN ID NUMBER FROM [GRL_ENDERECO_PAIS]
    var url = '../../Ajax/AddressHelper';
    //Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/ajax/GetConfigValuesStandardCountryID",
        data: {  },
        cache: false,
        beforeSend: function () {},
        complete: function () {},
        success: function (data) {
             AO = data;
            // On Edit View process Html Helpers
            if (CountryId == '') {
                $('.AddressHelper').hide();
                $('.AddressHelperAO').hide();
            }
            else if (CountryId == AO) {
                $('.AddressHelper').show();
                $('.AddressHelperAO').show();
                $('.newCity').attr('disabled', true);
                $('.SelectDistrict').prop("required", true);
            }
            else {
                $('.AddressHelper').show();
                $('.AddressHelperAO').hide();
                $('.newCity').attr('disabled', false);
            }
        }
    });
    // Set Onchange events for Country Select
    $(document).on("change", ".SelectCountry", function () {
        var thisvar = $(this);
        // Loadin
        loadIn();
        // Set Id and Get Select from ajax
        var Id = $(this).val();
        // Process Html Helpers
        if (Id == '') {
            $(thisvar).parent().parent().parent().find('.AddressHelper').hide();
            $(thisvar).parent().parent().parent().find('.AddressHelperAO').hide();
            Id = 0;
        }
        else if (Id == AO) {
            $(thisvar).parent().parent().parent().find('.AddressHelper').show();
            $(thisvar).parent().parent().parent().find('.AddressHelperAO').show();
            $(thisvar).parent().parent().parent().find('.newCity').attr('disabled', true);
        } else {
            $(thisvar).parent().parent().parent().find('.AddressHelper').show();
            $(thisvar).parent().parent().parent().find('.AddressHelperAO').hide();
            $(thisvar).parent().parent().parent().find('.newCity').attr('disabled', false);
        }
         // Retrieve selected options from Ajax
        $.ajax({
            type: "GET",
            url: "/ajax/GetCityByCountry",
            data: { "id": Id },
            cache: false,
            beforeSend: function () {
                 // Loadin
                loadIn();
            },
            complete: function () {
            },
            success: function (data) {
                $(thisvar).parent().parent().parent().find('.SelectCity option').remove();
                var s = '<option value="">Selecionar uma opção</option>';
                for (var i = 0; i < data.length; i++) {
                    s += '<option value="' + data[i].ID + '">' + data[i].Nome +'</option>';
                }
                $(thisvar).parent().parent().parent().find('.SelectCity').html(s);
                // Loadout
                loadOut();
            }
        });
    });
    // Set Onchange events for City Select
    $(document).on("change", ".SelectCity", function () {
        var thisvar = $(this);
        // Loadin
        loadIn();
        // Set Id and Get Select from ajax
        var Id = $(this).val();
        var Action = 'mun'; 
        if (Id == '') Id = 0; // Select options cannot be null for Model
        // Retrieve selected options from Ajax
        $.ajax({
            type: "GET",
            url: "/ajax/GetDistrictByCity",
            data: { "id": Id },
            cache: false,
            beforeSend: function () {
                // Loadin
                loadIn();
            },
            complete: function () {
            },
            success: function (data) {
                $(thisvar).parent().parent().parent().find('.SelectDistrict option').remove();
                var s = '<option value="">Selecionar uma opção</option>';
                for (var i = 0; i < data.length; i++) {
                    s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                }
                $(thisvar).parent().parent().parent().find('.SelectDistrict').html(s);
                // Add requirement for District/Municipio selection if Country=AO
                if ($(thisvar).parent().parent().parent().find('.SelectCountry').val() == AO)
                    $(thisvar).parent().parent().parent().find('.SelectDistrict').prop("required", true);
                else
                    $(thisvar).parent().parent().parent().find('.SelectDistrict').prop("required", false);
                // Loadout
                loadOut();
            }
        });
    });
}
// Display Popup window to add new city
function addressHelperPopUpNewCity(thisvar) {
    var CountryId = $(thisvar).parent().parent().parent().parent().find('.SelectCountry').val();
    if (CountryId != '')
        window.open('/administration/address/' + CountryId + '?entityfrom=addnewcity&var=' + thisvar, 'newwin', 'width=400,height=400');
    return false;
}
// Update Citylist on Select options with newly updated Id, trigger select change
function updateCityList(CidadeId, thisvar) {
    var CountryId = $(thisvar).parent().parent().parent().parent().find('.SelectCountry').val();
    //var CountryId = $('.SelectCountry').val();
    $(thisvar).parent().parent().parent().parent().find('.SelectCountry').val(CountryId).trigger('change');
    //$('.SelectCountry').val(CountryId).trigger('change');
    updateCityIdList(CidadeId, thisvar);
}
// Automatically select updated option from Popup window with new Id
function updateCityIdList(CidadeId, thisvar) {
    setTimeout(function () {
        $(thisvar).parent().parent().parent().parent().find('.SelectCity').val(CidadeId).trigger('change');
       // $('.SelectCity').val(CidadeId).trigger('change');
    }, 500); // Wait for select change trigger, timeout 500 milli secons = 0.5 Seconds
}
/* ############################################
  COUNTRY AND CITY ADDRESS HELPERS END
 ##############################################
 */









/*
       ******************************************
       *******************************************
       JAVASCRIPT FORM MODALS CALL HERE
       ******************************************
       *******************************************
*/


/* ############################################
  AJAXMODAL CRUDCONTROL FORMS GETCLICK EVENT 
 ##############################################
 */
$(document).on('click', '.open-modal-crud', function (e) { 
    var id = $(e.target).attr('data-id') || $(e.target).closest('.open-modal-crud').attr('data-id');
    var Action = $(this).data('action');
    var Entity = $(this).data('entity');
    var Upload = $(this).data('upload');
    var url = null;

    //Clear content
    //$(".modal-crud-content").show().html("");

    //Trigger check event in each table to Add/Remove Ids from selected items
    var tableCheck = $(this).parent().parent().parent().parent().find('table tbody input[type="checkbox"]:first'); 
    //Trigger twice to update Ids array
    tableCheck.trigger('click');
    tableCheck.trigger('click');

    //loadIn();
    switch (Entity) {
        case 'groups': url = '../../Ajax/UsersGroups';
            break;
        case 'subgroups': url = '../../Ajax/UsersSubGroups';
            break;
        case 'utilisub': url = '../../Ajax/UsersUtiliSub';
            break;
        case 'profiles': url = '../../Ajax/UsersProfiles';
            break;
        case 'atoms': url = '../../Ajax/UsersAtoms';
            break;
        case 'users': url = '../../Ajax/Users';
            break;
        case 'address': url = '../../Ajax/AddressHelper';
            break;
        case 'institution': url = '../../Ajax/Institution';
            break;
        case 'institutionlevel': url = '../../Ajax/InstitutionLevels';
            break;
        case 'InstitutionUnits': url = '../../Ajax/InstitutionUnits';
            break;
        case 'InstitutionCampus': url = '../../Ajax/InstitutionCampus';
            break;
        case 'applications': url = '../../Ajax/InstitutionApplications';
            break;
        case 'appmodules': url = '../../Ajax/InstitutionModules';
            break;
        case 'graus': url = '../../Ajax/GAManagementQualifications';
            break;
        case 'regime': url = '../../Ajax/GAManagementRegime';
            break;
        case 'regimeins': url = '../../Ajax/GAManagementRegimeIns';
            break;
        case 'regimecand': url = '../../Ajax/GAManagementRegimeCand';
            break;
        case 'cursos': url = '../../Ajax/GAManagementCourses';
            break;
        case 'disciplinas': url = '../../Ajax/GAManagementSubjects';
            break;
        case 'gaclasses': url = '../../Ajax/GAManagementClasses';
            break;
        case 'gaturmasgrupos': url = '../../Ajax/GAManagementClassGroups';
            break;
        case 'cursosramos': url = '../../Ajax/GAManagementRamos';
            break;
        case 'fileupload': url = '../../Ajax/FileManagement';
            break;
        case 'InstitutionBuilding': url = '../../Ajax/InstitutionBuilding';
            break;
        case 'InstitutionFloor': url = '../../Ajax/InstitutionFloor';
            break;
        case 'InstitutionSpacesCharacteristics': url = '../../Ajax/InstitutionSpacesCharacteristics';
            break;
        case 'InstitutionSpacesUtilization': url = '../../Ajax/InstitutionSpacesUtilization';
            break;
        case 'InstitutionSpaces': url = '../../Ajax/InstitutionSpaces';
            break;
        case 'InstitutionUtilizationBySpaces': url = '../../Ajax/InstitutionUtilizationBySpaces';
            break;
        case 'state_groups': url = '../../Ajax/StateGroups';
            break;
        case 'states': url = '../../Ajax/States';
            break;
        case 'group_files': url = '../../Ajax/GroupFiles';
            break;
        case 'files_type': url = '../../Ajax/FilesType';
            break;
        case 'def_country': url = '../../Ajax/DefCountry';
            break;
        case 'def_city': url = '../../Ajax/DefCity';
            break;
        case 'def_district': url = '../../Ajax/DefDistrict';
            break;
        case 'candprocedencia': url = '../../Ajax/GAManagementCandProced';
            break;
        case 'candeducacao': url = '../../Ajax/GAManagementCandEducacao';
            break;
        case 'candcursomedio': url = '../../Ajax/GAManagementCandCursoMedio';
            break;
        case 'candescolamedio': url = '../../Ajax/GAManagementCandInstEnsino';
            break;
        case 'typesoftokens': url = '../../Ajax/TypeOfTokens'
            break;
        case 'tokens': url = '../../Ajax/Tokens'
            break;
        case 'processos': url = '../../Ajax/GAManagementProcess';
            break;
        case 'tipoidentificacao': url = '../../Ajax/TipoIdentificacao'
            break;
        case 'tipoendereco': url = '../../Ajax/TipoEndereco'
            break;
        case 'estadocivil': url = '../../Ajax/EstadoCivil'
            break;
        case 'tipodef': url = '../../Ajax/TipoDeficiencia'
            break;
        case 'graudef': url = '../../Ajax/GrauDeficiencia'
            break;
        case 'tiposang': url = '../../Ajax/GrupoSanguineo'
            break;
        case 'grausparentesco': url = '../../Ajax/GrausParentesco'
            break;
        case 'profissoes': url = '../../Ajax/Profissoes'
            break;
        case 'contract': url = '../../Ajax/ContractTypes'
            break;
        case 'regimetrabalho': url = '../../Ajax/RegimeTrabalho'
            break;
        case 'pesaddress': url = '../../Ajax/PESDadosPessoaisAddress'
            break;
        case 'pesident': url = '../../Ajax/PESDadosPessoaisIdent'
            break;
        case 'pesprofessional': url = '../../Ajax/PESDadosPessoaisProfessional'
            break;
        case 'pesfamily': url = '../../Ajax/PESDadosPessoaisAgregado'
            break;
        case 'pesdisability': url = '../../Ajax/PESDadosPessoaisDeficiencia'
            break;
        case 'currency': url = '../../Ajax/GPAGCurrency'
            break;
        case 'gpagseries': url = '../../Ajax/GPAGSeries'
            break;
        case 'gpagtaxestype': url = '../../Ajax/GPAGTaxesType'
            break;
        case 'candidaturas': url = '../../Ajax/GAManagementApplications';
            break;
        case 'academic_data': url = '../../Ajax/GPUserAcademicData';
            break;
        case 'processoaddspace': url = '../../Ajax/GAManagementProcessAddSpace';
            break;
        case 'gatipoaulas': url = '../../Ajax/GAManagementTipoAulas';
            break;
        case 'gatipodisciplinas': url = '../../Ajax/GAManagementTipoDisciplinas';
            break;
        case 'pautacandidatos': url = '../../Ajax/GAManagementProcessLaunchResults';
            break;
        case 'gapautastipoobservacoes': url = '../../Ajax/GAManagementPautasTipoObservacoes';
            break;
        case 'gaplanosestudos': url = '../../Ajax/GAManagementPlanosEstudos';
            break;
        case 'gpagtaxes': url = '../../Ajax/GPAGTaxes';
            break;
        case 'gpagpaymentmethod': url = '../../Ajax/GPAGPaymentMethod';
            break;
        case 'gpagtypology': url = '../../Ajax/GPAGTypology';
            break;
        case 'gpagtypologytaxes': url = '../../Ajax/GPAGTypologyTaxes';
            break;
        case 'gpagtypologyfines': url = '../../Ajax/GPAGTypologyFines';
            break;
        case 'gpagtypologyvalue': url = '../../Ajax/GPAGTypologyValue';
            break;
        case 'gacalendarios': url = '../../Ajax/NewGACalendario';
            break;
        case 'gacalendariossobrepostas': url = '../../Ajax/NewGACalendario';
            break;
        case 'gaplanosoccorrencias': url = '../../Ajax/GAManagementOccurrencePlans';
            break;
        case 'gpagpaymentplans': url = '../../Ajax/GPAGManagementPaymentPlans';
            break;
        case 'gacalendtipoact': url = '../../Ajax/GRLCalendarActivities';
            break;
        case 'gacoberturabolsas': url = '../../Ajax/GAScholarshipCoverage';
            break;
        case 'gaestatutos': url = '../../Ajax/GAManagementStudentStatutes';
            break;
        case 'statutestypes': url = '../../Ajax/GRLStatutesTypes';
            break
        case 'gpagmodalidadespag': url = '../../Ajax/GRLPaymentModality';
            break;
        case 'gpagcondicaopag': url = '../../Ajax/GRLPaymentsSupplements';
            break;
        case 'gaentidadesbolseiras': url = '../../Ajax/GAScholarshipEntity';
            break;
        case 'gaentidadesbolseirasvalores': url = '../../Ajax/GAScholarshipEntityValue';
            break;
        case 'gpagcheckingaccount': url = '../../Ajax/GPAGCheckingAccount';
            break;
        case 'gapautastipoaval': url = '../../Ajax/GAManagementPautasCompAval';
            break;
        case 'gapautascales': url = '../../Ajax/GAManagementPautasScales';
            break;
        case 'gapautaepocas': url = '../../Ajax/GAManagementPautasEpocas';
            break;
        case 'garequesttype': url = '../../Ajax/GARequestType';
            break;
        case 'garequests': url = '../../Ajax/GARequests';
            break;
        case 'gaefeitospedidos': url = '../../Ajax/GAEfeitosPedidos';
            break;
        case 'gatipoinscricao': url = '../../Ajax/GATipoInscricao';
            break;
        case 'gamanagestudent': url = '../../Ajax/GAManagementStudents';
            break;
        case 'messageCenter': url = '../../Ajax/MessageCenter';
            break;
        case 'gptransferfiles': url = '../../Ajax/GPTransferFiles';
            break;
        case 'hrtimetrack': url = '../../Ajax/HRTimetrackAbsences';
            break;
        case 'gascheduledaysweek': url = '../../Ajax/GAScheduleDaysWeek';
            break;
        case 'gascheduleweeks': url = '../../Ajax/GAScheduleWeeks';
            break;
        case 'gaschedulemodules': url = '../../Ajax/GAScheduleModules';
            break;
        case 'gamanagementfacultyservices': url = '../../Ajax/GAManagementFacultyServices';
            break;
          default: null
    }
    $.ajax({
        type: "POST", url: url,
        data: { "action": Action, "id": id, "BulkIds": values, "upload": Upload },
        cache: false,
        beforeSend: function () {
        },
        complete: function () {
        },
        success: function (result) {
            //loadOut();
            // Deliver modal content
            $(".modal-crud-content").show().html(result);
            // Call javascript functions to enable modal support
            SetUpDatepicker();
            addressHelper();
            setupSelect2();
            quillEditor();
            checkDisabled("ScheduledStatus");
            ajax();
        },
        error: function () {
            $(".modal-crud-content").show().html('<span class="text-accent-red">Erro ao processar este pedido, por favor tente mais tarde!</span>');
        }
    });
});

function loadIn() {
    $('.page-loader').show();
    $('.page-loader').addClass('preloader');
    $(".preloader").fadeIn(), domFactory.handler.upgradeAll();
}
function loadOut() {
    $(".preloader").fadeOut(), domFactory.handler.upgradeAll();
}
function handleFailure(response) {
    $('.handle-success').hide();
    $('.handle-success-message').text('');
    $('.handle-error').fadeOut(100).fadeIn(100).show();
    $('.handle-error-message').text(response.error + ' Erro ao processar pedido, por favor tentar mais tarde..');
    $('html,body').scrollTop(0);
    $("#crudControlModal").scrollTop(0);
}
function handleSuccess(response) {
    if (response.result) {
        $('.handle-error').hide();
        $('.handle-error-message').text('');
        $('.handle-success').fadeOut(100).fadeIn(100).show();
        $('.handle-success-message').text(response.success);
        $('#crudControlModal').modal('hide');
        if (response.table) {
            var table = $('#' + response.table).DataTable();
            table.draw();
            //reload document table just in case as needed by some entities
            var table = $('#tblInstituicoesArquivos').DataTable();
            table.draw();
            //reload fancytree //disable buttons
            if (response.table == "tblInstituicoesArquivos") {
                FancyTreeInit("listbydate");
                var tree = $('#tree').fancytree('getTree');
                tree.reload();
                disableFancytreeButtons();
            }
            if (response.table == "manageProfilesAndGroups") {
                $("#fancyProfile").fancytree('getTree').reload();
                $("#fancyGroup").fancytree('getTree').reload();
                FancyTreeLoadProfilesAndGroups($("#Id").val());
            }
        }
        if (response.url) {
            window.location = response.url;
        }
        if (response.resetForm) {
            $('form').trigger("reset");
        }
        if (response.calendar) {
            refreshCalendar('#' + response.calendar, response.calendarColumn)
        }
        if (response.cand) {
            courseModels(response.validationId, 3, response.processId, response.PesId, null);
            refreshCalendar('#' + response.calendar, response.calendarColumn)
        }
        if (response.reload) {
            location.reload();
        }
        if (response.showToastr == true) {
            toastr.options = {
                "closeButton": true,
                "progressBar": true,
                "positionClass": "toast-bottom-left",
                "preventDuplicates": true,
                "showDuration": "300",
                "hideDuration": "1000",
                "timeOut": "1000",
                "extendedTimeOut": "1000",
                "showEasing": "swing",
                "hideEasing": "linear",
                "showMethod": "fadeIn",
                "hideMethod": "fadeOut"
            }
            toastr.success(response.toastrMessage, { "iconClass": 'customer-info' });
        }
    } else {
        // Not submited
        $('.handle-error').fadeOut(100).fadeIn(100).show();
        $('.handle-error-message').text(response.error);
        $('.handle-success').hide();
        $('.handle-success-message').text('');
        $('html,body').scrollTop(0);
        $("#crudControlModal").scrollTop(0);
    }
}

/* ############################################
  AJAXForm FILE UPLOAD FORM GET FORM SUBMIT EVENT
 ##############################################
 */
function ajax() {
    // Initialize progress bar DOM elements
    var container = $('.progress-container');
    var bar = $('.progress-bar');

    $('#FileUploader').ajaxForm({
        beforeSend: function (xhr) {
            // Validate file size
            var input = document.getElementById('file');
            if (!input.files) {
                //console.error("This browser doesn't seem to support the `files` property of file inputs.");
            } else if (!input.files[0]) {
                //console.log("Please select a file before clicking 'Load'");
            } else {
                var file = input.files[0];
                //var filename = file.name;
                var filesize = file.size; // Bytes
                var allowedfilesize = $('#file').data('filesize');
                if (filesize > allowedfilesize) {
                    const obj = { result: false, error: "Por favor adicionar um documento com a capacidade permitida!" };
                    handleSuccess(obj);
                    return false;
                }
            }
            var percentVal = '0%';
            bar.width(percentVal)
            container.show();
            loadIn();
        },
        uploadProgress: function (event, position, total, percentComplete) {
            var percentVal = percentComplete + '%';
            bar.width(percentVal)
            bar.html(percentVal);
        },
        success: function () {
            var percentVal = '100%';
            bar.width(percentVal)
        },
        complete: function (xhr) {
            container.hide();
            loadOut();
            handleSuccess(xhr.responseJSON);
        },
        failure: function (xhr) {
            handleFailure(xhr.responseJSON);
        }
    });
};

/* ############################################
  CROPPER JS PROFILE PICTURE FUNCTION
 ##############################################
 */
function jscropperprofile() {
    var avatar = document.getElementById('avatar');
    var image = document.getElementById('image');
    var input = document.getElementById('input');
    var $progress = $('.progress');
    var $progressBar = $('.progress-bar');
    var $modal = $('#modal-profile-image-changer');
    var cropper;
    let container = new DataTransfer();

    $('[data-toggle="tooltip"]').tooltip();

    input.addEventListener('change', function (e) {
        var files = e.target.files;
        var done = function (url) {
            input.value = '';
            image.src = url;
            //$alert.hide();
            $modal.modal('show');
        };
        var reader;
        var file;
        var url;
        if (files && files.length > 0) {
            file = files[0];
            if (URL) {
                done(URL.createObjectURL(file));
            } else if (FileReader) {
                reader = new FileReader();
                reader.onload = function (e) {
                    done(reader.result);
                };
                reader.readAsDataURL(file);
            }
        }
    });

    $modal.on('shown.bs.modal', function () {
        cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 3,
        });
    }).on('hidden.bs.modal', function () {
        cropper.destroy();
        cropper = null;
    });

    document.getElementById('crop').addEventListener('click', function () {
        var initialAvatarURL;
        var canvas;
        $modal.modal('hide');
        if (cropper) {
            canvas = cropper.getCroppedCanvas({
                minWidth: document.getElementById("minwidth").value,
                minHeight: document.getElementById("minheigth").value,
                maxWidth: document.getElementById("maxwidth").value,
                maxHeight: document.getElementById("maxheigth").value,
                fillColor: document.getElementById("fillcolor").value,
                imageSmoothingEnabled: true,
                imageSmoothingQuality: 'high',
            });
            initialAvatarURL = avatar.src;
            avatar.src = canvas.toDataURL();
            $progress.show();
            canvas.toBlob(function (blob) {
                var formData = new FormData();
                //Add canvas file to input type
                filex = new File([blob], "img.jpg", { type: "image/jpeg", lastModified: new Date().getTime() });
                container.items.add(filex);
                input.files = container.files;
                // Click Event MVC Upload
                $('#BtnSubmitAvatar').click();
            });
        }
    });
}

















/*
       ******************************************
       *******************************************
       JAVASCRIPT DATATABLE CONSTRUCTORS HERE
       ******************************************
       *******************************************
*/

/*
 ############################################
  DINAMICALLY CREATED CHECKBOX - GET IDS[]
 ##############################################
 */
var values = [];




/* ############################################
   DUPLICAR AQUI -- INICIO -- !!!!!!
   CONSTRUCT DATATABLE GRUPOS
 ##############################################
 */


/* ############################################
   ACESSOS
 ##############################################
 */
function handleDataGrupos() {
    var table = $("#GruposTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGroups", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewgroups/' + full.Id + '"><i class="fa fa-search"/></i></a> <a  style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="groups" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a  style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="groups" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "Description", "name": "Description", "autoWidth": true },
            { "data": "SUBGRUPOS", "name": "SUBGRUPOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(),'paginateInfoGrupos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GruposTable_paginate').appendTo('#paginateGrupos');
        },
    });  
};
function handleDataSubGrupos() {
    var table = $("#SubGruposTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetSubGroups", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "GroupId": $('#GroupId').val(), "AtomId": $('#AtomId').val(), "UserId": $('#UserId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewsubgroups/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="subgroups" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="subgroups" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "GRUPO", "name": "GRUPO", "autoWidth": true },
            { "data": "TOTALUTIL", "name": "TOTALUTIL", "autoWidth": true },
            { "data": "TOTALATOM", "name": "TOTALATOM", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(),'paginateInfoSubGrupos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#SubGruposTable_paginate').appendTo('#paginateSubGrupos');
        },
    });
};
function handleDataSubUser() {
    var table = $("#SubUserTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetSubUser", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "GroupId": $('#GroupId').val(), "UserId": $('#UserId').val()}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="'+full.Link+'" class=""><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="EditarSubUser" data-entity="utilisub" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverSubUser" data-entity="utilisub" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "UTILIZADOR", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "GRUPO", "name": "GRUPO", "autoWidth": true },
            { "data": "OBSERVACAO", "name": "OBSERVACAO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATAACTIVACAO", "name": "DATAACTIVACAO", "autoWidth": true },
            { "data": "DATADESACTIVACAO", "name": "DATADESACTIVACAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoSubUser');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#SubUserTable_paginate').appendTo('#paginateSubUser');
        },
    });
};
function handleDataSubAtom() {
    var table = $("#SubAtomTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetSubAtom", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "GroupId": $('#GroupId').val(), "AtomId": $('#AtomId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return  '<a title="Visualizar" href="' + full.Link + '" class=""><i class="fa fa-search" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverSubAtom" data-entity="utilisub" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "DESCRICAO", "name": "NOME", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "GRUPO", "name": "GRUPO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoSubAtom');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#SubAtomTable_paginate').appendTo('#paginateSubAtom');
        },
    });
};
function handleDataProfileAtom() {
    var table = $("#ProfileAtomTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetProfileAtom", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "ProfileId": $('#ProfileId').val(), "AtomId": $('#AtomId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return  '<a title="Visualizar" href="' + full.Link + '" class=""><i class="fa fa-search" /></i></a>' +
                        ' <a   style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverAtomProfile" data-entity="utilisub" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "DESCRICAO", "name": "NOME", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "PERFIL", "name": "PERFIL", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProfileAtom');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProfileAtomTable_paginate').appendTo('#paginateProfileAtom');
        },
    });
};
function handleDataUserProfile() {
    var table = $("#UserProfileTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetUserProfile", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "ProfileId": $('#ProfileId').val(), "UserId": $('#UserId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return  '<a title="Visualizar" href="' + full.Link + '" class=""><i class="fa fa-search" /></i></a>' +
                            ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverProfileUser" data-entity="utilisub" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a >';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "UTILIZADOR", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "PERFIL", "name": "PERFIL", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserProfile');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserProfileTable_paginate').appendTo('#paginateUserProfile');
        },
    });  
};
function handleDataUserAtom() {
    var table = $("#UserAtomTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetUserAtom", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "UserId": $('#UserId').val(), "AtomId": $('#AtomId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return  '<a title="Visualizar" href="' + full.Link + '"><i class="fa fa-search" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "UTILIZADOR", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "ATOMO", "name": "ATOMO", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserAtom');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserAtomTable_paginate').appendTo('#paginateUserAtom');
        },
    });
};
function handleDataProfilePai() {
    var table = $("#ProfilePaiTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetProfilePai", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "ProfileId": $('#ProfileId').val()}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewprofiles/' + full.ProfileId+'"><i class="fa fa-search" /></i></a >';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "PERFIL", "name": "PERFIL", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "ATOMOS", "name": "ATOMOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProfilePai');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProfilePaiTable_paginate').appendTo('#paginateProfilePai');
        },
    });
};
function handleDataProfileFilho() {
    var table = $("#ProfileFilhoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetProfileFilho", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewprofiles/' + full.ProfileId + '"><i class="fa fa-search" /></i></a > ' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverProfileProfile" data-entity="utilisub" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a >';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "PERFIL", "name": "PERFIL", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "ATOMOS", "name": "ATOMOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProfileFilho');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProfileFilhoTable_paginate').appendTo('#paginateProfileFilho');
        },
    });
}; 
function handleDataUser() {
    var table = $("#UserTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetUser", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "GroupId": $('#GroupId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewusers/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title = "Editar" href = "/administration/edituser/' + full.Id + '?entityfrom=maininfo" > <i class="fa fa-pencil" /></i ></a >' +
                        ' <a style="display:' + full.AccessControlAddGroup + '" title = "Adicionar Grupos" href = "/administration/appendusersitems/' + full.Id + '?entityfrom=usergroups" ><i class="fa fa-user-plus"></i></a>' +
                        ' <a style="display:' + full.AccessControlAddProfile + '" title = "Adicionar Perfis" href = "/administration/appendusersitems/' + full.Id + '?entityfrom=userprofiles" ><i class="fa fa-user-shield"></i></a>';
                        
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "LOGIN", "name": "LOGIN", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "ACTIVO", "name": "ESTADO", "autoWidth": true },
            { "data": "VALIDA", "name": "VALIDA", "autoWidth": true },
            { "data": "DATAACTIVACAO", "name": "DATAACTIVACAO", "autoWidth": true },
            { "data": "DATADESACTIVACAO", "name": "DATADESACTIVACAO", "autoWidth": true },
            { "data": "ACESSOOAUTH", "name": "ACESSOOAUTH", "autoWidth": true },
            { "data": "ACESSOLADP", "name": "ACESSOLADP", "autoWidth": true },
            { "data": "GRUPOS", "name": "GRUPOS", "autoWidth": true },
            { "data": "PERFIS", "name": "PERFIS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUser');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserTable_paginate').appendTo('#paginateUser');
        },
    });
};
function handleDataAtom() {
    var table = $("#AtomsTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetAtom", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "GroupId": $('#GroupId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewatoms/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="atoms" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="atoms" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "ACTIVO", "autoWidth": true },
            { "data": "MODULO", "name": "VALIDA", "autoWidth": true },
            { "data": "GRUPOS", "name": "GRUPOS", "autoWidth": true },
            { "data": "PERFIS", "name": "PERFIS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoAtom');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#AtomsTable_paginate').appendTo('#paginateAtom');
        },
    });
};
function handleDataProfile() {
    var table = $("#ProfileTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetProfiles", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "AtomId": $('#AtomId').val(), "UserId": $('#UserId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewprofiles/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="profiles" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="profiles" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "ACTIVO", "autoWidth": true },
            { "data": "ATOMS", "name": "ATOMS", "autoWidth": true },
            { "data": "USERS", "name": "USERS", "autoWidth": true },
            { "data": "PROFILES", "name": "PROFILES", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProfiles');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProfileTable_paginate').appendTo('#paginateProfiles');
        },
    });
};
function handleDataUserLogs() {
    var table = $("#UserLogTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetUserLog", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "UserId": $('#UserId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewusers/' + full.Id + '"><i class="fa fa-search"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DATA", "name": "DATA", "autoWidth": true },
            { "data": "UTILIZADOR", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "ENDERECOIP", "name": "ENDERECOIP", "autoWidth": true },
            { "data": "ENDERECOMAC", "name": "ENDERECOMAC", "autoWidth": true },
            { "data": "HOST", "name": "HOST", "autoWidth": true },
            { "data": "DEVICE", "name": "DEVICE", "autoWidth": true },
            { "data": "LATITUDE", "name": "LATITUDE", "autoWidth": true },
            { "data": "LONGITUDE", "name": "LONGITUDE", "autoWidth": true },
            { "data": "URL", "name": "URL", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserLog');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserLogTable_paginate').appendTo('#paginateUserLog');
        },
    });
};


/* ############################################
   INSTITUICAO
 ##############################################
 */



function handleDataInstituicao() {
    var table = $("#tblInstituicoes").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetInstitutions", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewinstitutions/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit+'"  title="Editar" href="/administration/editinstitution/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="institution" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "NIF", "name": "NIF", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoInstituicoes');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblInstituicoes_paginate').appendTo('#paginateInstituicoes');
        },
    });
};
function handleDataFileUploaderView() {
    var table = $("#tblInstituicoesArquivos").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../Ajax/GetFiles", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "EntityId": $('#EntityId').val(), "ArquivoId": $('#ArquivoId').val(), "upload": $('#upload').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/' + full.Link + '" target="_blank" class=""><i class="fa fa-search"/></i></a>' +
                        ' <a title="Descarregar" href="/' + full.Link + '" target="_blank" download="" class=""><i class="fa fa-cloud-download"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="fileupload" data-upload="' + $('#upload').val()+'" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="fileupload" data-upload="' + $('#upload').val() +'" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "DOCUMENTO", "name": "DOCUMENTO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "TAMANHO", "name": "TAMANHO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATAACTIVACAO", "name": "DATAACTIVACAO", "autoWidth": true },
            { "data": "DATADESACTIVACAO", "name": "DATADESACTIVACAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
            { "data": "Link", "name": null, "autoWidth": true, "visible": false }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoInstArquivo');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblInstituicoesArquivos_paginate').appendTo('#paginateInstArquivo');
        },
    });
}; 

function handleDataNiveis() {
    var table = $("#tblNiveis").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetNiveis", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewlevels/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit +'" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="institutionlevel" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="institutionlevel" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a> ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NIVELPAI", "name": "NIVELPAI", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "NIVEL", "name": "NIVEL", "autoWidth": true },
            { "data": "INSTITUICAO", "name": "INSTITUICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
         //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblNiveis');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblNiveis_paginate').appendTo('#paginatetblNiveis');
        },
    });
};
function handleDataUnidades() {
    var table = $("#tblUnidades").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetUnits", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewunits/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit +'" title="Editar" href="/administration/editunit/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionUnits" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "UNIDADE_PAI", "name": "UNIDADE_PAI", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "NIVEL", "name": "NIVEL", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblUnidades');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblUnidades_paginate').appendTo('#paginatetblUnidades');
        },
    });
};
function handleDataApplications() {
    var table = $("#AppTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetApplications", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewapplications/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlAdd +'"  title="Adicionar Modulo" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Adicionar" data-entity="appmodules" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle" /></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit +'"  title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="applications" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'"  title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="applications" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "APLICACAO_PAI", "name": "APLICACAO_PAI", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSTITUICAO", "name": "INSTITUICAO", "autoWidth": true },
            { "data": "MODULOS", "name": "MODULOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoApp');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#AppTable_paginate').appendTo('#paginateApp');
        },
    });
};
function handleDataModules() {
    var table = $("#AppModuleTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetAppModules", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "ApplicationId": $('#ApplicationId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewappmodules/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit +'" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="appmodules" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="appmodules" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "APLICACAO", "name": "APLICACAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoAppModule');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#AppModuleTable_paginate').appendTo('#paginateAppModule');
        },
    });
};
function handleDataGrau() {
    var table = $("#GrausTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGraus", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewqualifications/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                           ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="graus" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a > <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="graus" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CICLO", "name": "CICLO", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "DATAACT", "name": "DATAACT", "autoWidth": true },
            { "data": "DATADESACT", "name": "DATADESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGraus');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GrausTable_paginate').appendTo('#paginateGraus');
        },
    });
}
function handleDataRegime() {
    var table = $("#RegimeTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetRegimeFrequencias", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewregimes/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                    ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="regime" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                           ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="regime" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRegime');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RegimeTable_paginate').appendTo('#paginateRegime');
        },
    });
};
function handleDataRegimeIns() {
    var table = $("#RegimeInsTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetRegimeFrequenciasIns", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewregimeins/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                    ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="regimeins" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="regimeins" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRegimeIns');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RegimeInsTable_paginate').appendTo('#paginateRegimeIns');
        },
    });
};
function handleDataRegimeInsCand() {
    var table = $("#RegimeCandTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetRegimeCand", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewregimecand/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="regimecand" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="regimecand" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATAACT", "name": "DATAACT", "autoWidth": true },
            { "data": "DATADESACT", "name": "DATADESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRegimeInsCand');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RegimeCandTable_paginate').appendTo('#paginateRegimeInsCand');
        },
    });
};

function handleDataProcedCand() {
    var table = $("#CandProcedenciaTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCandProced", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewcandproced/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="candprocedencia" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="candprocedencia" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCandProcedenciaTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CandProcedenciaTable_paginate').appendTo('#paginateCandProcedenciaTable');
        },
    });
};


function handleDataCandEducacao() {
    var table = $("#CandEducacaoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCandEducacao", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewcandeducacao/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="candeducacao" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="candeducacao" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCandEducacaoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CandEducacaoTable_paginate').appendTo('#paginateCandEducacaoTable');
        },
    });
};



function handleDataCandCursoMedio() {
    var table = $("#CandMedioCursoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCandCursoMedio", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewcandcursomedio/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="candcursomedio" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="candcursomedio" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCandMedioCursoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CandMedioCursoTable_paginate').appendTo('#paginateCandMedioCursoTable');
        },
    });
};


function handleDataCandInstEnsino() {
    var table = $("#CandInstEnsinoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCandInstEnsino", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewcandinstensino/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="/administration/editcandinstensino/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="candescolamedio" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCandInstEnsinoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CandInstEnsinoTable_paginate').appendTo('#paginateCandInstEnsinoTable');
        },
    });
};
function handleDataCurso() {
    var table = $("#CursosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetCourses", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewcourses/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gamanagement/editcourse/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="cursos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CODIGO", "name": "CODIGO", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSUNI", "name": "INSUNI", "autoWidth": true },
            { "data": "GRAU", "name": "GRAU", "autoWidth": true },
            { "data": "REGIME", "name": "REGIME", "autoWidth": true },
            { "data": "NUMEROANOS", "name": "NUMEROANOS", "autoWidth": true },
            { "data": "DATAINICIO", "name": "DATAINICIO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCursos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CursosTable_paginate').appendTo('#paginateCursos');
        },
    });
};
function handleDataCursoRamos() {
    var table = $("#GACursosRamosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetCoursesRamos", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                CourseId: $("#CursoId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewfields/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '"  title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="cursosramos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="cursosramos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "DATAINI", "name": "CODIGO", "autoWidth": true },
            { "data": "DATAFIM", "name": "INSUNI", "autoWidth": true },
            { "data": "ESTADO", "name": "GRAU", "autoWidth": true },
            { "data": "DATAACT", "name": "REGIME", "autoWidth": true },
            { "data": "DATADESACT", "name": "NUMEROANOS", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DATAINICIO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGACursosRamos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GACursosRamosTable_paginate').appendTo('#paginateGACursosRamos');
        },
    });
};
function handleDataDisciplinas() {
    var table = $("#DisciplinasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetSubjects", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                CourseId: $("#CursoId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewsubjects/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '"  title="Editar" href="/gamanagement/editsubject/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="disciplinas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CODIGO", "name": "CODIGO", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "AULAS", "name": "AULAS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoDisciplinas');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#DisciplinasTable_paginate').appendTo('#paginateDisciplinas');
        },
    });
};
function handleDataGATipoAulas() {
    var table = $("#TipoAulaTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTipoAulas", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Visualizar" href="/administration/viewtipoaula/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gatipoaulas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gatipoaulas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "FREQUENCIA", "name": "FREQUENCIA", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "NUMSEM", "name": "NUMSEM", "autoWidth": true },

            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.VALIDADA == "Sim") $(row).closest("tr").addClass("piaget-success");
            if (data.ANULADA == "1") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoAulaTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoAulaTable_paginate').appendTo('#paginateTipoAulaTable');
        },
    });
};
function handleDataGATipoDisciplinas() {
    var table = $("#TipoDiscTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTipoDisciplinas", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Visualizar" href="/administration/viewtipodisciplina/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gatipodisciplinas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gatipodisciplinas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.VALIDADA == "Sim") $(row).closest("tr").addClass("piaget-success");
            if (data.ANULADA == "1") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoDiscTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoDiscTable_paginate').appendTo('#paginateTipoDiscTable');
        },
    });
};
function handleDataImoveisCampus() {
    var table = $("#tblCampus").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCampus", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewcampus/' + full.Id + '"><i class="fa fa-search"/></i></a>'+
                        ' <a style="display:' + full.AccessControlEdit +'"  title = "Editar" href="/administration/editcampus/' + full.Id + '" class="" > <i class="fa fa-pencil" /></i ></a >' +
                        ' <a style="display:' + full.AccessControlDelete +'"  title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionCampus" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSTITUICAO", "name": "INSTITUICAO", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblCampus');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblCampus_paginate').appendTo('#paginatetblCampus');
        },
    });
};
function handleDataImoveisEdificios() {
    var table = $("#tblEdificios").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi??o
        "serverSide": true, // Para processar as requisi??es no back-end
        //"filter": false, // : est? comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op??o de ordena??o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetBuildings", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewbuilding/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlAdd +'"  title="Adicionar piso" href="/administration/newfloor/' + full.Id + '" class=""><i class="fa fa-plus-circle" /></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit +'"  title="Editar" href="editbuilding/' + full.Id + '" class=""><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'"  title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionBuilding" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CAMPUS", "name": "CAMPUS", "autoWidth": true },
            { "data": "PISOS", "name": "PISOS", "autoWidth": true },
            { "data": "INTEXT", "name": "INTEXT", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura??o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblEdificios');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblEdificios_paginate').appendTo('#paginatetblEdificios');
        },
    });
};
function handleDataImoveisPisos() {
    var table = $("#tblPisos").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi??o
        "serverSide": true, // Para processar as requisi??es no back-end
        //"filter": false, // : est? comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op??o de ordena??o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetFloor", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                EdificioId: $("#EdificioId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="../viewfloor/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '"  title="Editar" href="../editfloor/' + full.Id + '" class=""><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete +'"  title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionFloor" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "EDIFICIO", "name": "EDIFICIO", "autoWidth": true },
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "PISOENTRADA", "name": "PISOENTRADA", "autoWidth": true },
            { "data": "ESPACOS", "name": "ESPACOS", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura??o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblPisos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblPisos_paginate').appendTo('#paginatetblPisos');
        },
    });
};
function handleDataSpacesCharacteristics() {
    var table = $("#tblCharacteristics").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi??o
        "serverSide": true, // Para processar as requisi??es no back-end
        //"filter": false, // : est? comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op??o de ordena??o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCharacteristics", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewspacescharacteristics/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="editspacescharacteristics/' + full.Id + '" class=""><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionSpacesCharacteristics" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },

            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "TIPO_VALOR", "name": "TIPO_VALOR", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura??o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblCharacteristics');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblCharacteristics_paginate').appendTo('#paginatetblCharacteristics');
        },
    });
};
function handleDataSpacesUtilization() {
    var table = $("#tblUtilization").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi??o
        "serverSide": true, // Para processar as requisi??es no back-end
        //"filter": false, // : est? comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op??o de ordena??o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetUtilization", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewspacesutilization/' + full.Id + '"><i class="fa fa-search"/></i></a> <a  style="display:' + full.AccessControlEdit + '" title="Editar" href="editspacesutilization/' + full.Id + '" class=""><i class="fa fa-pencil"/></i></a> <a  style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionSpacesUtilization" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },

            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura??o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
             if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblUtilization');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblUtilization_paginate').appendTo('#paginatetblUtilization');
        },
    });
};
function handleDataImoveisSpaces() {
    var table = $("#tblSpace").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi??o
        "serverSide": true, // Para processar as requisi??es no back-end
        //"filter": false, // : est? comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op??o de ordena??o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetSpaces", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewspace/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="editspaces/' + full.Id + '" class=""><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionSpaces" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "CAMPUS", "name": "CAMPUS", "autoWidth": true },
            { "data": "EDIFICIO", "name": "EDIFICIO", "autoWidth": true },
            { "data": "PISO", "name": "PISO", "autoWidth": true },
            { "data": "UNIDADE", "name": "UNIDADE", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "DATA_ACT", "name": "DATA_ACT", "autoWidth": true },
            { "data": "DATA_DESACT", "name": "DATA_DESACT", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura??o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblSpace');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblSpace_paginate').appendTo('#paginatetblSpace');
        },
    });
};
function handleDataImoveisUtilizationBySpace() {
    var table = $("#tblUtilizationBySpace").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi??o
        "serverSide": true, // Para processar as requisi??es no back-end
        //"filter": false, // : est? comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op??o de ordena??o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetUtilizationBySpace", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                SpaceId: $("#SpaceId").val(),
                UtilizationId: $("#UtilizationId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewutilizationbyspace?id=' + full.UTILIZACAO_ID + '&espaco_id=' + full.ESPACO_ID + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/administration/editutilizationbyspace?id=' + full.UTILIZACAO_ID + '&espaco_id=' + full.ESPACO_ID + '" class=""><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="InstitutionUtilizationBySpaces" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ESPACO", "name": "ESPACO", "autoWidth": true },
            { "data": "UTILIZACAO", "name": "UTILIZACAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura??o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblUtilizationBySpace');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblUtilizationBySpace_paginate').appendTo('#paginatetblUtilizationBySpace');
        },
    });
};
function handleDataStateGroups() {
    var table = $("#tblgroupstates").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetStateGroups", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewgroupstate/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Adicionar estado" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Estado" data-entity="states" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle"></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="state_groups" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a > <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="state_groups" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela 
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "TOTALESTADOS", "name": "TOTALESTADOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblgroupstates');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblgroupstates_paginate').appendTo('#paginatetblgroupstates');
        },
    });
};
function handleDataStates() {
    var table = $("#tblstates").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetStates", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewstate/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Adicionar grupo" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Grupo" data-entity="states" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle"></i></a>'+
                           ' <a title = "Editar" href = "javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="states" data-toggle="modal" data-target="#crudControlModal" ><i class="fa fa-pencil"/></i></a>' +
                           ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="states" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "TOTALGRUPOS", "name": "TOTALGRUPOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblstates');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblstates_paginate').appendTo('#paginatetblstates');
        },
    });
};
function handleDataStatesGroupsREL() {
    var table = $("#tblstatesgroupsrel").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetStatesGroupsREL", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                "StateID": $('#StatusID').val(),
                "GroupID": $('#GroupID').val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="' + full.Link + '"><i class="fa fa-search"/></i></a>' +
                           ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverREL" data-entity="states" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ESTADO_NOME", "name": "ESTADO_NOME", "autoWidth": true },
            { "data": "GRUPO_NOME", "name": "GRUPO_NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblstatesgroupsrel');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblstatesgroupsrel_paginate').appendTo('#paginatetblstatesgroupsrel');
        },
    });
};
function handleDataFileGroupsREL() {
    var table = $("#tblfilegroupsrel").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetFilesGroupsREL", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                "FileID": $('#FileID').val(),
                "GroupID": $('#GroupID').val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="' + full.Link + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="RemoverREL" data-entity="files_type" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ESTADO_NOME", "name": "ESTADO_NOME", "autoWidth": true },
            { "data": "GRUPO_NOME", "name": "GRUPO_NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblfilegroupsrel');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblfilegroupsrel_paginate').appendTo('#paginatetblfilegroupsrel');
        },
    });
};
function handleDataFilesGroup() {
    var table = $("#tblfilesgroup").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetFilesGroup", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewfilesgroup/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Adicionar documento" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Documento" data-entity="files_type" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle"></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="group_files" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a > <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="group_files" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "TOTALTIPOS", "name": "TOTALTIPOS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblfilesgroup');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblfilesgroup_paginate').appendTo('#paginatetblfilesgroup');
        },
    });
};
function handleDataFileTypes() {
    var table = $("#tblfilestype").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetFileTypes", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewfilestype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Adicionar grupo" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Grupo" data-entity="files_type" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle"></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="files_type" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a > <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="files_type" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "GRUPO", "name": "GRUPO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblfilestype');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblfilestype_paginate').appendTo('#paginatetblfilestype');
        },
    });
};
function handleDataDEFCountry() {
    var table = $("#tblcountry").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCountry", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewcountry/' + full.Id + '"><i class="fa fa-search"/></i></a> <a title="Visualizar" href="editcountry/' + full.Id + '"><i class="fa fa-pencil"/></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="def_country" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "TOTALCIDADE", "name": "TOTALCIDADE", "autoWidth": true },
            //
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblcountry');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblcountry_paginate').appendTo('#paginatetblcountry');
        },
    });
};
function handleDataDEFCity() {
    var table = $("#tblcity").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCity", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewcity/' + full.Id + '"><i class="fa fa-search"/></i></a> <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="def_city" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="def_city" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "PAIS", "name": "PAIS", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "TOTALMUNICIPIO", "name": "TOTALMUNICIPIO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblcity');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblcity_paginate').appendTo('#paginatetblcity');
        },
    });
};
function handleDataDEFDistrict() {
    var table = $("#tbldistrict").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetDistrict", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewdistrict/' + full.Id + '"><i class="fa fa-search"/></i></a> <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="def_district" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="def_district" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CIDADE", "name": "CIDADE", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotbldistrict');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tbldistrict_paginate').appendTo('#paginatetbldistrict');
        },
    });
};
function handleDataTypesOfTokens() {
    var table = $("#tbltypeoftokens").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTypesOfTokens", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewtokenstype/' + full.Id + '"><i class="fa fa-search"/></i></a>'+
                           ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="typesoftokens" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="typesoftokens" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotbltypeoftokens');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tbltypeoftokens_paginate').appendTo('#paginatetbltypeoftokens');
        },
    });
};
function handleDataTokens() {
    var table = $("#tbltokens").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTokens", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewtokens/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="tokens" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="tokens" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "TOKEN", "name": "TOKEN", "autoWidth": true },
            { "data": "CONTEUDO", "name": "CONTEUDO", "autoWidth": true },
            { "data": "DATA", "name": "DATA", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotbltokens');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tbltokens_paginate').appendTo('#paginatetbltokens');
        },
    });
};
function handleDataProcesso() {
    var table = $("#ProcessosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/getprocess", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewprocess/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gamanagement/fromprocess/' + full.Id + '?processaction=edit"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlAdd + '" title="Copiar processo" href="/gamanagement/fromprocess/' + full.Id + '?processaction=processclone"><i class="fa fa-copy" /></i></a>' +
                        ' <a style="display:' + full.AccessControlAdd + '" title="Abrir nova fase do processo" href="/gamanagement/fromprocess/' + full.Id + '?processaction=newphase"><i class="fa fa-plus-circle" /></i></a>' +
                        ' <a style="display:none" title="Visualizar candidatos" href="/gamanagement/applicationsbymultipleprocess/' + full.Id + '"><i class="fa fa-eye" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="processos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "ALECTIVO", "name": "ALECTIVO", "autoWidth": true },
            { "data": "REGINGRESSO", "name": "REGINGRESSO", "autoWidth": true },
            { "data": "FASE", "name": "FASE", "autoWidth": true },
            { "data": "GRAUACADEMICO", "name": "GRAUACADEMICO", "autoWidth": true },
            { "data": "REGFREQ", "name": "REGFREQ", "autoWidth": true },
            { "data": "CURSOS", "name": "CURSOS", "autoWidth": true },
            { "data": "CANDIDATOS", "name": "CANDIDATOS", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProcessosTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProcessosTable_paginate').appendTo('#paginateProcessosTable');
        },
    });
};
function handleDataCursosProcessos() {
    var table = $("#CursosProcessosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/getprocesscourses", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                ProcessId: $("#ProcessoId").val()
            }
        },

        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) { //ManageSpaces
                    return '<a title="Visualizar" href="/gamanagement/viewprocess/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="processos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlClassParameter + '" title="Parametrização das salas" href="/gamanagement/processaddspace/' + full.Id + '"><i class="fa fa-cogs"/></i></a>' +
                        ' <a style="display:' + full.AccessControlPauta + '" title="Criação de Mini Pauta" href="javascript:void(0)" class="open-modal-crud" data-id="'+full.Id+'" data-action="Adicionar" data-entity="pautacandidatos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-clipboard-list" /></i></a>' +
                        ' <a style="display:none" title="Visualizar candidatos" href="/gamanagement/applicationsbysingleprocess/' + full.Id + '"><i class="fa fa-eye" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)"c class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="processos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>'
                }
                //
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "REGFREQ", "name": "REGFREQ", "autoWidth": true },
            { "data": "NOTAEXCLUSAO", "name": "NOTAEXCLUSAO", "autoWidth": true },
            { "data": "NRVAGAS", "name": "NRVAGAS", "autoWidth": true },
            { "data": "CANDIDATOS", "name": "CANDIDATOS", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCursosProcessosTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CursosProcessosTable_paginate').appendTo('#paginateCursosProcessosTable');
        },
    });
};
function handleDataProcessoEspacos() {
    var table = $("#ProcessoEspacosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetProcessEspacos", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                ProcessoPaiID: $("#ProcessoPaiID").val(),
                CursoID: $("#CursoID").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="processoaddspace" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlView + '" title="Lista de candidatos inscritos por sala" href="/applications/lists/' + full.processPaiId + '?&courseid=' + full.courseId +'&spaceid='+full.Id+'" target="_blank"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Lista de Presenças (PDF)" href="/pdfreports/gaprocessspaces/' + full.processPaiId + '?&courseid=' + full.courseId + '&spaceid=' + full.Id +'" target="_blank"><i class="fa fa-file-pdf" /></i></a>' +
                        ' <a title="Lista de candidatos inscritos por sala (XLS)" href="/xlsreports/gaprocessspaces/' + full.processPaiId + '?&courseid=' + full.courseId + '&spaceid=' + full.Id +'" target="_blank"><i class="fa fa-file-excel" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SALA", "name": "NOME", "autoWidth": true },
            { "data": "DATA", "name": "SIGLA", "autoWidth": true },
            { "data": "TURNO", "name": "CODIGO", "autoWidth": true },
            { "data": "CANDIDATOS", "name": "CANDIDATOS", "autoWidth": true },
            { "data": "OBSERVACOES", "name": "OBSERVACOES", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.CANDIDATOS == "0") $(row).closest("tr").addClass("piaget-danger");
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProcessoEspacos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProcessoEspacosTable_paginate').appendTo('#paginateProcessoEspacos');
        },
    });
};
function handleDataProcessAddSpaceLists() {
    var table = $("#ProcessAddSpaceLists").DataTable({
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        order: [[1, 'asc']],
        "dom": '<"toolbox">flrtp',//remove componentes i - for pagination information, l -length, p -pagination
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProcessAddSpaceLists');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProcessAddSpaceLists_paginate').appendTo('#paginateProcessAddSpaceLists');
        },
    });
};
function handleDataProcessResultLists() {
    var table = $("#ProcessResultLists").DataTable({
        paging: false,
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        order: [[1, 'asc']],
        //Linguagem PT
        language: {
            url: "/Assets/lib/datatable/pt-PT.json",
            search: '<i class="fa fa-search"></i> Pesquisar:'
        },
        "dom": '<"toolbox">flrtp',//remove componentes i - for pagination information, l -length, p -pagination, f -filter
        initComplete: (settings, json) => {
         /*   $('div.dataTables_filter input').removeAttr('class');
            $('div.dataTables_filter input').attr('class', 'form-control');
            $('div.dataTables_filter input').css('display', 'inline');
            $('div.dataTables_filter input').css('width', '60%');*/
        },
    });
};
function handleDataProcessoPautas() {
    var table = $("#ProcessoPautasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetProcessPautas", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                ProcessoPaiID: $("#ProcessoPaiID").val(),
                CursoID: $("#CursoID").val(),
                ID: $("#ID").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlView + '" target="_blank" title="Visualizar pauta" href="/gamanagement/lres/' + full.Id + '?&processid=' + full.ReturnId + '&component=1" ><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEvents + '" target="_blank" title="Eventos da pauta" href="/gamanagement/lresevents/' + full.Id + '?&processid=' + full.ReturnId + '&component=1" ><i class="fa fa-bolt"/></i></a>' +
                        ' <a style="display:' + full.AccessControlPublish + '" title="Publicar pauta" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Publicar" data-entity="pautacandidatos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-file-upload"/></i></a>' +
                        ' <a style="display:' + full.AccessControlPDFMiniPauta + '" target="_blank" title="Mini-Pauta (PDF)" href="/pdfreports/GAProcessResults/' + full.Id + '?&processid=' + full.ReturnId + '&edit=1"><i class="fa fa-file-pdf"/></i></a>' +
                        ' <a style="display:' + full.AccessControlPDF + '" target="_blank" title="Pauta de Resultados do Exame de Admissão (PDF)" href="/pdfreports/GAProcessResults/' + full.Id + '?&processid=' + full.ReturnId + '"><i class="fa fa-file-pdf"/></i></a>' +
                        ' <a style="display:' + full.AccessControlPDF + '" target="_blank" title="Pauta de Notas do Exame de Admissão (PDF)" href="/pdfreports/GAProcessResults/' + full.Id + '?&processid=' + full.ReturnId + '&results=1"><i class="fa fa-file-pdf"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "VERSAO", "name": "VERSAO", "autoWidth": true },
            { "data": "TURNO", "name": "TURNO", "autoWidth": true },
            { "data": "SALA", "name": "SALA", "autoWidth": true },
            { "data": "CANDIDATOS", "name": "CANDIDATOS", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "FINALIZADA", "name": "FINALIZADA", "autoWidth": true },
            { "data": "PUBLICADA", "name": "PUBLICADA", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.CANDIDATOS =="0") $(row).closest("tr").addClass("piaget-danger");
            if (data.PUBLICADA == "Sim") $(row).closest("tr").addClass("piaget-success");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProcessoPautas');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProcessoPautasTable_paginate').appendTo('#paginateProcessoPautas');
        },
    });
};
function handleDataTipoIdentificacao() {
    var table = $("#TipoIdentTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTipoIdentificacao", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewidentificationtype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="tipoidentificacao" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="tipoidentificacao" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoIdentTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoIdentTable_paginate').appendTo('#paginateTipoIdentTable');
        },
    });
};
function handleDataTipoEndereco() {
    var table = $("#TipoEnderecoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTipoEndereco", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewaddresstype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                         ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="tipoendereco" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="tipoendereco" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoEndTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoEnderecoTable_paginate').appendTo('#paginateTipoEndTable');
        },
    });
};
function handleDataEstadoCivil() {
    var table = $("#EstadoCivilTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetEstadoCivil", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewcivilstatus/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                          ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="estadocivil" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="estadocivil" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoEstadoCivilTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#EstadoCivilTable_paginate').appendTo('#paginateEstadoCivilTable');
        },
    });
};
function handleDataTipoDef() {
    var table = $("#TipoDefTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetTipoDeficiencia", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewdeficiencytype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                         ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="tipodef" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="tipodef" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoDefTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoDefTable_paginate').appendTo('#paginateTipoDefTable');
        },
    });
};
function handleDataGrauDef() {
    var table = $("#GrauDefTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGrauDeficiencia", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewdeficiencyloss/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                         ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="graudef" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="graudef" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGrauDefTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GrauDefTable_paginate').appendTo('#paginateGrauDefTable');
        },
    });
};
function handleDataGrupoSang() {
    var table = $("#TipoSangTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGrupoSang", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewbloodtype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="tiposang" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="tiposang" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoSangTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoSangTable_paginate').appendTo('#paginateTipoSangTable');
        },
    });
};
function handleDataGrauParentesco() {
    var table = $("#GrauParentescoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGrupoParentesco", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewkindegree/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                           ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="grausparentesco" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="grausparentesco" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGrauParentescoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GrauParentescoTable_paginate').appendTo('#paginateGrauParentescoTable');
        },
    });
};
function handleDataProfissoes() {
    var table = $("#ProfissoesTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetProfissoes", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewjobs/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                          ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="profissoes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="profissoes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoProfissoesTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ProfissoesTable_paginate').appendTo('#paginateProfissoesTable');
        },
    });
};
function handleDataContracts() {
    var table = $("#ContractTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetContractTypes", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewcontracttype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                         ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="contract" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="contract" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoContractTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ContractTable_paginate').appendTo('#paginateContractTable');
        },
    });
};
function handleDataRegimeTrabalho() {
    var table = $("#RegimeTrabalhoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetRegimeTrabalho", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewemploymenttype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                          ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="regimetrabalho" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="regimetrabalho" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRegimeTrabalhoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RegimeTrabalhoTable_paginate').appendTo('#paginateRegimeTrabalhoTable');
        },
    });
};
function handleDataGPUsers() {
    var table = $("#DadosPessoaisTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/GetUsers", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gpmanagement/viewusers/' + full.Id + '" class=""><i class="fa fa-search" /></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gpmanagement/edituser/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlUser + '" title="Utilizador" href="/administration/viewusers/' + full.UtilizadorId + '"><i class="fa fa-user-shield" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "USER", "name": "USER", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "GENERO", "name": "GENERO", "autoWidth": true },
            { "data": "DATANASCIMENTO", "name": "DATANASCIMENTO", "autoWidth": true },
            { "data": "TELEFONE", "name": "TELEFONE", "autoWidth": true },
            { "data": "EMAIL", "name": "EMAIL", "autoWidth": true },
            { "data": "UTILIZADOR", "name": "UTILIZADOR", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoDadosPessoais');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#DadosPessoaisTable_paginate').appendTo('#paginateDadosPessoais');
        },
    });
};
function handleDataGPUsersAddress() {
    var table = $("#UserAddressTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/GetUsersAddress", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": $('#PesId').val()}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="pesaddress" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="pesaddress" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "PRINCIPAL", "name": "PRINCIPAL", "autoWidth": true },
            { "data": "TIPOENDERECO", "name": "TIPOENDERECO", "autoWidth": true },
            { "data": "ENDERECO", "name": "ENDERECO", "autoWidth": true },
            { "data": "MORADA", "name": "MORADA", "autoWidth": true },
            { "data": "RUA", "name": "RUA", "autoWidth": true },
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "DATAINICIAL", "name": "DATAINICIAL", "autoWidth": true },
            { "data": "DATAFINAL", "name": "DATAFINAL", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserAddress');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserAddressTable_paginate').appendTo('#paginateUserAddress');
        },
    });
};
function handleDataGPUsersIdent() {
    var table = $("#UserIdentTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/GetUsersIdentification", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": $('#PesId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="pesident" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="pesident" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "IDENTIFICACAO", "name": "IDENTIFICACAO", "autoWidth": true },
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "DATAEMISSAO", "name": "DATAEMISSAO", "autoWidth": true },
            { "data": "DATAVALIDADE", "name": "DATAVALIDADE", "autoWidth": true },
            { "data": "LOCALEMISSAO", "name": "LOCALEMISSAO", "autoWidth": true },
            { "data": "ORGAOEMISSOR", "name": "ORGAOEMISSOR", "autoWidth": true },
            { "data": "OBSERVACAO", "name": "OBSERVACAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserIdent');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserIdentTable_paginate').appendTo('#paginateUserIdent');
        },
    });
};
function handleDataGPUsersProfissao() {
    var table = $("#UserProfissaoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/GetUsersProfessional", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": $('#PesId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="pesprofessional" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="pesprofessional" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "EMPRESA", "name": "EMPRESA", "autoWidth": true },
            { "data": "FUNCAO", "name": "FUNCAO", "autoWidth": true },
            { "data": "CONTRACTO", "name": "CONTRACTO", "autoWidth": true },
            { "data": "REGIME", "name": "REGIME", "autoWidth": true },
            { "data": "UNIDADE", "name": "UNIDADE", "autoWidth": true },
            { "data": "ESPACO", "name": "ESPACO", "autoWidth": true },
            { "data": "DATAINICIAL", "name": "DATAINICIAL", "autoWidth": true },
            { "data": "DATAFIM", "name": "DATAFIM", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserProfissaoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserProfissaoTable_paginate').appendTo('#paginateUserProfissaoTable');
        },
    });
};
function handleDataGPUsersFamily() {
    var table = $("#UserFamilyTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/GetUsersFamily", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": $('#PesId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a  style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="pesfamily" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a  style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="pesfamily" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "AGREGADO", "name": "AGREGADO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "PROFISSAO", "name": "PROFISSAO", "autoWidth": true },
            { "data": "TELEFONE", "name": "TELEFONE", "autoWidth": true },
            { "data": "TELEFONEALTERNATIVO", "name": "TELEFONEALTERNATIVO", "autoWidth": true },
            { "data": "FAX", "name": "FAX", "autoWidth": true },
            { "data": "EMAIL", "name": "EMAIL", "autoWidth": true },
            { "data": "URL", "name": "URL", "autoWidth": true },
            { "data": "ENDERECO", "name": "ENDERECO", "autoWidth": true },
            { "data": "MORADA", "name": "MORADA", "autoWidth": true },
            { "data": "RUA", "name": "RUA", "autoWidth": true },
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserFamilyTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserFamilyTable_paginate').appendTo('#paginateUserFamilyTable');
        },
    });
};
function handleDataGPUsersDisability() {
    var table = $("#UserDisabilityTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/GetUsersDisability", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": $('#PesId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a  style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="pesdisability" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a  style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="pesdisability" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DEFICIENCIA", "name": "DEFICIENCIA", "autoWidth": true },
            { "data": "GRAU", "name": "GRAU", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoUserDisabilityTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#UserDisabilityTable_paginate').appendTo('#paginateUserDisabilityTable');
        },
    });
};
function handleDataGPUserAcademicData() {
    var table = $("#CandAcademicDataTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpmanagement/getusersacademicdata", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": $('#PesId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {

                    return '<a  style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="academic_data" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a  style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="academic_data" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a >';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "PROCEDENCIA", "name": "PROCEDENCIA", "autoWidth": true },
            { "data": "TIPO_EDUCACAO", "name": "TIPO_EDUCACAO", "autoWidth": true },
            { "data": "ESCOLA", "name": "ESCOLA", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "ANO_CONCLUSAO", "name": "ANO_CONCLUSAO", "autoWidth": true },
            { "data": "NOTA_FINAL", "name": "NOTA_FINAL", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCandAcademicDataTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CandAcademicDataTable_paginate').appendTo('#paginateCandAcademicDataTable');
        },
    });
};
function handleDataGPAGCurrency() {
    var table = $("#currencyTbl").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetCurrencyTbl", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewcurrency/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                      ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="currency" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="currency" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CODIGO", "name": "CODIGO", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfocurrencyTbl');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#currencyTbl_paginate').appendTo('#paginatecurrencyTbl');
        },
    });
};
function handleDataGPAGSeries() {
    var table = $("#GpagSeriesTbl").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetGpagSerie", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a  title="Visualizar" href="viewseries/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gpagseries" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagseries" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ANO", "name": "ANO", "autoWidth": true },
            { "data": "SERIE", "name": "SERIE", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "CONTADOR", "name": "CONTADOR", "autoWidth": true },
            { "data": "RENOVACAO", "name": "RENOVACAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGpagSeriesTbl');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GpagSeriesTbl_paginate').appendTo('#paginateGpagSeriesTbl');
        },
    });
};
function handleDataGPAGTaxesType() {
    var table = $("#GpagTaxesTypeTbl").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGpagTaxesType", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewtaxestype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gpagtaxestype" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a> <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagtaxestype" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGpagTaxesTypeTbl');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GpagTaxesTypeTbl_paginate').appendTo('#paginateGpagTaxesTypeTbl');
        },
    });
};
//Candidaturas
function handleDataGAApplications() {
    var table = $("#ApplicationsTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/getapplications", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                ProcessId: $("#ProcessId").val(),
                ProcessoPai: $("#ProcessoPai").val(),
                StudentId: $("#StudentId").val(),
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<div class="btn-group btn-group-datatable"> <a title="Visualizar" href="/gamanagement/viewapplications/' + full.Id + '" class="btn btn-primary btn-sm btn-rounded"><i class="fa fa-search"/></i></a>' +
                        '<a style="display:' + full.DisabledEdit + '" title="Editar" href="javascript:" data-id="' + full.Id + '"  data-action="Editar" data-entity="candidaturas" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud btn btn-accent-pickled-bluewood btn-sm btn-rounded"><i class="fa fa-pencil" /></i></a>' +
                        '<a style="display:' + full.DisabledCourseChange + '" title="Mudança de curso" href="javascript:" data-id="' + full.Id + '" data-action="EditCourses" data-entity="candidaturas" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud btn btn-warning btn-sm btn-rounded"><i class="fa fa-exchange" /></i></a>' + 
                        '<a style="display:' + full.DisabledMatricular + '" title="Matricular" href="javascript:" data-id="' + full.Id + '" data-action="Matricular" data-entity="candidaturas" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud btn btn-success btn-sm btn-rounded"><i class="fa fa-plus" /></i></a>' +
                        '<a style="display:' + full.DisabledSigarra + '" title="Submeter candidatura ao sigarra" href="javascript:" data-id="' + full.Id + '" data-action="Sigarra" data-entity="candidaturas" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud btn btn-success btn-sm btn-rounded"><i class="fa fa-plus" /></i></a>' +
                        '<a style="display:' + full.DisabledCancel + '" title="Anular" class="open-modal-crud btn btn-sm btn-rounded btn-danger" data-id="' + full.Id + '" data-action="Cancel" data-entity="candidaturas" data-toggle="modal" data-target="#crudControlModal" ><i class="fa fa-power-off" /></i></a>'+
                        '<a style="display:' + full.AccessControlGA + '" title="Perfil do estudante" class="btn btn-primary btn-sm btn-rounded" href="/gamanagement/viewstudent/' + full.PessoaId + '"><i class="fa fa-user-graduate" /></i></a>' +
                        '<a style="display:' + full.AccessControlPES + '" title="Dados pessoais" class="btn btn-primary btn-sm btn-rounded" href="/gpmanagement/viewusers/' + full.PES_ID + '"><i class="fa fa-user-edit" /></i></a>' +
                        '<a style="display:' + full.AccessControlCC + '" title="Conta Corrente" target="_blank" class="btn btn-info btn-sm btn-rounded" href="/gpagmanagement/checkingaccounts/' + full.UTILIZADOR_ID + '"><i class="fa fa-circle-dollar-to-slot" /></i></a>' +
                        '<a style="display:' + full.DisabledBoletimMatric + '" title="Boletim de Matrícula (PDF)" href="/pdfreports/GARegistration/' + full.Id + '" class="btn btn-primary btn-sm btn-rounded"><i class="fa-solid fa-cloud-arrow-down"></i></a>' +
                        '<a style="display:' + full.DisabledBoletim + '" title="Boletim de Inscrição (PDF)" href="/pdfreports/GAApplications/' + full.Id + '" class="btn btn-primary btn-sm btn-rounded"><i class="fa fa-download" /></i></a>' +
                        '<a style="display:' + full.DisabledDelete + '" title="Remover" class="open-modal-crud btn btn-sm btn-rounded btn-danger" data-id="' + full.Id + '" data-action="Remover" data-entity="candidaturas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a> </div>';
                  
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NRTEMP", "name": "NRTEMP", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "IDENTIFICACAO", "name": "IDENTIFICACAO", "autoWidth": true },
            { "data": "NRIDENTIFICACAO", "name": "NRIDENTIFICACAO", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "REGFREQ", "name": "REGFREQ", "autoWidth": true },
            { "data": "REGING", "name": "REGING", "autoWidth": true },
            { "data": "ALECTIVO", "name": "ALECTIVO", "autoWidth": true },
            { "data": "FASE", "name": "FASE", "autoWidth": true },
            { "data": "DTCANDIDATURA", "name": "DTCANDIDATURA", "autoWidth": true },
            { "data": "RESULTADO", "name": "RESULTADO", "autoWidth": true },
            //{ "data": "NOTA", "name": "NOTA", "autoWidth": true },
            //{ "data": "SALA", "name": "SALA", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "VALIDADA", "name": "VALIDADA", "autoWidth": true },
            { "data": "FINALIZADA", "name": "FINALIZADA", "autoWidth": true },
            { "data": "OPCAO", "name": "OPCAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"]; 
            if (data.ESTADO == "Matriculado") $(row).closest("tr").addClass("bg-warning-piaget");
            if (data.VALIDADA == "Sim" && data.RESULTADO=="Admitido") $(row).closest("tr").addClass("piaget-success");
            if (data.ANULADA == "1") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoApplicationsTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ApplicationsTable_paginate').appendTo('#paginateApplicationsTable');
        },
    });
};
function handleDataGAPautasObservacoes() {
    var table = $("#TipoPautaObserTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetPautaTipoObservacoes", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gapautastipoobservacoes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gapautastipoobservacoes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.VALIDADA == "Sim") $(row).closest("tr").addClass("piaget-success");
            if (data.ANULADA == "1") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoPautaObserTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoPautaObserTable_paginate').appendTo('#paginateTipoPautaObserTable');
        },
    });
};
function handleDataGAPautasCompAval() {
    var table = $("#CompAvalPautasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetPautaCompAval", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gapautastipoaval" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gapautastipoaval" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCompAvalPautasTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CompAvalPautasTable_paginate').appendTo('#paginateCompAvalPautasTable');
        },
    });
};
function handleDataGAPautasScales() {
    var table = $("#ScalesPautasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetPautaScales", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gapautascales" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gapautascales" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "VMINIMO", "name": "VMINIMO", "autoWidth": true },
            { "data": "VMAXIMO", "name": "VMAXIMO", "autoWidth": true },
            { "data": "DECIMAIS", "name": "DECIMAIS", "autoWidth": true },
            { "data": "COMPEPOCA", "name": "COMPEPOCA", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoScalesPautasTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ScalesPautasTable_paginate').appendTo('#paginateScalesPautasTable');
        },
    });
};
function handleDataGAPautasEpocas() {
    var table = $("#EpocaExamePautasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetPautaEpocas", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gapautaepocas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gapautaepocas" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "ESCALA", "name": "ESCALA", "autoWidth": true },
            { "data": "PAUTA", "name": "PAUTA", "autoWidth": true },
            { "data": "EXAME", "name": "EXAME", "autoWidth": true },
            { "data": "DISCIPLINA", "name": "DISCIPLINA", "autoWidth": true },
            { "data": "TIPODISCIPLINA", "name": "TIPODISCIPLINA", "autoWidth": true },
            { "data": "INSCRICAO", "name": "INSCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoEpocaExamePautasTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#EpocaExamePautasTable_paginate').appendTo('#paginateEpocaExamePautasTable');
        },
    });
};
function handleDataGAPlanosEstudos() {
    var table = $("#PlanosEstudosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetStudyPlan", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                CourseId: $("#CursoId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewstudyplan/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gamanagement/editstudyplan/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlNew + '" title="Copiar plano de estudo" href="/gamanagement/copystudyplan/' + full.Id + '"><i class="fa fa-copy" /></i></a>' +
                        ' <a title="Consultar plano de estudo" href="/gamanagement/studyplansassoc/' + full.Id + '?&entityfrom=consult"><i class="fa fa-eye"/></i></a>' +
                        ' <a style="display:' + full.AccessControlManage + '" title="Administrar unidades curriculares" href="/gamanagement/studyplansassoc/' + full.Id + '?&entityfrom=manage"><i class="fa fa-cogs"/></i></a>' +
                        ' <a title="Exportar PDF" href="/pdfreports/GAStudyPlans/' + full.Id + '" target="_blank" class=""><i class="fa fa-file-pdf"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaplanosestudos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "ANOINFERIOR", "name": "ANOINFERIOR", "autoWidth": true },
            { "data": "ANOSUPERIOR", "name": "ANOSUPERIOR", "autoWidth": true },
            { "data": "DATAINICIO", "name": "DATAINICIO", "autoWidth": true },
            { "data": "DATAINICIOPUBLICACAO", "name": "DATAINICIOPUBLICACAO", "autoWidth": true },
            { "data": "PRINCIPAL", "name": "PRINCIPAL", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.PRINCIPAL == "Sim") $(row).closest("tr").addClass("piaget-success");
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoPlanosEstudosTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#PlanosEstudosTable_paginate').appendTo('#paginatePlanosEstudosTable');
        },
    });
};
function handleDataTurmasGrupos() {
    var table = $("#tblTurmasGrupos").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetClassGroups", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                ClassId: $("#ClassId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gaturmasgrupos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaturmasgrupos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a> ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "CAPACIDADE", "name": "CAPACIDADE", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotblTurmasGrupos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tblTurmasGrupos_paginate').appendTo('#paginatetblTurmasGrupos');
        },
    });
};


function handleDataGPAgPaymentMethod() {
    var table = $("#GpagPaymentMethodTbl").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetPaymentMethods", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gpagmanagement/viewpaymentmethod/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gpagmanagement/editpaymentmethod/' + full.Id + '"" class=""><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagpaymentmethod" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash mr-1" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "METODOPAGPAI", "name": "METODOPAGPAI", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "DESIGNACAO", "name": "DESIGNACAO", "autoWidth": true },
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "UNICIDADE", "name": "UNICIDADE", "autoWidth": true },
            { "data": "IDENTIFICACAOPAGAMENTO", "name": "IDENTIFICACAOPAGAMENTO", "autoWidth": true },
            { "data": "DATAPAGAMENTO", "name": "DATAPAGAMENTO", "autoWidth": true },
            { "data": "AGGFOLHACAIXA", "name": "AGGFOLHACAIXA", "autoWidth": true },
            { "data": "AGGFOLHACAIXADET", "name": "AGGFOLHACAIXADET", "autoWidth": true },
            { "data": "ENTIDADE", "name": "ENTIDADE", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGpagPaymentMethodTbl');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GpagPaymentMethodTbl_paginate').appendTo('#paginateGpagPaymentMethodTbl');
        },
    });
};
function handleDataGPAGTaxes() {
    var table = $("#GpagTaxesTbl").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetGPAGTaxes", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gpagmanagement/viewtax/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '"  title="Editar" href="/gpagmanagement/edittax/' + full.Id + '"" class=""><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '"  title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagtaxes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "VALORTIPO", "name": "VALORTIPO", "autoWidth": true },
            { "data": "ENTIDADE", "name": "ENTIDADE", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "DATAINICIO", "name": "DATAINICIO", "autoWidth": true },
            { "data": "DATAFIM", "name": "DATAFIM", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGpagTaxesTbl');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GpagTaxesTbl_paginate').appendTo('#paginateGpagTaxesTbl');
        },
    });
};
function handleDataGPAGTypologies() {
    var table = $("#TypologyTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetTypologies", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gpagmanagement/viewtypology/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlValor + '" title="Adicionar valor" href="/gpagmanagement/newtypologyvalue/' + full.Id + '"><i class="fa fa-dollar"/></i></a>' +
                        ' <a style="display:' + full.AccessControlImposto + '" title="Adicionar imposto" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Adicionar" data-entity="gpagtypologytaxes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-hand-holding-dollar" /></i></a > ' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gpagmanagement/edittypology/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagtypology" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "TIPOLOGIAPAI", "name": "TIPOLOGIAPAI", "autoWidth": true },
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "ENTIDADE", "name": "ENTIDADE", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
           { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTypologyTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TypologyTable_paginate').appendTo('#paginateTypologyTable');
        },
    });
};
function handleDataGPAGTypolyValues() {
    var table = $("#TypologyValuesTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetTypologyValues", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                TipologiaId: $("#Typology").val(),
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gpagmanagement/edittypologyvalue/' + full.Id + '"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagtypologyvalue" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "DATAINICIO", "name": "DATAINICIO", "autoWidth": true },
            { "data": "DATAFIM", "name": "DATAFIM", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTypologyValuesTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TypologyValuesTable_paginate').appendTo('#paginateTypologyValuesTable');
        },
    });
};
function handleDataGPAGTypolyFines() {
    var table = $("#TypologyFinesTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetTypologyFines", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                TipologiaId: $("#Typology").val(),
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gpagtypologyfines" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagtypologyfines" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "ACUMULACAO", "name": "ACUMULACAO", "autoWidth": true },
            { "data": "CONTROLO", "name": "CONTROLO", "autoWidth": true },
            { "data": "INICIO", "name": "INICIO", "autoWidth": true },
            { "data": "FIM", "name": "FIM", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTypologyFinesTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TypologyFinesTable_paginate').appendTo('#paginateTypologyFinesTable');
        },
    });
}
function handleDataGPAGTypolyTaxes() {
    var table = $("#TypologyTaxesTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetTypologyTaxes", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                TipologiaId: $("#Typology").val(),
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagtypologytaxes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "IMPOSTO", "name": "IMPOSTO", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTypologyTaxesTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TypologyTaxesTable_paginate').appendTo('#paginateTypologyTaxesTable');
        },
    });
};
function handleDataPlanosOcorrencias() {
    var table = $("#OccurrencePlansTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/getoccurrenceplans", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                CourseId: $("#CursoId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewoccurrenceplan/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar"  data-entity="gaplanosoccorrencias" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlCopy + '" title="Copiar plano de ocorrência" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Copiar"  data-entity="gaplanosoccorrencias" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-copy" /></i></a>' +
                        ' <a style="" title="Consultar ocorrências" href="/gamanagement/occurrenceplansassoc/' + full.Id + '?&entityfrom=consult"><i class="fa fa-eye" /></i></a>' +
                        ' <a style="display:' + full.AccessControlManage + '" title="Administrar ocorrências" href="/gamanagement/occurrenceplansassoc/' + full.Id + '?&entityfrom=manage"><i class="fa fa-cogs" /></i></a>' +
                        ' <a title="Exportar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Exportar"  data-entity="gaplanosoccorrencias" data-toggle="modal" data-target="#crudControlModal"><i class="fa-regular fa-folder-open"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaplanosoccorrencias" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "PLANOESTUDO", "name": "PLANOESTUDO", "autoWidth": true },
            { "data": "ANOLECTIVO", "name": "ANOLECTIVO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoOccurrencePlansTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#OccurrencePlansTable_paginate').appendTo('#paginateOccurrencePlansTable');
        },
    });
};
function handleDataAcademicCalendar() {
    var table = $("#AcademicCalendarTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetCalendarTable", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                Year: $("#ALectivo").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return ' <a title="Visualizar" href="javascript:void(0)" class="open-modal-crud" data-action="Editar" data-id="' + full.Id + '" data-entity="gacalendarios" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-search" /></i></a>' +
                        ' <a style="display:' + full.AccessControlNew+'" title="Adicionar período (Sobreposta)" href="javascript:void(0)" class="open-modal-crud" data-action="Adicionar" data-id="' + full.Id + '" data-entity="gacalendarios" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle" /></i></a>';
                  }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ANOLECTIVO", "name": "ANOLECTIVO", "autoWidth": true },
            { "data": "DATAINICIO", "name": "DATAINICIO", "autoWidth": true },
            { "data": "DATAFIM", "name": "DATAFIM", "autoWidth": true },
            { "data": "ACTIVIDADE", "name": "ACTIVIDADE", "autoWidth": true },
            { "data": "OBSERVACOES", "name": "OBSERVACOES", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.PERIDO_AULAS == "Sim") $(row).closest("tr").css("background", "#55efc4");
            if (data.PERIDO_AULAS == "Não") $(row).closest("tr").css("background", "#f9ca24");
            if (data.GA_CALENDARIO_ACADEMICO_ID != null) $(row).closest("tr").find("td:eq(2)").css("background", "#9cf");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoAcademicCalendarTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#AcademicCalendarTable_paginate').appendTo('#paginateAcademicCalendarTable');
        },
    });
};
function handleDataAcademicCalendarAulas() {
    var table = $("#AcademicCalendarAulasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetCalendarAulasTable", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                Year: $("#ALectivo").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return ' ';
                        
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ANOLECTIVO", "name": "ANOLECTIVO", "autoWidth": true },
            { "data": "DATA", "name": "DATA", "autoWidth": true },
            { "data": "SEMESTRE", "name": "SEMESTRE", "autoWidth": true },
            { "data": "VERSAO", "name": "VERSAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoAcademicCalendarAulasTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#AcademicCalendarAulasTable_paginate').appendTo('#paginateAcademicCalendarAulasTable');
        },
    });
};
function handleDataPaymentPlans() {
    var table = $("#PaymentPlansTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisi��o
        "serverSide": true, // Para processar as requisi��es no back-end
        //"filter": false, // : est� comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Op��o de ordena��o para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gpagmanagement/GetPaymentPlans", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="viewpaymentplans/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit +'" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gpagpaymentplans" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlCopy +'" title="Copiar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Clone" data-entity="gpagpaymentplans" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-copy"/></i></a>' +
                        ' <a title="Prestações" href="/gpagmanagement/paymentplansassoc/' + full.Id + '"><i class="fa fa-percentage"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete +'" title = "Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagpaymentplans" data-toggle="modal" data-target="#crudControlModal" > <i class="fa fa-trash" /></i ></a > ';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "GRAU", "name": "GRAU", "autoWidth": true },
            { "data": "ANOLECTIVO", "name": "ANOLECTIVO", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configura��o da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoPaymentPlansTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#PaymentPlansTable_paginate').appendTo('#paginatePaymentPlansTable');
        },
    });
};
function handleDataGRLCalendarioTipoActividades() {
    var table = $("#CalendTipoActividadesTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetCalendarActivities", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Visualizar" href="/gamanagement/viewcalendaractivity/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gacalendtipoact" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gacalendtipoact" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoCalendTipoActividadesTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#CalendTipoActividadesTable_paginate').appendTo('#paginateCalendTipoActividadesTable');
        },
    });
};
function handleDataGRLTIposEstatutos() {
    var table = $("#tbltipoestatutos").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetStatutesType", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewstatutestype/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="statutestypes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="statutestypes" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';

                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "ESTATUTO_BS", "name": "ESTATUTO_BS", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfotbltipoestatutos');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#tbltipoestatutos_paginate').appendTo('#paginatetbltipoestatutos');
        },
    });
};
function handleDataGRLModalidadesPagamentos() {
    var table = $("#modalidadespagamentosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetPaymentModalities", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Visualizar" href="/administration/viewpaymentmodality/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gpagmodalidadespag" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagmodalidadespag" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfomodalidadespagamentosTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#modalidadespagamentosTable_paginate').appendTo('#paginatemodalidadespagamentosTable');
        },
    });
};
function handleDataGRLCondicoesPagamentos() {
    var table = $("#condicoesPagamentosTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetPaymentsSupplements", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Visualizar" href="/administration/viewpaymentssupplements/' + full.Id + '"><i class="fa fa-search"/></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gpagcondicaopag" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gpagcondicaopag" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfocondicoesPagamentosTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#condicoesPagamentosTable_paginate').appendTo('#paginatecondicoesPagamentosTable');
        },
    });
};
function handleDataGAEntidadesBolseiras() {
    var table = $("#EntidadesBolseirasTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetScholarshipEntities", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a title="Visualizar" href="/gamanagement/viewscholarshipentity/' + full.Id + '" class="mr-1"><i class="fa fa-search"/></i></a>' +
                        '<a style="display:' + full.AccessControlEdit + '" title="Visualizar" href="/gamanagement/editscholarshipentity/' + full.Id + '" class="mr-1"><i class="fa fa-pencil"/></i></a>' +
                        '<a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaentidadesbolseiras" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "COBERTURAS", "name": "COBERTURAS", "autoWidth": true },
            { "data": "ACTIVO", "name": "ACTIVO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            if (data.ACTIVO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");

            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoEntidadesBolseirasTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#EntidadesBolseirasTable_paginate').appendTo('#paginateEntidadesBolseirasTable');
        },
    });
};
function handleDataGAEntidadesBolseirasValores() {
    var table = $("#comparticipacaoTable").DataTable({
        "processing": true, // Para exibiGetFloorr mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetScholarshipEntityValues", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                EntityId: $("#EntityId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud mr-1" data-id="' + full.Id + '" data-action="Editar" data-entity="gaentidadesbolseirasvalores" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a>' +
                        '<a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaentidadesbolseirasvalores" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },

            //Cada dado representa uma coluna da tabela
            { "data": "ANOLECTIVO", "name": "ANOLECTIVO", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfocomparticipacaoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#comparticipacaoTable_paginate').appendTo('#paginatecomparticipacaoTable');
        },
    });
};
function handleDataGAStudents() {
    var table = $("#GAStudentsTable").DataTable({
        "processing": true, // Para exibiGetFloorr mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetGAStudents", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                EntityId: $("#EntityId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '<div class="btn-group btn-group-datatable"> <a title="Visualizar" href="/gamanagement/viewstudent/' + full.Id + '" class="btn btn-primary btn-sm btn-rounded"><i class="fa fa-search"/></i></a>' +
                        '<a style="display:' + full.AccessControlPES + '" title="Dados pessoais" class="btn btn-primary btn-sm btn-rounded" href="/gpmanagement/viewusers/' + full.PesId + '"><i class="fa fa-user-edit" /></i></a>' +
                        '<a style="display:' + full.AccessControlCC + '" title="Conta Corrente" target="_blank" class="btn btn-info btn-sm btn-rounded" href="/gpagmanagement/checkingaccounts/' + full.UserId + '"><i class="fa fa-circle-dollar-to-slot" /></i></a>';
                }
            },
            {
                sortable: true,
                "render": function (data, type, full, meta) {
                    return `
                                <div class="media flex-nowrap align-items-center"
                                         style="white-space: nowrap;">
                                        <div class="avatar avatar-sm mr-8pt">
                                            <img src="${full.FOTOGRAFIA}"
                                                 alt="${full.NOME}"
                                                 class="avatar-img rounded-circle">
                                        </div>
                                        <div class="media-body">
                                            <div class="d-flex align-items-center">
                                                <div class="flex d-flex flex-column">
                                                    <p class="mb-0"><strong class="js-lists-values-name">${full.NOME}</strong></p>
                                                    <small class="js-lists-values-email text-50">${full.UTILIZADOR}</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                            `
                }
            },
            { "data": "INSCRICOES", "name": "INSCRICOES", "autoWidth": true },
            { "data": "DATAMATRICULA", "name": "DATAMATRICULA", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGAStudentsTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GAStudentsTable_paginate').appendTo('#paginateGAStudentsTable');
        },
    });
};
function handleDataProcessoDocs() {
    var table = $("#DocsProcessosTable").DataTable({
        "processing": true, // Para exibiGetFloorr mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetProcessosDocs", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                ProcessoId: $("#ProcessoId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "DOCUMENTO", "name": "DOCUMENTO", "autoWidth": true },
            { "data": "OBRIGATORIO", "name": "OBRIGATORIO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoDocsProcessosTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#DocsProcessosTable_paginate').appendTo('#paginateDocsProcessosTable');
        },
    });
};
function handleDataUtilizationBySpace() {
    var table = $("#ViewUtilizationBySpaceTable").DataTable({
        "processing": true, // Para exibiGetFloorr mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetViewUtilizationBySpace", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                RelId: $("#RelId").val(), EspacoId: $("#EspacoId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "CARACTERISTICA", "name": "CARACTERISTICA", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "OBRIGATORIO", "name": "OBRIGATORIO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
          
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoViewUtilizationBySpaceTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ViewUtilizationBySpaceTable_paginate').appendTo('#paginateViewUtilizationBySpaceTable');
        },
    });
};
function handleDataViewSpaceUtilization() {
    var table = $("#ViewSpaceUtilizationTable").DataTable({
        "processing": true, // Para exibiGetFloorr mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetViewSpaceUtilization", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                INST_ESPACOS_UTILIZACAO_ID: $("#INST_ESPACOS_UTILIZACAO_ID").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    //anchor
                    return '';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "CARACTERISTICA", "name": "CARACTERISTICA", "autoWidth": true },
            { "data": "OBRIGATORIO", "name": "OBRIGATORIO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }

        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                var rowId = data["Id"];
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoViewSpaceUtilizationTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#ViewSpaceUtilizationTable_paginate').appendTo('#paginateViewSpaceUtilizationTable');
        },
    });
};
function handleDataTipoPedidos() {
    var table = $("#TipoPedidoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetRequestType", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewrequesttype/' + full.Id + '"><i class="fa fa-search"/></i></a>'+ 
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="/gamanagement/editrequesttype/' + full.Id + '"> <i class="fa fa-pencil"/></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="garequesttype" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "GRAU", "name": "GRAU", "autoWidth": true },
            { "data": "TIPOPAGAMENTO", "name": "TIPOPAGAMENTO", "autoWidth": true },
            { "data": "CONDICAO", "name": "CONDICAO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.ESTADO == "Inactivo") $(row).closest("tr").addClass("piaget-danger");
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoTipoPedidoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#TipoPedidoTable_paginate').appendTo('#paginateTipoPedidoTable');
        },
    });
};
function handleDataEfeitoPedidos() {
    var table = $("#EfeitoPedidoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetEfeitoPedidos", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewefeitopedido/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gaefeitospedidos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaefeitospedidos" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoEfeitoPedidoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#EfeitoPedidoTable_paginate').appendTo('#paginateEfeitoPedidoTable');
        },
    });
};
function handleDataGATipoInscricao() {
    var table = $("#GATipoInscricaoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetGATipoInscricao", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewtipoinscricao/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gatipoinscricao" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gatipoinscricao" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "SIGLA", "name": "SIGLA", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGATipoInscricaoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GATipoInscricaoTable_paginate').appendTo('#paginateGATipoInscricaoTable');
        },
    });
};
function handleDataGAPedidosCertidoes() {
    var table = $("#PedidosCertidoesTables").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetGAPedidos", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { StudentId: $("#StudentId").val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<div class="btn-group btn-group-datatable"> <a title="Visualizar" href="/gamanagement/viewrequest/' + full.Id + '" class="btn btn-primary btn-sm btn-rounded"><i class="fa fa-search"/></i></a>' +
                        '<a style="display:' + full.AccessControlAdd + '" title="Adicionar pedido de declaração" class="open-modal-crud btn btn-success btn-sm btn-rounded" data-id="' + full.ALUNO_ID+'" data-action="Adicionar" data-entity="garequests" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-plus-circle"></i></a>'+
                        '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:" data-id="' + full.Id + '"  data-action="Editar" data-entity="garequests" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud btn btn-accent-pickled-bluewood btn-sm btn-rounded"><i class="fa fa-pencil" /></i></a>' +
                        '<a style="display:' + full.AccessControlCancel1 + '" title="Anular" class="open-modal-crud btn btn-sm btn-rounded btn-danger" data-id="' + full.Id + '" data-action="Anular" data-entity="garequests" data-toggle="modal" data-target="#crudControlModal" ><i class="fa fa-power-off" /></i></a>' +
                        '<a style="display:' + full.AccessControlCancel2 + '" title="Anular" class="open-modal-crud btn btn-sm btn-rounded btn-danger" data-id="' + full.Id + '" data-action="Anular" data-entity="garequests" data-toggle="modal" data-target="#crudControlModal" ><i class="fa fa-power-off" /></i></a>' +
                        //'<a style="display:' + full.DisabledDownload + '" title="Certidão (PDF)" href="/pdfreports/garequests/' + full.Id + '" class="btn btn-warning btn-sm btn-rounded"><i class="fa fa-download" /></i></a>' +
                        '<a style="display:' + full.DisabledDownload + '" title="Certidão (PDF)" class="open-modal-crud btn btn-sm btn-rounded btn-warning" data-id="' + full.Id + '" data-action="Emitir" data-entity="garequests" data-toggle="modal" data-target="#crudControlModal" ><i class="fa fa-download" /></i></a>' +
                        '<a style="display:' + full.AccessControlGA + '" title="Perfil do estudante" class="btn btn-primary btn-sm btn-rounded" href="/gamanagement/viewstudent/' + full.ALUNO_ID + '"><i class="fa fa-user-graduate" /></i></a>' +
                        '<a style="display:' + full.AccessControlPES + '" title="Dados Pessoais" class="btn btn-primary btn-sm btn-rounded" target="_blank" href="/gpmanagement/viewusers/' + full.PES_PESSOAS_ID + '"><i class="fa fa-user-edit" /></i></a>' +
                        '<a style="display:' + full.AccessControlCC + '" title="Conta Corrente" class="btn btn-info btn-sm btn-rounded" target="_blank" href="/gpagmanagement/checkingaccounts/' + full.USER_ID + '"><i class="fa fa-circle-dollar-to-slot" /></i></a>' +
                        '<a style="display:' + full.AccessControlDelete + '" title="Remover" class="open-modal-crud btn btn-sm btn-rounded btn-danger" data-id="' + full.Id + '" data-action="Remover" data-entity="garequests" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash" /></i></a> </div>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "PEDIDO", "name": "PEDIDO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "DATA", "name": "DATA", "autoWidth": true },
            { "data": "DATAEMISSAO", "name": "DATAEMISSAO", "autoWidth": true },
            { "data": "EFEITO", "name": "EFEITO", "autoWidth": true },
            { "data": "ESTADO", "name": "ESTADO", "autoWidth": true },
            { "data": "CONCLUIDO", "name": "CONCLUIDO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            if (data.CONCLUIDO == "Sim") $(row).closest("tr").addClass("piaget-success");
            if (data.ESTADO == "Anulado") $(row).closest("tr").addClass("piaget-danger");
            $(row).closest("tr").find("td:eq(5)").css("background", data.TAG);
            var rowId = data["Id"];
            //console.log(rowId)
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoPedidosCertidoesTables');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#PedidosCertidoesTables_paginate').appendTo('#paginatePedidosCertidoesTables');
        },
    });
};
function handleDataGAAlunosEstatuto() {
    var table = $("#GAAlunosEstatutoTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/GetGAAlunoEstatuto", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { StudentId: $("#StudentId").val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/viewstudentstatutes/' + full.Id + '" target="_blank"><i class="fa fa-search" /></i></a>' +
                        ' <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:" data-id="' + full.Id + '"  data-action="Editar" data-entity="gaestatutos" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:" data-id="' + full.Id + '"  data-action="Remover" data-entity="gaestatutos" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "CURSO", "name": "CURSO", "autoWidth": true },
            { "data": "ALECTIVO", "name": "ALECTIVO", "autoWidth": true },
            { "data": "ACURRICULAR", "name": "ACURRICULAR", "autoWidth": true },
            { "data": "ESTATUTO", "name": "ESTATUTO", "autoWidth": true },
            { "data": "VALOR", "name": "VALOR", "autoWidth": true },
            { "data": "PRESTACOES", "name": "PRESTACOES", "autoWidth": true },
            { "data": "DATAINI", "name": "DATAINI", "autoWidth": true },
            { "data": "DATAFIM", "name": "DATAFIM", "autoWidth": true },
            { "data": "ENTIDADE", "name": "ENTIDADE", "autoWidth": true },
            { "data": "CONFIRMADA", "name": "CONFIRMADA", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            if (data.CONFIRMADA == "Sim") $(row).closest("tr").addClass("piaget-success");
            if (data.DATAREMOCAO !=null) $(row).closest("tr").addClass("piaget-danger");

            //$(row).closest("tr").find("td:eq(5)").css("background", data.TAG);
            var rowId = data["Id"];
            //console.log(rowId)
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoGAAlunosEstatutoTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#GAAlunosEstatutoTable_paginate').appendTo('#paginateGAAlunosEstatutoTable');
        },
    });
};
function handleDataGARequestedEquivalencies() {
    var table = $("#EquivalenciesTables").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/gamanagement/getgarequestedequivalencies", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {
                PessoaId: $("#pessoaId").val()
            }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/gamanagement/continuerequestequivalence/' + full.Id + '" class="btn btn-default btn-sm"><i class="fa fa-search"/></i></a>'
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "REQUERENTE", "name": "REQUERENTE", "autoWidth": true },
            { "data": "DATA", "name": "DATA", "autoWidth": true },
            { "data": "FASE", "name": "FASE", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true }
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];

            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoEquivalenciesTables');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#EquivalenciesTables_paginate').appendTo('#paginateEquivalenciesTables');
        },
    });
};
function handleDataSMSAllmessages() {
    var table = $("#SMSAllmessages").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        "pageLength": 100,
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/administration/GetSMSAllmessages", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="'+full.Url+'" target="_blank"><i class="fa fa-search"></i><a/>'}
            },
            //Cada dado representa uma coluna da tabela
            { "data": "Id", "name": "Id", "autoWidth": true },
            { "data": "MENSAGEM", "name": "MENSAGEM", "autoWidth": true },
            { "data": "TAMANHO", "name": "TAMANHO", "autoWidth": true },
            { "data": "SMS", "name": "SMS", "autoWidth": true },
            { "data": "AGENDAMENTO", "name": "AGENDAMENTO", "autoWidth": true },
            { "data": "DATAENVIO", "name": "DATAENVIO", "autoWidth": true },
            { "data": "DESTINATARIO", "name": "DESTINATARIO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
          //  if (data.CANDIDATOS == "0") $(row).closest("tr").addClass("piaget-danger");
           // if (data.PUBLICADA == "Sim") $(row).closest("tr").addClass("piaget-success");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoSMSAllmessages');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#SMSAllmessages_paginate').appendTo('#paginateSMSAllmessages');
        },
    });
};
function handleDataRHTimeTrack() {
    var table = $("#RHTimeTrackTbl").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        "pageLength": 5000,
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/hrmanagement/GetTimeTrackRecords", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="" title="Editar" href="javascript:"  data-id="' + full.NUMERO + '" data-date="' + full.DATA + '" data-dw="' + full.SEMANA + '" data-ppr="' + full.PPR + '" data-pef="' + full.PEF + '" data-idemployee="' + full.IDEMPLOYEE + '" class="processHRTimetrack"><i class="fa fa-search" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DEPARTAMENTO", "name": "DEPARTAMENTO", "autoWidth": true },
            { "data": "DATA", "name": "DATA", "autoWidth": true },
            { "data": "SEMANA", "name": "SEMANA", "autoWidth": true },
            { "data": "PPR", "name": "PPR", "autoWidth": true },
            { "data": "PEF", "name": "PEF", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            if (data.PPR != data.PEF) { 
                if (data.ABSENCES == "0") {
                    if(data.PPR!="0" && data.PEF=="0")
                        $(row).closest("tr").find("td:eq(2)").addClass("piaget-danger");
                    else
                        $(row).closest("tr").addClass("piaget-danger");
                }
                else {
                    if (data.ABSENCES == "1") $(row).closest("tr").find("td:eq(2)").addClass("bg-warning");
                    if (data.ABSENCES == "2") $(row).closest("tr").find("td:eq(2)").addClass("bg-danger");
                }
        }
            
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRHTimeTrackTbl');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RHTimeTrackTbl_paginate').appendTo('#paginateRHTimeTrackTbl');
        },
    });
};
function handleDataRHHolidays() {
    var table = $("#RHHolidaysTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //"pageLength": 100,
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/hrmanagement/GetHolidays", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:" data-id="' + full.Id + '"  data-action="EditarHol" data-entity="hrtimetrack" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:" data-id="' + full.Id + '"  data-action="RemoverHol" data-entity="hrtimetrack" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DIA", "name": "DIA", "autoWidth": true },
            { "data": "MES", "name": "MES", "autoWidth": true },
            { "data": "ANO", "name": "ANO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DESCRICAO", "name": "DESCRICAO", "autoWidth": true },
            { "data": "TIPO", "name": "TIPO", "autoWidth": true },
            { "data": "FIXO", "name": "FIXO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
           if (data.ESTADO == "0") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRHHolidaysTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RHHolidaysTable_paginate').appendTo('#paginateRHHolidaysTable');
        },
    });
};
function handleDataRHLeaves() {
    var table = $("#RHLeavesTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //"pageLength": 100,
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "/hrmanagement/GetLeaves", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: {}
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },

            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:" data-id="' + full.Id + '"  data-action="EditarLeave" data-entity="hrtimetrack" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud"><i class="fa fa-pencil" /></i></a>' +
                        ' <a style="display:' + full.AccessControlDelete + '" title="Remover" href="javascript:" data-id="' + full.Id + '"  data-action="RemoverLeave" data-entity="hrtimetrack" data-toggle="modal" data-target="#crudControlModal" class="open-modal-crud"><i class="fa fa-trash" /></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "NOME", "name": "NOME", "autoWidth": true },
            { "data": "DATAINI", "name": "DATAINI", "autoWidth": true },
            { "data": "DATAEND", "name": "DATAEND", "autoWidth": true },
            { "data": "OBSERVACAO", "name": "OBSERVACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //if (data.ESTADO == "0") $(row).closest("tr").addClass("piaget-danger");
            //console.log(rowId)
            //Draw table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoRHLeavesTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#RHLeavesTable_paginate').appendTo('#paginateRHLeavesTable');
        },
    });
};


function handleDataScheduleDaysWeek() {
    var table = $("#scheduledaysweektable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetScheduleDaysWeek", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
            // data: { "GroupId": $('#GroupId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewscheduledaysweek/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gascheduledaysweek" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gascheduledaysweek" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DESIGNACAO", "name": "DESIGNACAO", "autoWidth": true },
            { "data": "NUMERO", "name": "NUMERO", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoscheduledaysweektable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#scheduledaysweektable_paginate').appendTo('#paginatescheduledaysweektable');
        },
    });
};
function handleDataScheduleWeeks() {
    var table = $("#scheduleweekstable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetScheduleWeeks", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
            // data: { "GroupId": $('#GroupId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewscheduleweeks/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gamanagementscheduleweeks" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gamanagementscheduleweeks" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DESIGNACAO", "name": "DESIGNACAO", "autoWidth": true },
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "SEMESTRE", "name": "SEMESTRE", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfosscheduleweekstable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#scheduleweekstable_paginate').appendTo('#paginatesscheduleweekstable');
        },
    });
};
function handleDataScheduleWeeks() {
    var table = $("#scheduleweekstable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetScheduleWeeks", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
            // data: { "GroupId": $('#GroupId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewscheduleweeks/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gascheduleweeks" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gascheduleweeks" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DESIGNACAO", "name": "DESIGNACAO", "autoWidth": true },
            { "data": "ORDEM", "name": "ORDEM", "autoWidth": true },
            { "data": "SEMESTRE", "name": "SEMESTRE", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfosscheduleweekstable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#scheduleweekstable_paginate').appendTo('#paginatesscheduleweekstable');
        },
    });
};

function handleDataScheduleModules() {
    var table = $("#schedulemoduletable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../administration/GetScheduleModules", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json"
            // data: { "GroupId": $('#GroupId').val(), "ProfileId": $('#ProfileId').val() }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a title="Visualizar" href="/administration/viewschedulemodules/' + full.Id + '"><i class="fa fa-search"/></i></a> <a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Editar" data-entity="gaschedulemodules" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="Remover" data-entity="gaschedulemodules" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "DESIGNACAO", "name": "DESIGNACAO", "autoWidth": true },
            { "data": "HORAINICIO", "name": "HORAINICIO", "autoWidth": true },
            { "data": "HORAFIM", "name": "HORAFIM", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfosschedulemoduletable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#schedulemoduletable_paginate').appendTo('#paginatesschedulemoduletable');
        },
    });
};
function handleDataFacultyServices(Id, AnoLectivo) {

    var table = $("#DistribuicaoServicoDocenteTable").DataTable({
        "processing": true, // Para exibir mensagem de processamento a cada requisição
        "serverSide": true, // Para processar as requisições no back-end
        //"filter": false, // : está comentado porque estamos a usar filtros que enviamos no back-end
        "orderMulti": false, // Opção de ordenação para uma coluna de cada vez.
        //Linguagem PT
        "language": {
            "url": "/Assets/lib/datatable/pt-PT.json"
        },
        fixedHeader: {
            header: true,
            footer: true
        },
        "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
        "ajax": {
            "url": "../../gamanagement/GetFacultyServices", // POST TO CONTROLLER
            "type": "POST",
            "datatype": "json",
            data: { "Id": Id, "AnoLectivo": AnoLectivo }
        },
        "columns": [
            { "data": "Id", "name": null, "autoWidth": true },
            //Column customizada
            {
                sortable: false,
                "render": function (data, type, full, meta) {
                    return '<a style="display:' + full.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '" data-action="EditarDisc" data-entity="gamanagementfacultyservices" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"/></i></a> <a style="display:' + full.AccessControlDelete + '"title="Remover" href="javascript:void(0)" class="open-modal-crud" data-id="' + full.Id + '-0" data-action="Remover" data-entity="gamanagementfacultyservices" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"/></i></a>';
                }
            },
            //Cada dado representa uma coluna da tabela
            { "data": "TIPOAULA", "name": "TIPOAULA", "autoWidth": true },
            { "data": "DOCENTE", "name": "DOCENTE", "autoWidth": true },
            { "data": "TURMA", "name": "TURMA", "autoWidth": true },
            { "data": "TURNO", "name": "TURNO", "autoWidth": true },
            { "data": "SEMESTRE", "name": "SEMESTRE", "autoWidth": true },
            { "data": "MODULO", "name": "MODULO", "autoWidth": true },
            { "data": "HORA", "name": "HORA", "autoWidth": true },
            { "data": "INSERCAO", "name": "INSERCAO", "autoWidth": true },
            { "data": "DATAINSERCAO", "name": "DATAINSERCAO", "autoWidth": true },
            { "data": "ACTUALIZACAO", "name": "ACTUALIZACAO", "autoWidth": true },
            { "data": "DATAACTUALIZACAO", "name": "DATAACTUALIZACAO", "autoWidth": true },
        ],
        //Configuração da tabela para os checkboxes
        'columnDefs': [
            {
                'targets': 0,
                'checkboxes': {
                    'selectRow': true
                },
            }
        ], 'select': {
            'style': 'multi'
        },
        'order': [[1, 'false']],
        'rowCallback': function (row, data, dataIndex) {
            // Get row ID
            var rowId = data["Id"];
            //console.log(rowId)
            //Dra table and add selected option to previously selected checkboxes
            $.each(values, function (i, r) {
                if (rowId == r) {
                    $(row).find('input[type="checkbox"]').prop('checked', true);
                    $(row).closest("tr").addClass("selected");
                }
            })
        },
        drawCallback: function () {
            processInfo(this.api().page.info(), 'paginateInfoDistribuicaoServicoDocenteTable');
        },
        //Remove pagination from table and add to custom Div
        initComplete: (settings, json) => {
            $('#DistribuicaoServicoDocenteTable_paginate').appendTo('#paginateDistribuicaoServicoDocenteTable');
        },
    });
};
/* ############################################
   DUPLICAR AQUI -- FIM-- !!!!!!
 ##############################################
 */








/*
 * 
 #####################################################
  FUNCTIONS SUPPORTING DATATABLE APIS -- NAO DUPLICAR
 #####################################################
 */
//Remove length from table and add to custom Div
$('.length_change').change(function () {
    var table = $(this).data('id');
    //tableGrupos.page.len($(this).val()).draw(); 
    $("#"+table).DataTable().page.len($(this).val()).draw();
});
//Remove pagination information from datatable and add to custom dom element
function processInfo(info,tablename) {
    //console.log(info);
    $('.' + tablename).html('A ver ' + (info.start + 1) + ' - ' + (info.end) + ' de ' + (info.recordsTotal))
}
//Show/Hide MultiSelect checkboxes
$(document).on('click', '.btnSelect', function () {
    var tablename = $(this).data('id');
    $(this).css("background", "#e9ecef");
    $('#' + tablename).removeClass('hideInputCheck');
});
//Search Event trigger and redraw table
$('.btnSearch').click(function () {
    var tablename = $(this).data('id');
    SearchDataTable(tablename);
});
function SearchDataTable(tablename) {
    var table = $("#" + tablename).DataTable();
    var th = 0;
    $('#' + tablename + ' thead tr th').each(function () {
        if ($(this).text() != '') {
            table.columns(th).search($('#' + $(this).data('name')).val()); //val().trim());
            th++;
        }
    });
    //Refresh
    table.draw();
}
$('table').on('click', 'thead input[type="checkbox"]', function (e) {
    var tablename = $(this).closest('table').attr('id');
    if (this.checked) {
        $('#' + tablename+' tbody input[type="checkbox"]:not(:checked)').trigger('click');
    } else {
        $('#' + tablename+' tbody input[type="checkbox"]:checked').trigger('click');
    }
    //Enable/Disabled button for multiple options
    var button = $('#' + tablename).parent().parent().parent().find('.RemoverMultiplos');
    var buttonAddMultiple = $('#' + tablename).parent().parent().parent().find('.AdicionarMultiplos');
    var buttonDownloadMultiple = $('#' + tablename).parent().parent().parent().find('.DescarregarMultiplos');
    if (values.length == 0) { $(button).prop('disabled', true); $(buttonAddMultiple).prop('disabled', true); $(buttonDownloadMultiple).prop('disabled', true); } else { $(button).prop('disabled', false); $(buttonAddMultiple).prop('disabled', false); $(buttonDownloadMultiple).prop('disabled', false); }
    // Prevent click event from propagating to parent
    e.stopPropagation();
});
//Process input checkbox selection
var linksToDownload = [];
$(document).on("change", "table.dataTable input[type='checkbox']", function () {
    var tablename = $(this).closest('table.dataTable').attr('id');
    var table = $('#' + tablename).DataTable();
    var rows = table.column(0).checkboxes.selected();
    var link = table.row($(this).closest('td')).data()["Link"];
    values = [];
    $.each(rows, function (index, rowId) {
        values[index] = rowId;
    })
    if ($(this).is(":checked")) {
        $(this).closest("tr").removeClass("piaget-success")
        $(this).closest("tr").removeClass("piaget-danger")
        $(this).closest("tr").addClass("selected")
    } else {
        $(this).closest("tr").removeClass("selected")
    }
    if ($(this).is(":checked")) {
        $(this).closest("tr").addClass("selected");
        linksToDownload.push(link);
    } else {
        $(this).closest("tr").removeClass("selected");
        const index = linksToDownload.indexOf(link);
        if (index > -1) { // only splice array when item is found
            linksToDownload.splice(index, 1); // 2nd parameter means remove one item only
        }
    }
    //Enable/Disabled button for multiple options
    var button = $('#' + tablename).parent().parent().parent().find('.RemoverMultiplos');
    var buttonAddMultiple = $('#' + tablename).parent().parent().parent().find('.AdicionarMultiplos');
    var buttonDownloadMultiple = $('#' + tablename).parent().parent().parent().find('.DescarregarMultiplos');
    if (values.length == 0) { $(button).prop('disabled', true); $(buttonAddMultiple).prop('disabled', true); $(buttonDownloadMultiple).prop('disabled', true); } else { $(button).prop('disabled', false); $(buttonAddMultiple).prop('disabled', false); $(buttonDownloadMultiple).prop('disabled', false); }
});
//Clean search Fields
$(".btnLimpar").click(function () {
    var tablename = $(this).data('id');
    var table = $("#" + tablename).DataTable();
    var th = 0;

    $('#' + tablename + ' thead tr th').each(function () {
        if ($(this).text() != '') {
            $('#' + $(this).data('name')).val('')
            $(".select-control").val('').trigger('change'); //Select2
            table.columns(th).search($('#' + $(this).data('name')).val()); //val().trim());
            th++;
        }
    });
    //Refresh
    table.draw();
})
//Trigger Search Event on Select Change
$(document).on("change", "table.dataTable  thead tr select", function () {
    SearchDataTable($(this).closest("table").attr('id'));
})
/*
 * 
 #####################################################
  FUNCTIONS SUPPORTING DATATABLE APIS -- NAO DUPLICAR
 #####################################################
 */




/* ############################################
  FANCYTREE CONFIGURATION START
 ##############################################
 */
//nota:: ids podem ser mudados.
var fileslinks = [];
var selKeysToDownload;
function FancyTreeInit(target) {
    var items = [];
    var url = "";
    //var id = "";
    var mappedurl = target == "listbydate" ? mappedurl = "/ajax/getfilesbydate" : mappedurl = "/ajax/getfilesbydoc";

    $(":ui-fancytree").fancytree("destroy");
    $("#tree").fancytree({
        extensions: ["glyph"],
        glyph: {
            preset: "awesome5",
            map: {}
        },
        checkbox: true,
        selectMode: 3,
        source: {
            url: mappedurl,
            "type": "POST",
            "datatype": "json",
            data: { "EntityId": $('#EntityId').val(), "ArquivoId": $('#ArquivoId').val(), "upload": $('#upload').val() },
        },
        activate: function (event, data) {
            $("#echoActive1").text(data.node.title);
        },
        select: function (event, data) {
            // Display list of selected nodes
            if (data.node.isSelected()) {
                items.push(data.node.data.arquivo)
                //id = ""; id = data.node.data.arquivo
                url = ""; url = data.node.data.path;
                fileslinks.push(data.node.data.path);
            } else {
                items = items.filter(e => e !== data.node.data.arquivo)
                fileslinks = fileslinks.filter(e => e !== data.node.data.path)
            }
            //selecionar todos os nodes quando check a pasta
            var selKeysToDelete = $.map(data.tree.getSelectedNodes(), function (node) {
                return node.data.arquivo;
            });
            selKeysToDownload = $.map(data.tree.getSelectedNodes(), function (node) {
                return node.data.path;
            });
            selKeysToSee = $.map(data.tree.getSelectedNodes(), function (node) {
                return node.data.path;
            });
            if (selKeysToSee.length >= 1) {
                $("#btnDeleteFile").prop('disabled', false)
                $("#btnDownloadFile").prop('disabled', false)
                values = selKeysToDelete; $("#btnDeleteFile").attr('data-upload', $("#upload").val());
            } else {
                values = [];
                $("#btnDeleteFile").prop('disabled', true)
                $("#btnDownloadFile").prop('disabled', true)
            }
            if (selKeysToSee.length == 1) {
                id = selKeysToDelete[0];
                console.log(id);
                $("#btnEditFile").prop("disabled", false);
                $("#btnViewFile").attr('href', "/" + selKeysToSee[0]);
                $("#btnEditFile").attr('data-id', selKeysToDelete[0]); $("#btnEditFile").attr('data-upload', $("#upload").val());
                $("#btnEditFile").prop("disabled", false);
                $("#btnViewFile").removeClass("link-disabled");
            } else {
                $("#btnEditFile").attr('data-id', "");
                $("#btnViewFile").removeAttr('href');
                $("#btnEditFile").prop("disabled", true);
                $("#btnViewFile").addClass("link-disabled");
            }
        }
    });
}
//botao para baixar arquivos selecionados via Fancytree
$("#btnDownloadFile").click(function () {
    var html = '';
    $(".fields").remove();
    for (var i = 0; i < selKeysToDownload.length; i++) {
        html += '<input type="text" name="files[]" value="' + selKeysToDownload[i] + '" class="fields">'
    }
    $("#downloaddiv").append(html);
    $("#downloadform").submit();
})
$(".DescarregarMultiplos").click(function () {
    var html = '';
    $(".fields").remove();
    for (var i = 0; i < linksToDownload.length; i++) {
        html += '<input type="text" name="files[]" value="' + linksToDownload[i] + '" class="fields">'
    }
    $("#tabledownloaddiv").append(html);
    $("#tabledownloadform").submit();
});
$("#radiogroups").change(function () {
    if ($("#radiofdate").is(':checked')) {
        FancyTreeInit(item = "listbydate");
    } else if ($("#radiofgroup").is(':checked')) {
        FancyTreeInit(item = "listbygroup");
    }
    disableFancytreeButtons();
})
//botao toggle para mudar a visualizacao entre tabela e lista
$("#changeviewfile").change(function () {
    if ($('#viewlist').is(":checked")) {
        $("#doctablebuttons").prop("hidden", true); $("#doctablebody").prop("hidden", true); $("#tablefooter").prop("hidden", false);
        $("#doclistbuttons").prop("hidden", false); $("#doclistbody").prop("hidden", false); $("#tablefooter").prop("hidden", true);

        $("#radiofdate").prop("checked", true).trigger("click");
        FancyTreeInit(item = "listbydate");
    } else {
        $("#doctablebuttons").prop("hidden", false); $("#doctablebody").prop("hidden", false); $("#tablefooter").prop("hidden", true)
        $("#doclistbuttons").prop("hidden", true); $("#doclistbody").prop("hidden", true); $("#tablefooter").prop("hidden", false)
    }
    disableFancytreeButtons();
});
function disableFancytreeButtons() {
    $("#btnEditFile").prop("disabled", true);
    $("#btnDeleteFile").prop('disabled', true);
    $("#btnDownloadFile").prop('disabled', true);
    $("#btnViewFile").addClass("link-disabled");
}
/* ############################################
  FANCYTREE CONFIGURATION END
 ##############################################
 */






/* ############################################
  SELECT2 CONFIGURATION START
 ##############################################
 */
function setupSelect2() {
    $('.select-control').select2({
        width: '100%',
        theme: "bootstrap4"
    });
    $('#msform select:not(#canddef select )').select2({
        width: '100%',
        theme: "bootstrap4"
    });
};
$('form').on('reset', function (e) {
    $(".select-control").val('').trigger('change')
});

/* ############################################
  SELECT2 CONFIGURATION END
 ##############################################
 */
/* ############################################
  QUILL EDITOR CONFIGURATION START
 ##############################################
 */
function quillEditor() {
    (function () {
        quilljs_textarea();
    })();
    $('textarea').attr("placeholder", ""); 
    quilljs_textarea('textarea:not(.no-quill)', {
        modules: {
            toolbar: [
                ['bold', 'italic', 'underline'],        // toggled buttons
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                [{ 'header': [1, 2, false] }],
                [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
                [{ 'align': [] }],
                ['link'],
            ]
        },
        theme: 'snow',
    });
}
function quilljs_textarea(selector = null, options = null) {
    if (selector) {
        var elements = Array.prototype.slice.call(document.querySelectorAll(selector));
    } else {
        var elements = Array.prototype.slice.call(document.querySelectorAll('[data-quilljs]'));
    }
    elements.forEach(function (el) {
        if ($(el).hasClass("quillEditor-no-duplicate") && $(el).next(".ql-toolbar").hasClass("ql-toolbar"))
            return;
        
        if (selector && el.hasAttribute("data-quilljs")) 
            return;

        var type = el.type;
        if (type == 'textarea') {
            value = el.value;
            container = document.createElement('div');
            container.innerHTML = value;
            el.parentNode.insertBefore(container, el.nextSibling);
            el.style.display = "none";
            var placeholder = el.placeholder;
        } else {
            var placeholder = null;
            container = el;
        }
        if (!options) {
            var defaults = {
                theme: 'snow',
                placeholder: placeholder,
            };
        } else {
            if (!options.placeholder) {
                options.placeholder = placeholder;
            }
            var defaults = options;
        }

        var editor = new Quill(container, defaults);
        editor.on('text-change', function () {
            var text = editor.root.innerHTML;
            el.value = text;
            if (text.replace(/(<([^>]+)>)/ig, "") == '')
                el.value = '';
        });
        editor.on('editor-change', function () {
            var text = editor.root.innerHTML;
            if (text.replace(/(<([^>]+)>)/ig, "") == '')
                el.value = '';
        });
    });
}
/* ############################################
  QUILL EDITOR CONFIGURATION END
 ##############################################
 */



/* ############################################
  PRELOADER JS
 ##############################################
 */

(function () {
    "use strict";
    window.addEventListener("load", (function () { $(".preloader").fadeOut(), domFactory.handler.upgradeAll() }))
})();
/* ############################################
  PRELOADER JS
 ##############################################
 */

/* ############################################
  TOASTR JS
 ##############################################
 */
!function (t) { var a = {}; function o(e) { if (a[e]) return a[e].exports; var r = a[e] = { i: e, l: !1, exports: {} }; return t[e].call(r.exports, r, r.exports, o), r.l = !0, r.exports } o.m = t, o.c = a, o.d = function (t, a, e) { o.o(t, a) || Object.defineProperty(t, a, { enumerable: !0, get: e }) }, o.r = function (t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, o.t = function (t, a) { if (1 & a && (t = o(t)), 8 & a) return t; if (4 & a && "object" == typeof t && t && t.__esModule) return t; var e = Object.create(null); if (o.r(e), Object.defineProperty(e, "default", { enumerable: !0, value: t }), 2 & a && "string" != typeof t) for (var r in t) o.d(e, r, function (a) { return t[a] }.bind(null, r)); return e }, o.n = function (t) { var a = t && t.__esModule ? function () { return t.default } : function () { return t }; return o.d(a, "a", a), a }, o.o = function (t, a) { return Object.prototype.hasOwnProperty.call(t, a) }, o.p = "/", o(o.s = 527) }({ 527: function (t, a, o) { t.exports = o(528) }, 528: function (t, a, o) { "use strict"; o.r(a); o(529) }, 529: function (t, a) { !function () { "use strict"; toastr.primary = function (t, a, o) { return this.success(t, a, $.extend({ iconClass: "toast-primary" }, o)) }, $('[data-toggle="toastr"]').on("click", (function (t) { t.preventDefault(); var a = $(this), o = a.data("toastr-type") || "success", e = a.data("toastr-message"), r = a.data("toastr-title"), s = { closeButton: void 0 !== a.data("toastr-close-button") && a.data("toastr-close-button"), debug: !1, newestOnTop: void 0 === a.data("toastr-newest-on-top") || a.data("toastr-newest-on-top"), progressBar: void 0 === a.data("toastr-progress-bar") || a.data("toastr-progress-bar"), positionClass: void 0 !== a.data("toastr-position-class") ? a.data("toastr-position-class") : "toast-top-right", preventDuplicates: void 0 !== a.data("toastr-prevent-duplicates") && a.data("toastr-prevent-duplicates"), onclick: null, showDuration: void 0 !== a.data("toastr-show-duration") ? a.data("toastr-show-duration") : 300, hideDuration: void 0 !== a.data("toastr-hide-duration") ? a.data("toastr-hide-duration") : 1e3, timeOut: void 0 !== a.data("toastr-time-out") ? a.data("toastr-time-out") : 5e3, extendedTimeOut: void 0 !== a.data("toastr-extended-time-out") ? a.data("toastr-extended-time-out") : 1e3, showEasing: void 0 !== a.data("toastr-show-easing") ? a.data("toastr-show-easing") : "swing", hideEasing: void 0 !== a.data("toastr-hide-easing") ? a.data("toastr-hide-easing") : "linear", showMethod: void 0 !== a.data("toastr-show-method") ? a.data("toastr-show-method") : "fadeIn", hideMethod: void 0 !== a.data("toastr-hide-method") ? a.data("toastr-hide-method") : "fadeOut" }; toastr[o](e, r, s) })) }() } });
/* ############################################
  TOASTER JS
 ##############################################
 */


/* ############################################
  AJAX LOAD BUILDING BY CAMPUS AND FLOORS BY BUILDING
 ##############################################
 */
$(document).on("change", "#CampusDropdown", function () {
    // Set Id and Get Select from ajax
    var Id = $(this).val();
    if (Id == "") Id = 0;
    // Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/administration/GetBuildingsByCampus",
        data: { "id": Id },
        cache: false,
        beforeSend: function () {
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $("#BuildingDropdown option").remove();
            $("#FloorDropdown option").remove();
            var s = '<option value="">Selecionar um Edificio</option>';
            for (var i = 0; i < data.length; i++) {
                s += '<option value="' + data[i].ID + '">' + data[i].Nome + ' (' + data[i].Sigla + ')</option>';
            }
            $("#BuildingDropdown").html(s);
            loadOut();
        }
    });
});
$(document).on("change", "#BuildingDropdown", function () {
    // Set Id and Get Select from ajax
    var Id = $(this).val();
    if (Id == "") Id = 0;
    // Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/administration/GetFloorsByBuilding",
        data: { "id": Id },
        cache: false,
        beforeSend: function () {
        },
        complete: function () {
        },
        success: function (data) {
            $("#FloorDropdown option").remove();
            var s = '<option value="">Selecionar um Piso</option>';
            for (var i = 0; i < data.length; i++) {
                s += '<option value="' + data[i].ID + '">' + data[i].Nome + ' (' + data[i].Numero + ')</option>';
            }
            $("#FloorDropdown").html(s);
        }
    });
});

$(document).on("change", "#UtilizationDropdown", function () {
    // Set Id and Get Select from ajax
    var Id = $(this).val();
    if (Id == "") Id = 0;
    // Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/administration/GetCharacteristicsByUtilization",
        data: { "id": Id },
        cache: false,
        contentType: "application/json",
        beforeSend: function () {
        },
        complete: function () {
        },
        success: function (data) {
            $("#group").empty();
            var item = '';
            var required = '';
            item += ''
            if (data.length > 0) { $("#propTitle").prop("hidden", false) } else { $("#propTitle").prop("hidden", true) }
            for (var i = 0; i < data.length; i++) {
                required = '';
                //Avaliar quando for para editar, ter um else para saber se ja tem dados se tiver, preencher
                item += '<div class="form-group row">'
                if (data[i].REQUIRED == true) required = 'required';
                item += '<label class="col-sm-2 col-form-label text-right ' + required+'">' + data[i].CARACT_NOME + ' </label>'
                    item += '<div class="col-sm-4">'
                    item += '<input type="hidden" value=' + data[i].ESP_UTI_ID + ' name="ESP_UTILI_ID[]"> <input type="hidden" value=' + data[i].ID + ' name="CARACT_UTILI_ID[]">'
                    if (data[i].TIPO_VALOR == "int") {
                        item += ' <input type="number" name="CARACT_ESP_VALUE[]" class="form-control" ' + required +'>'
                    } else if (data[i].TIPO_VALOR == "txt") {
                        item += ' <input type="text" name="CARACT_ESP_VALUE[]" class="form-control" ' + required +'>'
                    } else if (data[i].TIPO_VALOR == "dte") {
                        item += '<input type="text" name="CARACT_ESP_VALUE[]" class="datepickerDisablePastDate form-control" ' + required +' id="">'
                    }
                    item += '</div>'
                    item += '</div>'
              
            };
            $("#group").append(item);
            SetUpDatepicker();
        }
    });
});

/*******
 #####################################################
    PROCESSOS DE CANDIDATURAS
 #####################################################
 ******/
// Set Onchange events for Country Select
$(document).on("change", "#GrauAcad", function () {
    if (this.value != '') $('#add_new_frm_field_btn').prop('disabled', false);
    else $('#add_new_frm_field_btn').prop('disabled', true);
    $('#add_new_frm_field_btn').data('id', this.value);
    //$(this).prop('disabled', true);
    $(this).hide();
    $('.col-GrauAcad').text($("#GrauAcad option:selected").text()).show();
    $('#btn_alter_qualifications').show();
    $('#add_new_frm_field_btn').click();
})
$(document).on("click", "#btn_alter_qualifications", function () {
    $('#add_new_frm_field_btn').prop('disabled', true);
    $('#add_new_frm_field_btn').data('id', 0);
    $(this).hide();
    $("#GrauAcad").val('');
    $('#GrauAcad').show();
    $('.col-GrauAcad').hide();
    $(".form_field_outer_row").remove();
})
$(document).on("change", "#seriacaoSel", function () {
    if (this.value == '0') {
        $('.nota_no').val('');
        $('.nota_no').attr('disabled', true);
        $('.dataexameini').val('');
        $('.dataexameini').attr('disabled', true);
        $('.dataexameend').val('');
        $('.dataexameend').attr('disabled', true);
        $('#DateExameIni').attr('disabled', true);
        $('#DateExameEnd').attr('disabled', true);
        $('#DateExameIni').attr('required', false);
        $('#DateExameEnd').attr('required', false);
        $('.GaPautaEscalaIDSelect').hide();
        $("#GaPautaEscalaID").val("").change();
        $('#GaPautaEscalaID').attr('required', false);
    }
    else {
        $('.nota_no').attr('disabled', false);
        $('.dataexameini').attr('disabled', false);
        $('.dataexameend').attr('disabled', false);
        $('#DateExameIni').attr('disabled', false);
        $('#DateExameEnd').attr('disabled', false);
        $('#DateExameIni').attr('required', true);
        $('#DateExameEnd').attr('required', true);
        $('.GaPautaEscalaIDSelect').show();
        $("#GaPautaEscalaID").val("").change();
        $('#GaPautaEscalaID').attr('required', true);
    }
})
$("#add_new_frm_field_btn").click(function () {
    var index = $(".form_field_outer").find(".form_field_outer_row").length + 1;
    var disabled = '';
    // Seriacao
    if ($("#seriacaoSel option:selected").val() == '0') disabled = 'disabled=';
    // Call Ajax method
    fillInput(index, disabled, '', '');
    // Show rows
    $('.course-rows').show();
    //$(".select-control").select2();
})
function fillInput(index, disabled, nota_no_, vaga_no) {
    $.ajax({
        type: "POST",
        url: "/ajax/GAManagementProcessCourses",
        data: '{"Id" : ' + $('#add_new_frm_field_btn').data("id") + ',"index":' + index + ',"disabled":"' + disabled + '","nota_no_":"' + nota_no_ + '","vaga_no":"' + vaga_no+'" }',
        cache: false,
        contentType: "application/json",
        beforeSend: function(){ loadIn(); },
        complete: function (){ loadOut();},
        success: function (data) {
            let html = '';
            /*html += '<div class="row form_field_outer_row">'
            html += '<input  type="hidden" name="process_child_id[]" value="' + index + '" required="" />'
            html += '<div class="form-group col-md-2 text-right"><label class="col-form-label">Curso</label></div>'
            html += '<div class="form-group col-md-4">'
            html += '<select name="no_curso[]" id="no_curso_' + index + '" class="form-control" required="">'
            html += '<option value="">Selecionar o Curso</option>'
            html += str
            html += '</select>'
            html += '</div>'
            html += '<div class="form-group col-md-2">'
            html += '<input type="number" class="nota_no form-control" name="nota_no[]" id="nota_no_' + index + '" placeholder="" min="0.0" max="20.00" step="0.01"  value="' + nota_no_ + '"  required="" ' + disabled + '/>'
            html += '</div>'
            html += '<div class="form-group col-md-2">'
            html += '<input type="number" class="form-control" name="vaga_no[]" id="vaga_no_' + index + '" placeholder="" min="1" required="" value="' + vaga_no + '"/>'
            html += '</div>'
            html += '<div class="form-group col-md-2 add_del_btn_outer btn-group">'
            html += '<button class="btn btn-light add_node_btn_frm_field btn-sm" type="button" title="Copiar dados">'
            html += '<i class="fas fa-copy"></i>'
            html += '</button>'
            html += '<button type="button" class="btn btn-danger remove_node_btn_frm_field btn-sm" title="Remover">'
            html += '<i class="fas fa-trash-alt"></i>'
            html += '</button>'
            html += '</div>'
            html += '</div>'*/
            html += data;
            $(".form_field_outer").append(html);
            //$(".form_field_outer").find(".remove_node_btn_frm_field:not(:first)").prop("disabled", false);
            //$(".form_field_outer").find(".remove_node_btn_frm_field").first().prop("disabled", true);
            SetUpDatepicker();
            optSelectCheck(0);
            NVagasCheck(0);
        }
    });
}
//ELIMINAR CURSO DE PROCESSO
$(document).ready(function () {
    $("body").on("click", ".remove_node_btn_frm_field", function () {
        $(this).closest(".form_field_outer_row").remove();
    });
});
///COPIAR DADOS
$(document).ready(function () {
    $("body").on("click", ".add_node_btn_frm_field", function (e) {
        var index = $(e.target).closest(".form_field_outer").find(".form_field_outer_row").length + 1;
        var nota_no_ = $(this).closest(".form_field_outer_row").find("input[name='nota_no[]']").val();
        var vaga_no = $(this).closest(".form_field_outer_row").find("input[name='vaga_no[]']").val();
        var disabled = '';
        // Seriacao
        if ($("#seriacaoSel option:selected").val() == '0') disabled = 'disabled=';
        fillInput(index, disabled, nota_no_, vaga_no);
    });
});
$(document).on("change", "#ingressarnfase", function () {
    if ($(this).is(":checked")) {
        var selectid = $(this).val();
        $("#ResultadoID").val(selectid);
        $('#ResultadoID option').each(function () {
            !this.selected ? $(this).attr('disabled', true) : "";
        });
        $('#ingressarnfaseoptions').attr('disabled', false);
        $('#ingressarnfaseoptions').attr('required', true);
        $('#ingressarnfaseoptionsalert').show();
    }
    else {
        $('#ResultadoID option').each(function () {
            $(this).attr('disabled', false);
        });
        $('#ingressarnfaseoptions').attr('disabled', true);
        $('#ingressarnfaseoptions').attr('required', false);
        $('#ingressarnfaseoptions').val('');
        $('#ingressarnfaseoptionsalert').hide();
    }
})
// ONCHANGE CHECKBOX UPDATE INPUT HIDDEN
function optSelectCheck(id) {
    if ($('#optSelectCheck_' + id).is(":checked")) $('#optSelectInput_' + id).val('1'); else $('#optSelectInput_' + id).val('0'); 
}
function NVagasCheck(id) {
    if ($('#NVagasCheck_' + id).is(":checked")) $('#NVagasInput_' + id).val('1'); else $('#NVagasInput_' + id).val('0');
}
// GA CANDIDATURAS
$(document).on('change', '.gET-RAMOS-SELECT', function () {
    // Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetCursoRamosPE",
        data: { "CourseId": $(this).val(), "PEId": $('#PlanoEstudo').val(), "AnoCurricular": $('#AnoCurricular').val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $('#CursoRamoId option').remove();
            var count = 0;
            var s = '<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                count++;
                s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
            }
            $('#CursoRamoId').html(s);
            if (count > 0) { $('.CursoRamoList').show(); $('#CursoRamoId').attr('required', true); }
            else { $('.CursoRamoList').hide(); $('#CursoRamoId').attr('required', false); }
            // Loadout
            loadOut();
        }
    });
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetRegFreqMatricula",
        data: { "CourseId": $(this).val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $('#RegFreqId option').remove();
            var s = '<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
            }
            $('#RegFreqId').html(s);
            $('#TurmaId option').remove();
            $('#TurmaListFixedSigla').html('');
            // Loadout
            loadOut();
        }
    });
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetPlanoPagMatricula",
        data: { "CourseId": $(this).val(), "Anolectivo": $('#AnoLectivo').val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $('#GPAGPagId option').remove();
            var s = '';// '<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
            }
            $('#GPAGPagId').html(s);
            // Loadout
            loadOut();
        }
    });
});
$(document).on('change', '#RegFreqId', function () {
    // Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetTurmaMatricula",
        data: { "CourseId": $('#GA_CURSOS_ID').val(), "Anolectivo": $('#AnoLectivo').val(), "RegFreqId": $(this).val(), "AnoCurricular": $('#AnoCurricular').val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $('#TurmaId option').remove();
            var s = '';//'<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                if (data[i].Disabled)
                    s += '<option disabled="" value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                else
                    s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                $('#TurmaListFixedSigla').html(data[i].TurmaSigla);
            }
            $('#TurmaId').html(s);
            // Loadout
            loadOut();
        }
    });
});
// CANDIDATURAS TURMA SETUP
$(document).on("click", "#showTurmaList", function () {
    $('#TurmaId').show();
    $('#TurmaListFixed').hide();
})
// CANDIDATURAS PESQUISAR PAUTA E SALA
$(document).on("change", "#CandPautaSearchCheck", function () {
    if ($(this).is(":checked")) 
        $('#CandPautaSearchText').val('1');
    else
        $('#CandPautaSearchText').val('');
});
$(document).on("change", "#CandSalaSearchCheck", function () {
    if ($(this).is(":checked"))
        $('#CandSalaSearchText').val('1');
    else
        $('#CandSalaSearchText').val('');
});


// PEDIDOS E CERTIDOES CHECK
$(document).on("change", "#GARequestCertidao", function () {
    if ($(this).is(":checked") && $('#GARequestPedido').is(":checked"))
        $('#PedidosTipo').val('3');
    else if ($(this).is(":checked"))
        $('#PedidosTipo').val('1');
    else {
        if ($('#GARequestPedido').is(":checked"))
            $('#PedidosTipo').val('2');
        else $('#PedidosTipo').val('');
    }
});
$(document).on("change", "#GARequestPedido", function () {
    if ($(this).is(":checked") && $('#GARequestCertidao').is(":checked"))
        $('#PedidosTipo').val('3');
    else if ($(this).is(":checked"))
        $('#PedidosTipo').val('2');
    else {
     if ($('#GARequestCertidao').is(":checked"))
            $('#PedidosTipo').val('1');
     else $('#PedidosTipo').val('');
    }
       
});


/*
 * *******************************************
 * PARAMETRIZAÇÃO DAS SALAS JS
 * *******************************************
*/
var datasIds = [];
var turnosIds = [];
var salasIds = [];
var caractsIds = [];
var candidatosIds = [];

function SelectSpaces() {

    var response = []; 
    var combo = document.getElementById("salas");
    var selected = combo.options[combo.selectedIndex].text;
    var selectedId = combo.options[combo.selectedIndex].value;

    // Validate
    if ($('.processoaddspaceDate').val() == '' || $('.processoaddspaceTime1').val() == '' || $('.processoaddspaceTime2').val() == '' || $('#salas').val() == '') {
        response["result"] = false;
        response["error"] = "Data, Turno e Sala são campos obrigatórios para alocação na parametrização!";
        handleSuccess(response);
        setTimeout(() => {
            $('.handle-error').hide()
        }, "10000")
        return false;
    }
    // Find duplicate
    if (findInTable($('.processoaddspaceDate').val(), 'target') && findInTable($('.processoaddspaceTime1').val() + ' - ' + $('.processoaddspaceTime2').val(), 'target') && findInTable(selected.split('-')[2], 'target')) {
        response["result"] = false;
        response["error"] = "Não pode alocar uma calendarização duplicável consistindo da mesma Data, Turno e Sala!";
        handleSuccess(response);
        setTimeout(() => {
            $('.handle-error').hide()
        }, "10000")
        return false;
    }

    loadIn();
    // Get Characteristic value of selected space, process the DOM
    $.ajax({
            type: "GET",
            url: "/ajax/GetCharactValueFromSpace",
            data: { "caract": $('.processoaddspaceCharacteristics option:selected').val(), "space": $('#salas option:selected').text().split('-')[2] },
            cache: false,
            beforeSend: function () { },
            complete: function () { },
            success: function (data) {
                //
                $('.processoaddspaceH4').hide();
                $('#target').parent().show();
                // Validate characteristic
                var valid = (data != '' && !isNaN(data)) ? 1 : 0;
                // Create new row and append Elements
                var newRow = document.createElement('tr');
                newRow.appendChild(createCell($('.processoaddspaceDate').val()));
                newRow.appendChild(createCell($('.processoaddspaceTime1').val() + ' - ' + $('.processoaddspaceTime2').val()));
                newRow.appendChild(createCell(selected.split('-')[2]));
                newRow.appendChild(createCell(data));
                //newRow.appendChild(createCell($('.processoaddspaceCands').val()));
                var cellRemoveBtn = createCell();
                cellRemoveBtn.appendChild(createRemoveBtn())
                newRow.appendChild(cellRemoveBtn);
                document.querySelector('#target tbody').appendChild(newRow);
                // Insert array values
                datasIds.push($('.processoaddspaceDate').val());
                turnosIds.push($('.processoaddspaceTime1').val() + ' - ' + $('.processoaddspaceTime2').val());
                salasIds.push(selectedId);
                caractsIds.push(data);
                candidatosIds.push($('.processoaddspaceCands').val());
                // Generate inputs
                newRow.className = (data == '') ? 'piaget-danger' : '';
                newRow.appendChild(generateInputParameterSalas("validIds[]",valid ));
                newRow.appendChild(generateInputParameterSalas("datasIds[]", $('.processoaddspaceDate').val()));
                newRow.appendChild(generateInputParameterSalas("turnosIds[]", $('.processoaddspaceTime1').val() + ' - ' + $('.processoaddspaceTime2').val()));
                newRow.appendChild(generateInputParameterSalas("SalasIds[]", selectedId));
                newRow.appendChild(generateInputParameterSalas("caractsIds[]", data));
              //  newRow.appendChild(generateInputParameterSalas("candidatosIds[]", $('.processoaddspaceCands').val()));
                //generateInputsSalasIds(salasIds);
                // Enable/Disable Elements
                processaccspaceEnableDisableElements();
                //
                loadOut();
            }
        });
}
function createCell(selected) {
    var td = document.createElement('td');
    if (selected) {
        td.innerText = selected;
    }
    return td;
}
function createRemoveBtn() {
    var btnRemove = document.createElement('button');
    btnRemove.className = 'btn btn-sm btn-danger';
    btnRemove.innerHTML = '<i class="fa fa-times"></i>';
    btnRemove.setAttribute('type', 'button');
    btnRemove.onclick = removespaces;
    return btnRemove;
}
function removespaces() {
    var row = this.parentNode.parentNode;
    salasIds = salasIds.filter(e => e !== row.cells[0].innerText);
    document.querySelector('#target tbody')
        .removeChild(row);
    processaccspaceEnableDisableElements();
}
function generateInputParameterSalas(name,value) {
    var input = document.createElement("input");
    //input.type = "text";
    input.type = "hidden";
    input.name = name;
    input.value = value;
    return input;
}
function processaccspaceEnableDisableElements() {
    if ($('#target tbody').find('tr').length > 0) $('.processoaddspaceCharacteristics').attr('disabled', true); else $('.processoaddspaceCharacteristics').attr('disabled', false);
}
function findInTable(str, tableID) {
    var result = false;
    $('#' + tableID + ' tr').each(function () {
        $(this).children('td').each(function () {
            if ($(this).html() == str) {
                result = true;
            }
        });
    });
    return result;
}
function findInTableEl(str, tableID) {
    var result = false;
    $('#' + tableID + ' tr').each(function () {
        $(this).children('td').each(function () {
            $(this).children('select').each(function () {
                if ($(this).val() == str) {
                result = true;
                }
            });
        });
    });
    return result;
}



/*
 * *******************************************
 * TIPOLOGIAS
 * *******************************************
*/
function AddcambioRates() {
    var response = []; 

    if ($('#Moeda').val() == '') {
        response["result"] = false;
        response["error"] = "Deve selecionar a moeda para continuar!";
        handleSuccess(response);
        setTimeout(() => {
            $('.handle-error').hide()
        }, "10000")
        return false;
    }
    /*if ($('#cambioOficial').val() == '1' && $('#Cambio').val()=='') {
        response["result"] = false;
        response["error"] = "Deve adicionar o câmbio em comparação a moeda oficial!";
        handleSuccess(response);
        setTimeout(() => {
            $('.handle-error').hide()
        }, "10000")
        return false;
    }*/
    // Find duplicate
    if (findInTableEl($('#Moeda').find(":selected").val(), 'target')) {
        response["result"] = false;
        response["error"] = "Moeda já encontra-se selecionada!";
        handleSuccess(response);
        setTimeout(() => {
            $('.handle-error').hide()
        }, "10000")
        return false;
    }
    
    var html = '';
    html += '<tr><td><div class="d-flex flex-column"><small class="text-50 mb-4pt">' + $('#Moeda').find(":selected").text() +'</small><span class="indicator-line rounded"></span></div>    <select style="display:none;" name="moedas[]" class="form-control"><option value="' + $('#Moeda').find(":selected").val() + '">' + $('#Moeda').find(":selected").text() + '</option></select></td>   <td style="display:none"><select name="oficiais[]" class="form-control"><option value="0">Não</option></select></td><td><input name="cambios[]" placeholder="Câmbio" type="number" min="0" class="form-control w-110" maxlength = "10" step = "0.01" oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);"  value="' + $('#Cambio').val() +'"/></td><td><button type="button" class="btn btn-default" onclick="RemovecambioRates(this)"><i class="fa fa-trash"></i></button></td></tr>'
    $('#target').append(html);
}
function RemovecambioRates(button) {
    $(button).closest("tr").remove();
}


/* ############################################
   GESTAO PESSOAL
 ##############################################
 */
$(document).on("change", "#internal_external_employee", function () {
    if (this.value == 'Externo') {
        $('.external-employee-row').show();
        $('.internal-employee-row').hide();
        $('.empresa').prop('required', true);
        $(".unidade-select").prop('required', false);
        $('.empresa').val('');
    }
    else {
        $('.external-employee-row').hide();
        $('.internal-employee-row').show();
        $('.empresa').prop('required', false);
        $(".unidade-select").prop('required', true);
        $(".unidade-select").val("");
        $(".espaco-selectx").val("");
    }
})







/*
 * ******************************
 * FORMULARIO DE CANDIDATURA
 * * **************************/
/*
 *
 Cada etapa vai validar e enviar os dados de forma individual o bloco abaixo representa isso.
 */


/******* VALIDAR FORMULARIO CANDIDATURAS **********/

$(document).ready(function () {

    $("#joblist").append('<option value="0">Outra</option>');
    $("#CandInstituicaoEnsino").append('<option value="0">Outra</option>');
    $("#CandInstituicaoCurso").append('<option value="0">Outra</option>');

    ///AGREGAR INSTITUIÇÃO
    $("#school").on('change', (function (e) {
        var value = $(this).val();
        if (value == '0') { $('#addschool').show(); $('#schoolnew').prop('required', true); }
        else { $('#addschool').hide(); $('#schoolnew').prop('required', false); }
    }));
    ///HABILITAR PROFISSÃO
    $("#occupation").change(function () {
        var value = $(this).val();
        if (value == '2') {
            $('.joblistHelper').show();
            $('#joblist').attr('required', true);
        } else {
            $('.joblistHelper').hide();
            $('#joblist').attr('required', false);
        }
    });
    //ADICIONAR E REMOVER AGREGADO FAMILIAR
    $("#btnCandAddParente").click(function () {
        $("#btnCandAddParente").prop("hidden", true);
        $("#CandParentSecundario").prop("hidden", false);
        $("#btnCandRemoveParente").prop("hidden", false);
        $("#GrauParenteSecundarioId").prop("required", true);
        $("#GrauParenteSecundarioNome").prop("required", true);
        $("#GrauParenteSecundarioTelefone").prop("required", true);

        $("#GrauParenteSecundarioId").val("");
        $("#GrauParenteSecundarioNome").val("");
        $("#GrauParenteSecundarioTelefone").val("");
        $("#GrauParenteSecundarioProfissao").val("");
    })
    $("#btnCandRemoveParente").click(function () {
        $("#btnCandRemoveParente").prop("hidden", true);
        $("#CandParentSecundario").prop("hidden", true);
        $("#btnCandAddParente").prop("hidden", false);
        $("#GrauParenteSecundarioId").prop("required", false);
        $("#GrauParenteSecundarioNome").prop("required", false);
        $("#GrauParenteSecundarioTelefone").prop("required", false);

        $("#GrauParenteSecundarioId").val("");
        $("#GrauParenteSecundarioNome").val("");
        $("#GrauParenteSecundarioTelefone").val("");
        $("#GrauParenteSecundarioProfissao").val("");
    })
    $("#btnCandAddDeficiency").click(function () {
        $(this).hide();
        $("#btnCandRemoveDeficiency").show();
        $("#CandDeficiencyContainer").show();
        $("#CandDeficiencyId").prop("required", true);
        $("#CandDeficiencyGrau").prop("required", true);
        $("#CandDeficiencyId").val("");
        $("#CandDeficiencyGrau").val("");
        $("#CandDeficiencyDescricao").val("");
    })
    $("#btnCandRemoveDeficiency").click(function () {
        $(this).hide();
        $("#btnCandAddDeficiency").show();
        $("#CandDeficiencyContainer").hide();
        $("#CandDeficiencyId").prop("required", false);
        $("#CandDeficiencyGrau").prop("required", false);

        $("#CandDeficiencyId").val("");
        $("#CandDeficiencyGrau").val("");
        $("#CandDeficiencyDescricao").val("");
    })
    $("#joblist").change(function () {
        if (this.value == "0") {
            $("#addjob").prop("hidden", false);
            $("#joblistnew").prop("required", true);
        } else {
            $("#addjob").prop("hidden", true);
            $("#joblistnew").prop("required", false);
        }
    })
    //Instituição de Ensino
    $("#CandInstituicaoEnsino").change(function () {
        if (this.value == "0") {
            $("#CandAddSchool").prop("hidden", false); $("#CandDadosInstituicaoEnsino").prop("hidden", false); $("#schoolnew").val(''); $("#schoolnew").prop("required", true);
            $("#CandPaisInstEnsino").prop("required", true);
            $("#CandCidadeEnsino").prop("required", true);
            $("#OutraInstEnsino").prop("required", true);

            $("#CandPaisInstEnsino").val("");
            $("#CandCidadeEnsino").val("");
            $("#OutraInstEnsino").val("");

        } else {
            $("#CandAddSchool").prop("hidden", true); $("#CandDadosInstituicaoEnsino").prop("hidden", true); $("#schoolnew").val(''); $("#schoolnew").prop("required", false);
            $("#CandPaisInstEnsino").prop("required", false);
            $("#CandCidadeEnsino").prop("required", false);
            $("#OutraInstEnsino").prop("required", false);

            $("#CandPaisInstEnsino").val("");
            $("#CandCidadeEnsino").val("");;
            $("#OutraInstEnsino").val("");;
        }
    })
    //Curso do Ensino Médio
    $("#CandInstituicaoCurso").change(function () {
        if (this.value == "0") {
            $("#CandAddCourse").prop("hidden", false);
            $("#OutroCursoEnsMedio").val('');
            $("#OutroCursoEnsMedio").attr("required", true);
        } else {
            $("#CandAddCourse").prop("hidden", true);
            $("#OutroCursoEnsMedio").val('');
            $("#OutroCursoEnsMedio").attr("required", false);
        }
    })
    // Instituicao do Ensino Médio
    $("#EmedioProcedencia").change(function () {
        //
    })
    $('.radio-group .radio').click(function () {
        $(this).parent().find('.radio').removeClass('selected');
        $(this).addClass('selected');
    });
    $(".submit").click(function () {
        return false;
    })
    $('.inputFileUploadCAND').on('change', function () {
        //get the file name
        var fileName = $(this).val().substring($(this).val().indexOf('h') + 1);
        //replace the "Choose a file" label
        $(this).next('.custom-file-label').html(fileName);
    })
});
function cancelform(url) {
    if (confirm("Alterações pendentes não serão guardadas, deseja continuar?")) {
        location.href = url;
    }
}
function CandFileSetID(item) {
    $(".CandDocTipoID_" + item).val(item); //SO ATRIBUI ID DO TIPO DE DOCUMENTO NO INPUT PARA AQUELES FIELDS COM VALOR
}
function loadedpdf() {
    $(".pdfloader").hide();
}
function courseModels(validationId, tab, processoId, pessoaID, CandException) {
    $.ajax({
        type: "GET",
        url: "/applications/GetCourseModels",
        data: { "validationId": validationId, "tab": tab, "processoId": processoId, "pessoaID": pessoaID, "CandException": CandException },
        cache: false,
        beforeSend: function () {
            $('.card-group-row__card').click();
            $('.popover').hide();
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $("#courseModels").html(data);
            setupSelect2();
            loadOut();
            //domFactory.handler.upgradeAll();
        }
    });
}



/*
 * ********************************************
 * ACCESS CONTROL JS - FANCY TREE
 * * ******************************************
*/

$(document).ready(function () {
    if ($("#FancyTreeUserGet").val() != "") {
        var userId = $("#Id").val(); 
        FancyTreeLoadProfilesAndGroups(userId);
    }
})
$("#aggUserPermissionComponent").change(function () {
        var userId = $("#Id").val(); 
        FancyTreeLoadProfilesAndGroups(userId);
});
function FancyTreeLoadProfilesAndGroups(UserId) {
    if (UserId != "") {
        //clear inputs before populate
        $("#inputsProfiles").empty();
        $("#inputsGroups").empty();
        FancyTreeProfiles(UserId);
        FancyTreeGroups(UserId);
        $("#aggUserPermissionDiv").prop("hidden", false);
    } else {
        //clear inputs before populate
        $("#inputsProfiles").empty();
        $("#aggUserPermissionDiv").prop("hidden", true);
    }
}
function FancyTreeProfiles(UserId) {
    /*FancyTree configuration for PROFILES and ATOMS**/
    //init
    var selRootNodes = [];
    var selRootKeys = [];

    $(":ui-fancytree").fancytree("destroy");
    $("#fancyProfile").fancytree({
        extensions: ["glyph"],
        glyph: {
            preset: "awesome5",
            map: {}
        },
        checkbox: true,
        selectMode: 3,
        source: {
            url: "/ajax/FancyTreeGetProfilesByUser",
            "type": "POST",
            "datatype": "json",
            data: { "UserId": UserId },
        },
        init: function (event, data) {
            data.tree.getRootNode().visit(function (node) {
                if (node.data.preselected) node.setSelected(true);
            })
        },
        activate: function (event, data) {
            $("#echoActive1").text(data.node.title);
        },
        select: function (event, data) {
            // Get a list of all selected nodes, and convert to a key array:
            var selKeys = $.map(data.tree.getSelectedNodes(), function (node) {
                return node.key;
            });
            // Get a list of all selected TOP nodes
            selRootNodes = data.tree.getSelectedNodes(true);
            // ... and convert to a key array:
            selRootKeys = $.map(selRootNodes, function (node) {
                return node.key;
            });
            $("#inputsProfiles").empty();
            for (var i = 0; i < selRootKeys.length; i++) {
                $("#inputsProfiles").append('<input type="text" name="profiles[]" value="' + selRootKeys[i] + '"/>');
            }
        }
    });
}
function FancyTreeGroups(UserId) {
    /*FancyTree configuration for GROUPS and ATOMS**/
    //init
    var selRootNodes = [];
    var selRootKeys = [];
    var items = [];

    $("#fancyGroup").fancytree({
        extensions: ["glyph"],
        glyph: {
            preset: "awesome5",
            map: {}
        },
        checkbox: true,
        selectMode: 3,
        source: {
            url: "/ajax/FancyTreeGetGroupsByUser",
            "type": "POST",
            "datatype": "json",
            data: { "UserId": UserId },
        },
        init: function (event, data) {
            data.tree.getRootNode().visit(function (node) {
                if (node.data.preselected) node.setSelected(true);
            });

        },
        activate: function (event, data) {
            $("#echoActive1").text(data.node.title);
        },
        select: function (event, data) {
            // Get a list of all selected nodes, and convert to a key array:
            var selKeys = $.map(data.tree.getSelectedNodes(), function (node) {
                return node.key;
            });
            // Get a list of all selected TOP nodes
            selRootNodes = data.tree.getSelectedNodes(true);
            // ... and convert to a key array:
            selRootKeys = $.map(selRootNodes, function (node) {
                return node.key;
            });
            if (data.node.hasChildren()) {
                data.node.visit(function (child) {
                    if (child.isSelected()) {
                        items.push(child.key);
                    } else {
                        items = items.filter(e => e !== child.key)
                    }
                });
            } else {
                if (data.node.isSelected()) {
                    items.push(data.node.key);
                } else {
                    items = items.filter(e => e !== data.node.key)
                }
            }
            $("#inputsGroups").empty();
            for (var i = 0; i < items.length; i++) {
                $("#inputsGroups").append('<input type="text" name="subgroups[]" value="' + items[i] + '"/>');
            }
        }
    });
}


/*
 * *******************************************
 * TYPEHEAD JS
 * *******************************************
*/
let users = [];
$(document).on("keyup", "#users", function () {
//$("#users").keyup(function (event) {
    $('.typeahead').typeahead('destroy');
    $("#users").focus();
    $.ajax({
        type: 'GET',
        dataType: 'json',
        url: "/ajax/getusersbyvalue",
        data: { "qvalue": $("#users").val() },
        success: function (json) {
            $('.typeahead').typeahead('destroy');
            users = [];
            $("#users").focus();
            if (json.length > 0) {
                users = [];
                $('.typeahead').typeahead('open');
                let arrayLength = json.length;
                for (let i = 0; i < arrayLength; i++) {
                    if (!users.includes(json[i]['Nome'])) {
                        users.push(json[i]['Nome']);
                    }
                }
                $('#users-typeahead .typeahead').typeahead({
                    hint: true,
                    highlight: true,
                    minLength: 1
                },
                    {
                        name: 'users',
                        source: substringMatcher(users)
                    });
                $("#users").focus();
                return users;
            }
            $("#users").focus();
        }
    });
    $("#users").focus();
});
let substringMatcher = function (strs) {
    return function findMatches(q, cb) {
        let matches, substringRegex;
        matches = [];
        substrRegex = new RegExp(q, 'i');
        $.each(strs, function (i, str) {
            if (substrRegex.test(str)) {
                matches.push(str);
            }
        });
        cb(matches);
    };
};
$(document).on("typeahead:select", '.typeahead', function (ev, suggestion) {
//$('.typeahead').bind('typeahead:select', function (ev, suggestion) {
    var text = suggestion.substring(0, suggestion.indexOf('-'));
    $("#Id").val(text);
    $('.typeahead').typeahead('destroy');
    //$("#Id").parent().submit();
    loadIn();
    if ($('#winlocation').val())
        window.location = $('#winlocation').val() + "/" + text;
    else
        processRequestsUserId(text);
    loadOut();
});
$('.typeahead').bind('typeahead:active', function (ev, suggestion) {
    $("#users").focus();
});


/*
 * *******************************************
 * GA DISCIPLINAS TIPO AULAS JS
 * *******************************************
*/

$(document).on("change", ".gatipoaulas_check", function () {
    if ($(this).is(":checked")) {
        var value = $(this).val();
        characteristics.push(value);
        $('#prop_' + value).css('visibility','visible');
        $('#requiredOptionSelect_' + value).prop("disabled", false);
        $('#valores_' + value).prop("disabled", false);
        $('#duracao_' + value).prop("disabled", false);
        $('#requiredOptionSelect_' + value).val('0');
    } else {
        var value = $(this).val();
        $('#prop_' + value).css('visibility', 'hidden');
        $('#requiredOptionSelect_' + value).prop("disabled", true);
        $('#valores_' + value).prop("disabled", true);
        $('#duracao_' + value).prop("disabled", true);
        if ($('#requiredOptionSelect_' + value).val()=='1') $('#prop2_' + value).hide();
    }
});
$(document).on("change", ".gatipoaulas_AdiaAulas", function () {
    var value = $(this).attr("id").split('_')[1];
    if ($(this).val() == 1) {
        $('#prop2_' + value).css('visibility', 'visible');
        $('#valores_' + value).val('');
        $('#duracao_' + value).val('');
        $('#valores_' + value).prop('required',true);
        $('#duracao_' + value).prop('required', true);
    } else {
        $('#prop2_' + value).css('visibility', 'hidden');;
        $('#valores_' + value).val('');
        $('#duracao_' + value).val('');
        $('#valores_' + value).prop('required', false);
        $('#duracao_' + value).prop('required', false);
    }
});






/*
 * *******************************************
 * GA TURMAS
 * *******************************************
*/
function getClassesByCourse(cursoId, ano) {
    $(".year_change option[value='']").remove();
    //var ano = button.value;
    $("#btnAddClass").attr("data-id", cursoId + "-" + ano)
    $("#btnCopyClass").attr("data-id", cursoId + "-" + ano)
    $("#btnAddClass").removeClass("disabled")
    $("#btnCopyClass").removeClass("disabled")
    $("#btnRefreshClass").removeClass("disabled")
    var counter = 0;
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetClassesByCourses",
        data: { "CourseId": cursoId, "AnoLectivo": ano },
        cache: false,
        beforeSend: function () {
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $("#classesList").empty();
            var CLASSES = data.CLASSES;
            var COURSEINFO = data.COURSEINFO;
            $("#SpanCourseName").text("Turmas do curso de " + COURSEINFO.NOME)
            $("#SpanAnoLectivo").text(" ano lectivo " + COURSEINFO.ANOLECTIVO)

            if (CLASSES.length > 0) {
                var html = '';
                counter = 0;
                CLASSES.forEach(function (items) {
                    items.forEach(function (item) { counter++; })
                })
                html += '<div class="col-md-12"><h6 class="p-12pt"><strong><i class="mr-1 fa fa-search"></i>'+counter+' registo(s) encontrado(s)</strong></h6></div>';
                CLASSES.forEach(function (items) {
                    html += '<div class="col-md-3"><table class="not-hidden" style="width:100%;"><tr><td valign="top"><table class=" not-hidden" style="width:100%;border:1px solid rgba(39,44,51,.1)"><tr class="piaget-bg-active p-1"><th colspan="2" class="p-1">' + items[0].ANO + 'º Ano</th><th></th></tr>'

                    items.forEach(function (item) {
                        html += '<tr>'
                        html += ' <td class="p-1"><a href="/gamanagement/manageclasses/' + item.ID + '">' + item.SIGLA + ' (' + item.CAPACIDADE + ')</a></td>'
                        html += '  <td class="p-1"><a style="display:' + item.AccessControlEdit + '" title="Editar" href="javascript:void(0)" class="btn btn-default btn-sm text-capitalize open-modal-crud" data-id="' + item.ID + '" data-action="Editar" data-entity="gaclasses" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-pencil"></i><a/></td>'
                        html += '  <td class="p-1"><a style="display:' + item.AccessControlDelete + '" title="Remover" href="javascript:void(0)" class="btn btn-default btn-sm text-capitalize open-modal-crud" data-id="' + item.ID + '" data-action="Remover" data-entity="gaclasses" data-toggle="modal" data-target="#crudControlModal"><i class="fa fa-trash"></i></a></td>'
                        html += '</tr>'
                    })

                    html += '</table> </td></tr></table></div>'
                })
                $("#classesList").append(html);
            } else {
                html = '';
                html += '<h6 class="p-12pt text-center"><strong><i class="mr-1 fa fa-search"></i>Nenhum registo foi encontrado</strong></h6>';
                $("#classesList").append(html);
            }
            $("#btnAddNewClass").prop("hidden", false);
            loadOut();
        }
    });
}
/*
$('.addgaclass1').click(function () {
    var items = $("#list1 option:selected");
    var n = items.length;
    if (n > 0) {
        items.each(function (idx, item) {
            $('#list2').append($('<option>', { value: item.value, text: item.text }));
            $(item).remove();
        });
    }
    else { }
});
$('.removegaclass1').click(function () {
    var items = $("#list2 option:selected");
    var n = items.length;
    if (n > 0) {
        items.each(function (idx, item) {
            $('#list1').append($('<option>', { value: item.value, text: item.text }));
            $(item).remove();
        });
    }
    else {}
});*/
$(document).on('click', '.addgaclass1', function () {
    $(this).removeClass('addgaclass1').addClass('removegaclass1');
    $(this).removeClass('btn-success').addClass('btn-danger');
    $(this).find('i').removeClass('fa-plus-circle').addClass('fa-times');
    $(this).parent().find('input').attr('name', 'ucIds[]');
    $(this).parent().clone(true).appendTo('#list1');
    $(this).parent().remove();
});
$(document).on('click', '.removegaclass1', function () {
    $(this).removeClass('removegaclass1').addClass('addgaclass1'); 
    $(this).removeClass('btn-danger').addClass('btn-success');
    $(this).find('i').removeClass('fa-times').addClass('fa-plus-circle');
    $(this).parent().find('input').attr('name', '');
    $(this).parent().clone(true).appendTo('#list2');
    $(this).parent().remove();
});
$(document).on('click', '.addgaclass2', function () {
    $(this).removeClass('addgaclass2').addClass('removegaclass2');
    $(this).removeClass('btn-success').addClass('btn-danger');
    $(this).find('i').removeClass('fa-plus-circle').addClass('fa-times');
    $(this).parent().find('input').attr('name', 'ucIds2[]');
    $(this).parent().clone(true).appendTo('#list3');
    $(this).parent().remove();
});
$(document).on('click', '.removegaclass2', function () {
    $(this).removeClass('removegaclass2').addClass('addgaclass2');
    $(this).removeClass('btn-danger').addClass('btn-success');
    $(this).find('i').removeClass('fa-times').addClass('fa-plus-circle');
    $(this).parent().find('input').attr('name', '');
    $(this).parent().clone(true).appendTo('#list4');
    $(this).parent().remove();
});







/*
 * *******************************************
 * FULL CALENDAR JS - GA CALENDARIO ACADEMICO
 * *******************************************
*/
function refreshCalendar(calendario,column) {
    $(calendario).fullCalendar('destroy');
    initCalendar(calendario, column);
}
function initCalendar(calendario, column) {
    var calendarId = $('#CalendarId').val();
    $(calendario).fullCalendar({
        header: {
            left: 'prev,next today',
            center: 'title',
            right: 'year,month,agendaWeek,agendaDay'
        },
        //defaultDate: '2015-01-12',
        height: '100%',
        lang: "pt",
        expandRows: true,
        defaultView: 'year',
        yearColumns: column,//3
        selectable: true,
        selectMirror: true,
        selectHelper: true,
        timeZone: 'UTC',
        //allDay: true,
        //rendering: 'background',
        /*select: function(start, end) {
            var title = prompt('Event Title:');
            var eventData;
            if (title) {
                eventData = {
                    title: title,
                    start: start,
                    end: end
                };
                $('#calendar').fullCalendar('renderEvent', eventData, true); // stick? = true
            }
            $('#calendar').fullCalendar('unselect');
        },*/
        firstDay: 0,
        editable: true,
        nowIndicator: true,
        dayMaxEvents: true,
        eventAfterAllRender: function (arg) {
            $(".fc-year-main-table a").css("visibility", "visible");
            $(".fc-content").css("height", "20");
            $(".fc-title").css({ "font-size": "10pt", "padding": "2" });
            //
        },
        eventClick: function (event) {
            //console.log(event);
            $("#calendar-container").append(`<a href="javascript:void(0)" class="open-modal-crud" data-id="` + event.id + `" data-action="Editar" data-entity="gacalendarios" data-toggle="modal" data-target="#crudControlModal" id="openEditCalendarModal">text</a>`);
            $("#openEditCalendarModal").click();
            $("#openEditCalendarModal").remove();
        },
        eventRender: function (event, element, view) {
            /*console.log(event);
            var start = moment(event.start);
            var end = moment(event.end +1);
            while (start.format('YYYY-MM-DD') != end.format('YYYY-MM-DD')) {
                var dataToFind = start.format('YYYY-MM-DD');
                $("td[data-date='" + dataToFind + "']").css('background-color', event.color);
                start.add(1, 'd');
            }*/
            //element.css('background-color', 'yellow');
            /*if (event.rendering == 'background') {
                element.append(event.id);
            }*/

        },
        dayClick: function (info, jsEvent, view) {
            //console.log(info)

            //alert('Click Background Event Area');
            /*if (jsEvent.target.classList.contains('fc-bgevent')) {
            }*/
        },
        eventLimit: true, // allow "more" link when too many events
        events: {
            url: "/gamanagement/GetCalendarioEventos/" + calendarId
            /*{
                id: 1,
                title: 'Long event',
                start: '2022-10-03',
                end: '2023-01-31',
                rendering: 'background',
                color: '#1dd1a1', //'#fde4c880',
                //overlap: false,
            },
            {
                id: 2,
                title: 'Long event',
                start: '2023-02-14',
                end: '2023-02-18',
                rendering: 'background',
                color: '#f9ca24', //'#fde4c880',
                //overlap: false,
            }*/
        },

        select: function (info, start, end) {
            //console.log(info)
        }
        // eventColor: '#378006'
    });
}






/*
 * *******************************************
 * GESTAO GA PLANEAMENTO DE OCORRENCIAS
 * *******************************************
*/
// Novo plano occorencias
$(document).on('change', '#CursoId', function () {
    // Retrieve selected options from Ajax
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetPEOcorrencias",
        data: { "CourseId": $(this).val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $('#PlanoEstudo option').remove();
            var s = '<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
            }
            $('#PlanoEstudo').html(s);
            // Loadout
            loadOut();
        }
    });
});
// Administrar plano de occorencia
function chageRegimeSelectBox(disciplinaId, elem) {
    $(".txtChangeRegime_" + disciplinaId + "").val($(elem).val());
}
document.addEventListener("DOMContentLoaded", function (event) {
    const FORMULA_BASE = $('#INST_MDL_GA_PLANO_OCCORENCIA_BASE_FORMULA').val();

    $(".disableCheckBoxOcurrence").each(function (i, r) {
        $(r).prop("checked", false);
        $(r).closest("tr").find(":input").not('input[type=checkbox]').attr("disabled", "disabled");
    });
    $(document).on('change', '.checkboxOcurrenceSubjects', function () {
        if (!this.checked) {
            //$(this).closest("tr").find("input[type='number'],button,textarea,select,text").attr("disabled", "disabled");
            $(this).closest("tr").find(":input").not('input[type=checkbox]').attr("disabled", "disabled");
        } else {
            $(this).closest("tr").find(":input").not('input[type=checkbox]').removeAttr('disabled');
        }
    });
    $(".moduloBox").on("change", function (elem) {
        let moduloValor = elem.currentTarget.value;
        let numSem = $(this).closest("td").find(("input[name='NUMSEMANAS[]']")).val();
        let base = (moduloValor / FORMULA_BASE) * numSem;
        $(this).closest("td").find(("input[name='CH[]']")).val(base);
        $(this).closest("td").find(("label")).text(base);
    })
    $(".moduloBox").on("keyup", function (elem) {
        let moduloValor = elem.currentTarget.value;
        let numSem = $(this).closest("td").find(("input[name='NUMSEMANAS[]']")).val();
        let base = (moduloValor / FORMULA_BASE) * numSem;
        $(this).closest("td").find(("input[name='CH[]']")).val(base);
        $(this).closest("td").find(("label")).text(base);
    })
});



/*
 * *******************************************
 * GA ESTUDANTES E INSCRICOES
 * *******************************************
*/
$(document).on("change", "#TipoInscId", function () {
    if ($(this).val() == $(this).data("id")) {
        $(".divShowTurma").show();
        //$("#TurmaId").prop("required", true);
    } else {
        $(".divShowTurma").hide();
        //$("#TurmaId").prop("required", false);
    }
})
$(document).on("change", "#SubjectId", function () {
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetSubjectTurma",
        data: { "SubjectId": $('#SubjectId').val(), "Anolectivo": $('#AnoLectivo').val(), "AnoCurricular": $('#AnoCurricular').val(), "CourseId": $('#CursoId').val(), "RegFreqId": $('#Turno').val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            $('#TurmaId option').remove();
            var s = '';//'<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                if (data[i].Disabled)
                    s += '<option disabled="" value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                else
                    s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                //$('#TurmaListFixedSigla').html(data[i].TurmaSigla);
            }
            $('#TurmaId').html(s);

            $.ajax({
                type: "GET",
                url: "/gamanagement/GetSubjectRegime",
                data: { "SubjectId": $('#SubjectId').val(), "PEId": $('#PlanoEstudo').val() },
                cache: false,
                beforeSend: function () {
                },
                complete: function () {
                },
                success: function (data) {
                    for (var i = 0; i < data.length; i++) { $('#Regime').val(data[i].Regime); $('#RegimeLbl').html(data[i].Regime); }
                    $("#SubjectId option[value='']").remove();
                    $('.showSub').show();
                }
            });

            // Loadout
            loadOut();
        }
    });
})
$(document).on("change", "#GAStatutesDescSel", function () {

    var id = $(this).val();

    $.ajax({
        type: "GET",
        url: "/gamanagement/GetGAStatutesDescLblTipo",
        data: { "EstatutoId": id },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            
            if (data != null && data.length > 0) {
                if (!data[0].TipoBolsa) {
                    $('#GAStatutesBolseiroDiv').hide();
                    $('#GAStatutesOutrosDiv').show();

                    $('#DataInicio').attr("required", false);
                    $('#DataFim').attr("required", false);
                    $('#GAStatutesEntSel').attr("required", false);
                    $('#GAStatutesEntSel').attr("required", false);
                    $('#GAStatutesEntSelOption').attr("required", false);
                    $('#Confirmada').attr("required", false);
                    $('#GAStatutesDescSel').attr("required", true);

                } else {
                    $('#GAStatutesBolseiroDiv').show();
                    $('#GAStatutesOutrosDiv').hide();

                    $('#DataInicio').attr("required", true);
                    $('#DataFim').attr("required", true);
                    $('#GAStatutesEntSel').attr("required", true);
                    $('#GAStatutesEntSel').attr("required", true);
                    $('#GAStatutesEntSelOption').attr("required", true);
                    $('#Confirmada').attr("required", true);
                    $('#GAStatutesDescSel').attr("required", false);
                }
            }
            
            $.ajax({
                type: "GET",
                url: "/gamanagement/GetGAStatutesDescLbl",
                data: { "InscId": $('#GAStatutesInscSel').val(), "EstatutoId": id },
                cache: false,
                beforeSend: function () {
                },
                complete: function () {
                },
                success: function (data1) {
                    if (data1 != null && data1.length > 0) 
                        $('.GAStatutesDescLbl').text(data1[0].Valor);
                    else $('.GAStatutesDescLbl').text('0,00');
                    loadOut();
                }
            });
            
        }
    });
   
})
$(document).on("change", "#GAStatutesEntSel", function () {
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetGAStatutesEntVal",
        data: { "EntidadeId": $(this).val(), "Alectivo": $('#AnoLectivo').val() },
        cache: false,
        beforeSend: function () {
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            var opt = '';
            for (var i = 0; i < data.length; i++) {
                opt += "<option value=" + data[i].Id + ">" + data[i].Valor + " " + data[i].Tipo + "</option>";
            }
            $("#GAStatutesEntSelOption").find("option").remove();
            $("#GAStatutesEntSelOption").append(opt);
            loadOut();
        }
    });
})
$(document).on("change", "#GAStatutesInscSel", function () {
    $.ajax({
        type: "GET",
        url: "/gamanagement/GetGAStatutesInscLbl",
        data: { "InscId": $(this).val() },
        cache: false,
        beforeSend: function () {
            $('#GAStatutesDescSel').val('').trigger('change');
            // Loadin
            loadIn();
        },
        complete: function () {
        },
        success: function (data) {
            var html = '';
            var haspaymentlbl = '';
            var haspaymentdisabled = '';
            var haschecked = '';
            var hasinputdisabled = '';
            
            for (var i = 0; i < data.length; i++) {
                haspaymentlbl = data[i].HasPayment == '1' ? 'text-muted-piaget' : '';
                haspaymentdisabled = data[i].HasPayment == '1' ? 'disabled=""' : '';
                haschecked = data[i].HasPayment == '1' ? '' : 'checked=""';
                hasinputdisabled = data[i].HasPayment == '1' ? 'disabled=""' : '';

                html +=  `<div class="col-md-6">
                                           <div class="custom-control custom-checkbox">&nbsp;<input type="hidden" ${hasinputdisabled} name="prestacoes[]" value="${data[i].Value}"/><input type="checkbox" ${haspaymentdisabled} class="custom-control-input" id="prestacoes_${data[i].Value}" onclick="disableGAEstatuoPres(this)" ${haschecked}/><label for="prestacoes_${data[i].Value}" class="custom-control-label">${data[i].Text.split('#')[0]}</label></div>
                                    <label hidden>@item.Text.Split('#')[1]</label>
                           </div>                   
                            `
                //html += '<tr class="esttr ' + haspaymentlbl + '">';
                //html += '<td><div class="custom-control custom-checkbox">&nbsp;<input type="hidden" ' + hasinputdisabled +' name="prestacoes[]" value="' + data[i].Value + '"/><input type="checkbox" ' + haspaymentdisabled +' class="custom-control-input" id="prestacoes_' + data[i].Value + '" onclick="disableGAEstatuoPres(this)" '+haschecked+'/><label for="prestacoes_' + data[i].Value + '" class="custom-control-label">' + data[i].Text.split('#')[0] +'</label></div></td>';
                //html += '<td class="text-center"><label class="">' + data[i].Text.split('#')[2] + '</label></td>';
                //html += '<td class="text-center"><label class="">' + data[i].Text.split('#')[3] + '</label></td>';
                //html += '<td class="text-center"><label class="">' + data[i].Text.split('#')[1] + '</label></td>';
                //html += '<td class="text-center"><label class="GAStatutesDescLbl">0</label></td>';
                //html += '</tr>';

                $('#PlanoId').val(data[i].PlanoId);
            }
            //$('#GAStatutesDescTbody .esttr').remove(); //remove row
            $('#GAStatutesDescTbody').html('');
            $('#GAStatutesDescTbody').append(html);
            loadOut();
        }
    });
})
$(document).on("change", "#GAStatutesBolseiroTipo", function () {
    $('#Quantity').val('1');
    $('#DataLimite').val('');
    $('#txtDescricaoMovimento').val('');
    $('#GPAGReciboId').val('').trigger('change');
    $('#TipologiaId').val('').trigger('change');
    $('#txtValorTipologia').val('');

    if ($(this).val() == '1') {
        $('#GAStatutesBolseiroDiv').hide();
        $('#GAStatutesOutrosDiv').fadeIn("slow"); 

        $('#DataInicio').attr("required", false);
        $('#DataFim').attr("required", false);
        $('#GAStatutesEntSel').attr("required", false);
        $('#GAStatutesEntSel').attr("required", false);
        $('#GAStatutesEntSelOption').attr("required", false);
        $('#Confirmada').attr("required", false);

        $('#GAStatutesDescSel').attr("required", true);
        
    } else {
        $('#GAStatutesBolseiroDiv').fadeIn("slow"); 
        $('#GAStatutesOutrosDiv').hide();

        $('#DataInicio').attr("required", true);
        $('#DataFim').attr("required", true);
        $('#GAStatutesEntSel').attr("required", true);
        $('#GAStatutesEntSel').attr("required", true);
        $('#GAStatutesEntSelOption').attr("required", true);
        $('#Confirmada').attr("required", true);

        $('#GAStatutesDescSel').attr("required", false);
    }
});
function disableGAEstatuoPres(elem) {
    if ($(elem).prop("checked")) 
        $(elem).parent().find('input[type=hidden]').attr("disabled", false);
    else
        $(elem).parent().find('input[type=hidden]').attr("disabled", true);
}
function goToUrlInsc(elem,id) {
    window.location.href = '/gpagmanagement/processpaymentplans/' + id + '?inscid=' + elem.value + '';
}


/*
 * *******************************************
 * GPAG PLANOS DE PAGAMENTO
 * *******************************************
*/
// PLANOS PRESTACOES
function addRowPrestacao(id,nlength) {
    var html = '';
    $.ajax({
        type: "GET",
        url: "/gpagmanagement/GetTypologiesAjax",
        data: {},
        cache: false,
        success: function (data) {
            html += "<tr>";
            html += "<td><input type='text' name='designacao[]' value='' class='form-control form-control-sm w-200' required/></td>";
            html += "<td><input type='text' name='datainicio[]' value='' class='form-control form-control-sm Disablecalendardatepicker_" + id + " w-110' required/></td>";
            html += "<td><input type='text' name='datafim[]' value='' class='form-control form-control-sm Disablecalendardatepicker_" + id + " w-110' required/></td>";
            html += "<td><select class='form-control form-control-sm generalSelectPrestacoes w-250' name='tipologia[]' required data-id=" + id + "><option value=''>Selecionar uma opção</option>";

            var dataPP = data;
            for (var i = 0; i < data.length; i++) {
                if (data[i].PaiId == null) {
                    html += '<option value="' + data[i].ID + '">' + data[i].Sigla + ' - ' + data[i].Nome + '</option>';

                    for (var x = 0; x < dataPP.length; x++) {
                        if (dataPP[x].PaiId == data[i].ID) {
                            html += '<option value="' + dataPP[x].ID + '">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + dataPP[x].Sigla + ' - ' + dataPP[x].Nome + '</option>';
                        }
                    }
                }

            }
            html += "</select></td>";
            html += "<td><input type='number' min='0' maxlength=" + nlength + " step='0.01' oninput = 'javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);' required='' class='form-control form-control-sm txtValor txtValorSum_" + id + " w-110' name='txtValor[]' value='0' onkeyup='makeSum(" + id + ")' onmouseup='makeSum(" + id + ")'/></td>";
            html += "<td class='text-center'><button type='button' class='btn btn-sm' onclick='removeRow(this)'><i class='fas fa-trash'></i></button></td>"
            html += "</tr>";
            $("#prestacoestbody_" + id).append(html);
            SetUpDatepicker(id);
        }
    });
}
// SUPLEMENTOS
var suplementosCheckInput = 0;
function addRowSuplemento(id,nlength) {
    var html = '';
    suplementosCheckInput++;

    $.ajax({
        type: "GET",
        url: "/gpagmanagement/GetPaymentConditionsAjax",
        data: {},
        cache: false,
        success: function (data1) {
            $.ajax({
                type: "GET",
                url: "/gpagmanagement/GetPaymentValueTypeAjax",
                data: {},
                cache: false,
                success: function (data2) {
                    $.ajax({
                        type: "GET",
                        url: "/gpagmanagement/GetPaymentTypeAjax",
                        data: {},
                        cache: false,
                        success: function (data3) {

                            html += "<tr>";
                            html += "<td><input type='text' name='descricao[]' value='' class='form-control form-control-sm w-200' required/></td>";
                            html += "<td><select class='form-control form-control-sm  w-250' name='condicao[]' required><option value=''>Selecionar uma opção</option>";
                            for (var i = 0; i < data1.length; i++) { html += '<option value="' + data1[i].ID + '">' + data1[i].Descricao + '</option>'; }
                            html += "</select></td>";
                            html += "<td><input type='number' min='0' name='valor[]' maxlength=" + nlength + " step='0.01' oninput = 'javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);' value='' class='form-control form-control-sm  w-110' required=''/></td>";
                            html += "<td><select class='form-control form-control-sm w-110' name='tipo[]' required>";
                            for (var i = 0; i < data2.length; i++) { html += '<option value="' + data2[i].ID + '">' + data2[i].Descricao + '</option>'; }
                            html += "</select></td>";
                            html += '<td><div class="custom-control custom-checkbox row d-flex justify-content-center"><input type="checkbox" onclick="changeCheckboxValue.call(this)" class="custom-control-input js-check-selected-row" id="customCheck_' + suplementosCheckInput + '"><label class="custom-control-label" for="customCheck_' + suplementosCheckInput + '"><span class="text-hide">Check</span></label><input type="hidden" name="unitario[]" value="0" class="valorUnitarioTxt" /></div></td>';
                            html += "<td><select class='form-control form-control-sm' name='pagSimultaneo[]' required><option value='0'>Não</option><option value='1'>Sim</option></select></td>";
                            html += "<td><select class='form-control form-control-sm w-200' name='pagModalidade[]' required>";
                            for (var i = 0; i < data3.length; i++) { html += '<option value="' + data3[i].ID + '">' + data3[i].Descricao + '</option>'; }
                            html += "</select></td>";
                            html += "<td class='text-center'><button type='button' class='btn btn-sm' onclick='removeRow(this)'><i class='fas fa-trash'></i></button></td>"
                            html += "</tr>";
                            $("#suplementostbody_" + id).append(html);
                        }
                    });
                }
            });
        }
    });
}
// DESCONTOS
function addRowDescontos(id, nlength) {
    var html = '';

    $.ajax({
        type: "GET",
        url: "/gpagmanagement/GetDiscountsAjax",
        data: {},
        cache: false,
        success: function (data) {
            html += "<tr>";
            html += "<td><select class='form-control form-control-sm w-250' name='descontos[]' required><option value=''>Selecionar uma opção</option>";
            for (var i = 0; i < data.length; i++) { html += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>'; }
            html += "</select></td>";
            html += "<td><input type='number' min='0' name='valor[]' maxlength=" + nlength + " step='0.01' oninput = 'javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);' value='' class='form-control form-control-sm w-110' required/></td>";
            html += "<td class='text-center'><button type='button' class='btn btn-sm' onclick='removeRow(this)'><i class='fas fa-trash'></i></button></td>"
            html += "</tr>";
            $("#descontostbody_" + id).append(html);
        }
    });
}
// PAGAMENTO ADICIONAL
function addRowPagAdicionais(id, nlength) {
    var html = '';

    $.ajax({
        type: "GET",
        url: "/gpagmanagement/GetTypologiesAjax",
        data: {},
        cache: false,
        success: function (data1) {
            $.ajax({
                type: "GET",
                url: "/gpagmanagement/GetPaymentConditionsGlobalAjax",
                data: {},
                cache: false,
                success: function (data2) {

                    html += "<tr>";
                    html += "<td><input type='text' class='form-control form-control-sm w-200' name='descricao[]' required></td>";

                    html += "<td><select class='form-control form-control-sm w-250 generalSelectPrestacoes' name='tipologia[]' required><option value=''>Selecionar uma opção</option>";

                    var dataPP = data1;
                    for (var i = 0; i < data1.length; i++) {
                        if (data1[i].PaiId == null) {
                            html += '<option value="' + data1[i].ID + '">' + data1[i].Sigla +' - '+data1[i].Nome +'</option>';

                            for (var x = 0; x < dataPP.length;  x++) {
                                if (dataPP[x].PaiId == data1[i].ID) {
                                    html += '<option value="' + dataPP[x].ID + '">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + dataPP[x].Sigla + ' - ' + dataPP[x].Nome + '</option>';
                                }
                            }
                        }
                       
                    }
                    html += "</select></td>";
                    html += "<td><input type='number' min='0' name='valor[]' maxlength=" + nlength + " step='0.01' oninput = 'javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);' value='0' class='form-control form-control-sm txtValor w-110' required=''/></td>";
                    html += "<td><select class='form-control form-control-sm' name='prestacao[]' required><option value='1'>1ª</option><option value='2'>2ª</option><option value='3'>3ª</option><option value='4'>4ª</option><option value='5'>5ª</option><option value='6'>6ª</option><option value='7'>7ª</option><option value='8'>8ª</option><option value='9'>9ª</option><option value='10'>10ª</option></select></td>";
                    html += "<td><input type='text' class='form-control form-control-sm datepicker w-110' name='dataLimite[]'></td>";
                    html += "<td><select class='form-control form-control-sm  w-200' name='condicao[]'><option value=''>Selecionar uma opção</option>";
                    for (var i = 0; i < data2.length; i++) { html += '<option value="' + data2[i].ID + '">' + data2[i].Descricao + '</option>'; }
                    html += "</select></td>";
                    html += "<td><select class='form-control form-control-sm' name='pagSimultaneo[]' required> <option value='0'>Não</option><option value='1'>Sim</option></select></td>";
                    html += "<td class='text-center'><button type='button' class='btn btn-sm' onclick='removeRow(this)'><i class='fas fa-trash'></i></button></td>"
                    html += "</tr>";

                    $(".pag_adici_tbody_" + id).append(html);
                    SetUpDatepicker();
                }
            });
        }
    });
}
function getTypoloyActiveValue(Id, elem) {
    $.ajax({
        type: "GET",
        url: "/gpagmanagement/GetTypologyValuesAjax",
        data: { "typologyID": Id },
        cache: false,
        success: function (data) {
            var valor = 0;

            if (data.length == 0) {
                valor = "0,00";
                elem.closest("tr").find(".txtValor").val(0);
            } else {
                valor = data[0].Valor;
                elem.closest("tr").find(".txtValor").val(data[0].ValorStriped);
            }
            elem.closest("tr").find("span").text(valor);
            makeSum($(elem).attr("data-id"));
        }
    });
}
function removeRow(elem) {
    elem.closest("tr").remove();
    makeSum(elem.closest("tr").children[3].children[0].dataset.id);
}
function changeCheckboxValue() {
    if ($(this).prop("checked")) {
        $(this).closest("tr").find(".valorUnitarioTxt").val(1);
    } else {
        $(this).closest("tr").find(".valorUnitarioTxt").val(0);
    }
}
document.addEventListener("DOMContentLoaded", function (event) {
    $(document).on("change", ".generalSelectPrestacoes", function () {
        getTypoloyActiveValue($(this).val(), $(this));
    });
})
function makeSum(id) {
    var sum = 0;
    $('.txtValorSum_' + id).each(function () {
        sum += parseFloat($(this).val());
    });
    if (isNaN(sum) || sum < 0) sum = 0;
    $(".sumResultlbl_" + id).text(FormatCurrency(sum));
}

/*
 * *******************************************
 * GPAG CONTA CORRENTE
 * *******************************************
*/
$(document).on('change', '#TipologiaId', function () {
    $.ajax({
        type: "GET",
        url: "/gpagmanagement/GetTypologyValuesAjax",
        data: {
            typologyID: $(this).val()
        },
        cache: false,
        success: function (data) {
            if (data[0] != null) {
                if (data[0].ValorStriped!="") $("#txtValorTipologia").val(data[0].ValorStriped);
                $("#txtDescricaoMovimento").val(data[0].TipologiaDesc);
            } else {
                $("#txtValorTipologia").val("");
                $("#txtDescricaoMovimento").val("");
            }
        }
    });
});
$("#btnExpand").click(function () {
    if ($("#userInfoCard").is(":hidden")) {
        $("#userInfoCard").prop("hidden", false);
        $('#checkAccountInfo').prop("hidden", true);
        loadChart();
    } else {
        $("#userInfoCard").prop("hidden", true);
        $('#checkAccountInfo').prop("hidden", false);
        loadChart();
    }
})
/*
function getPaymentMethodInfo(Id, elem) {
    $.ajax({
        type: "GET",
        url: "/gpagmanagement/getPaymentMethodInfo",
        data: { "Id": Id },
        cache: false,
        success: function (data) {
            var opt = "";

            $(elem).closest("tr").find(".identPag").remove();
            $(elem).closest("tr").find(".DataPag").remove();
            for (var i = 0; i < data.length; i++) {
                opt += ""
                if (data[i].IDENTPAG == true) {
                    opt += "<td class='identPag'><input type='text' class='form-control' name='identPag[]' required></td>";
                } else {
                    //gambiarra // TODO::
                    opt += "<td class='identPag' style='display: none;'><input type='text' class='form-control' name='identPag[]'></td>";

                }
                if (data[i].DATAPAG == true) {
                    opt += "<td class='DataPag'><input type='text' class='form-control datepicker' name='dataPag[]' required></td>";
                } else {
                    //gambiarra //TODO::
                    opt += "<td class='DataPag' style='display: none;'><input type='text' class='form-control datepicker' name='dataPag[]' style='min-width: 100px !important; max-width: 100px !important;'></td>";
                }
            }
            $(elem).closest("tr").append(opt);
            SetUpDatepicker();
        }
    });
}*/
$(document).on("change", "#GPAGTipoPagDC", function () {
    $('#Quantity').val('1');
    $('#DataLimite').val('');
    $('#txtDescricaoMovimento').val('');
    $('#GPAGReciboId').val('').trigger('change');
    $('#TipologiaId').val('').trigger('change');
    $('#txtValorTipologia').val('');

    if ($(this).val() == '1') {
        $('.NewGPAGMovementCredit').hide();
        $('.NewGPAGMovementDebit').show();
        $('#TipologiaId').attr("required", true);
        //$('#GPAGReciboId').attr("required", false);

    } else {
        $('.NewGPAGMovementCredit').show();
        $('.NewGPAGMovementDebit').hide();
        $('#TipologiaId').attr("required", false);
        //$('#GPAGReciboId').attr("required", true);
    }
});
/*
 * *******************************************
 * GPAG TESOURARIA
 * *******************************************
*/
function FormatCurrency(x) {
    var format = $('#INST_MDL_GPAG_NOTA_DECIMAL').val();
   // return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return format == '1' ? x.toLocaleString("en-US", { minimumFractionDigits: 2 }) : x.toLocaleString("da-DK", { minimumFractionDigits: 2 });
}





/*
 * *******************************************
 * GA PAUTAS
 * *******************************************
*/

// GA PROCESSOS LANCAMENTO DE RESULTADOS - PAUTAS
$(document).on("change", ".lres-no-mark", function () {
    if ($(this).is(":checked")) {
        var value = $(this).val();
        $(this).closest('tr').find('.lres-nota').attr('readonly', true);
        $(this).closest('tr').find('.lres-nota').val('0');
        $(this).closest('tr').find('.lres-pauta-observacao').show();
        $(this).closest('tr').find('.lres-pauta-observacao').val('');
        $(this).closest('tr').find('.lres-pauta-observacao').attr('required', true);
    } else {
        var value = $(this).val();
        $(this).closest('tr').find('.lres-nota').attr('readonly', false);
        $(this).closest('tr').find('.lres-nota').val('');
        $(this).closest('tr').find('.lres-pauta-observacao').hide();
        $(this).closest('tr').find('.lres-pauta-observacao').val('');
        $(this).closest('tr').find('.lres-pauta-observacao').attr('required', false);
    }
});
$(function () {
    // Font-Text Slider
    $("#range-size").on("input", function () {
        $(".lres-table td").css("font-size", Number($(this).val()));
        $(".lres-table input").attr('style', 'font-size: '+Number($(this).val()) +'px !important');
        $(".lres-table select").css("font-size", Number($(this).val()));
    })
})
// GA PAUTAS ESCALA DE AVALIACAO
$(document).on('change', '#gapautascalestipo', function () {
    if ($(this).val() == "1") {
        $('.gapautascaleShow').show();

        $('#VMin').attr("required", true);
        $('#VMax').attr("required", true);
        $('#Decimais').attr("required", true);
    } else {
        $('.gapautascaleShow').hide();
        $('#VMin').val('');
        $('#VMax').val('');
        $('#Decimais').val('');

        $('#VMin').attr("required", false);
        $('#VMax').attr("required", false);
        $('#Decimais').attr("required", false);
    }
});
 // Toogle View
function togglesmHalf(btn) {
    if ($('div').hasClass('col-sm-6half')) {
        $('.col-sm-6half').addClass('col-sm-12').removeClass('col-sm-6half');
        $('.col-sm-3half').hide();
        $('.col-sm-2half').hide();
        $(btn).removeClass('active');
    }
    else {
        $('.col-sm-12').addClass('col-sm-6half').removeClass('col-sm-12');
        $('.col-sm-3half').show();
        $('.col-sm-2half').show();
        $(btn).addClass('active');
    }
}












/*
 * *******************************************
 * GA PEDIDOS E DECLARACOES
 * *******************************************
*/
// TIPO DE PEDIDOS E DECLARACOES
$(document).on("change", "#SelTipoPedidoCertidao", function () {
    $('#GPAG_PLANOS_PAGAMENTOS_CONDICAO_SUPLEMENTOS_ID').val('');
    $('#AnoCurricular').prop("checked", false);
    $('#DataInicio').prop("checked", false);
    $('#DataFim').prop("checked", false);

    if ($(this).val() == '1') {
        $('#Dec_DIV').show();
        $('.GPAG_PLANOS_PAGAMENTOS_CONDICAO_SUPLEMENTOS_ID').show();
        $('#Assinatura').prop("required", true);
        $('#Responsavel').prop("required", true);
    } else {
        $('#Dec_DIV').hide();
        $('.GPAG_PLANOS_PAGAMENTOS_CONDICAO_SUPLEMENTOS_ID').hide();
        $('#Assinatura').prop("required", false);
        $('#Responsavel').prop("required", false);
    }
});
$(document).on("change", "#TipoPedido", function () {

    $("#anoCurricularDiv").prop("hidden", true);
    $(".dataInicioDiv").prop("hidden", true).prop("required", false).val('');
    $(".dataFimDiv").prop("hidden", true).prop("required", false).val('');
    $("#AnoCurricular").prop("required", false).val('');
    $("#DataInicio").prop("required", false).val('');
    $("#DataFim").prop("required", false).val('');
    $('#IsentoPag').prop("disabled", true);
    $('#IsentoPag').prop("checked", false);
    $('.IsentoPagTxtArea').hide();

    $.ajax({
        type: 'GET',
        dataType: 'json',
        url: "/gamanagement/studentRequestGetAllRequiredInputs",
        data: { "Id": $(this).val() },
        success: function (data) {
            if (data[0].ANO_CURRICULAR) {
                $("#anoCurricularDiv").prop("hidden", false); $("#AnoCurricular").prop("required", true);
            }
            if (data[0].DATA_INICIO) {
                $(".dataInicioDiv").prop("hidden", false); $("#DataInicio").prop("required", true);
            }
            if (data[0].DATA_FIM) {
                $(".dataFimDiv").prop("hidden", false); $("#DataFim").prop("required", true);
            }
            if (data[0].GPAG_TIPOLOGIAS_ID == null)
                $('#IsentoPag').prop("disabled", true);
            else
                $('#IsentoPag').prop("disabled", false);
        }
    });
});
$(document).on("change", "#GARequestAlunoInsc", function () {

    var f = '';
    $('#TipoPedido option').remove();

    $.ajax({
        type: 'GET',
        dataType: 'json',
        url: "/gamanagement/getprocessRequestsUserPedidos",
        data: { "InscId": $(this).val() },
        success: function (data) {
            f += '<option value="">Selecionar uma opção</option>';
            for (var i = 0; i < data.length; i++) {
                f += '<option ' + data[i].Disabled + ' value="' + data[i].ID + '">' + data[i].Nome + '</option>';
            }
            $('#TipoPedido').html(f);
        }
    });
});
$(document).on("change", "#IsentoPag", function () {
    if ($(this).is(":checked")) {
        $('.IsentoPagTxtArea').show();
    } else {
        $('.IsentoPagTxtArea').hide();
    }
});
$(document).on("change", "#TagNull", function () {
    if ($(this).is(":checked")) {
        $('#Tag').prop("disabled",true);
    } else {
        $('#Tag').prop("disabled", false);
    }
});
function processRequestsUserId(Userid) {

    var s = '';
    var f = '';
    var ins = 0;

    $('#GARequestAlunoInsc option').remove();
    $('#TipoPedido option').remove();

    $.ajax({
        type: 'GET',
        dataType: 'json',
        url: "/gamanagement/getprocessRequestsUserId",
        data: { "UserId": Userid },
        success: function (data) {
            if (data) {
                $('#GA_ALUNOS_ID').val(data.AlunoId);
                $('#GAlunoNome').text(data.AlunoNome);
                $('#GAlunoNumero').text(data.AlunoNumero);
                $('#GARequestAlunoImgSrc').attr("src", data.AlunoImgSrc);

                $.ajax({
                    type: 'GET',
                    dataType: 'json',
                    url: "/gamanagement/getprocessRequestsUserIns",
                    data: { "UserId": Userid },
                    success: function (data) {
                        for (var i = 0; i < data.length; i++) {
                            ins++;
                            s += '<option value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                        }
                        $('#GARequestAlunoInsc').html(s);

                        $.ajax({
                            type: 'GET',
                            dataType: 'json',
                            url: "/gamanagement/getprocessRequestsUserPedidos",
                            data: { "InscId": $('#GARequestAlunoInsc').val() },
                            success: function (data) {
                                f += '<option value="">Selecionar uma opção</option>';
                                for (var i = 0; i < data.length; i++) {
                                    f += '<option ' + data[i].Disabled + ' value="' + data[i].ID + '">' + data[i].Nome + '</option>';
                                }
                                $('#TipoPedido').html(f);
                            }
                        });
                        if (ins == 0) {
                            $('#GARequestAlunoInscLbl').show();
                            $('#GARequestAlunoInscLbl').next('div').hide();
                        } else {
                            $('#GARequestAlunoInscLbl').hide();
                            $('#GARequestAlunoInscLbl').next('div').show();
                        }
                    }
                });
            }
        }
    });
}
function issuegarequest(id) {
    $.ajax({
        type: "POST",
        url: "/gamanagement/IssueGARequest/"+id,
        data: {},
        cache: false,
        beforeSend: function () { },
        complete: function () { },
        success: function (response) {
            if (response.url) {
                $('#crudControlModal').modal('toggle');
                window.location = response.url;
            }
        }
    });
}


/*
 * *******************************************
 * ACTUALIZAR ARQUIVOS GP
 * *******************************************
*/
function enableDisFileMangPes(elem) {
    if ($(elem).is(":checked")) {
        $(elem).parent().next('input').attr("disabled", false)
        $(elem).closest("tr").addClass("selected")
    } else {
        $(elem).parent().next('input').attr("disabled", true)
        $(elem).closest("tr").removeClass("selected")
    }
}
$(document).on("click", "#tranferFilesBtn", function () {
    var doc = $('#TipoDocIdTr').val();
    var alectivo = $('#AnoLectivo').val();
    var curso = $('#tranferFilesCursoId').val();
    loadIn();
    $.ajax({
        type: "GET",
        url: "/gpmanagement/GetTranferFilesGP",
        data: { "TipoDocId": doc, "Alectivo": alectivo, "CursoId": curso },
        cache: false,
        success: function (data) {

            var html = '';
            var count = 0;
            $('#GetTranferFilesGPTbl').html('');

            for (var i = 0; i < data.length; i++) {
                count++
                html += '<tr>';
                /**/
                html += '<td><div class="custom-control custom-checkbox"><input type="checkbox" id="pespessoas_' + data[i].CAND_ID + '" class="custom-control-input" onclick="enableDisFileMangPes(this)" /><label for="pespessoas_' + data[i].CAND_ID + '" class="custom-control-label"></label></div><input type="hidden" disabled="" name="candids[]" value="' + data[i].CAND_ID + '" /></td>';
                html += '<td><span><a target="_blank" href="/gpmanagement/viewusers/' + data[i].PES_ID + '" title="' + data[i].Login + '">' + data[i].Login + '</a></span></td>';
                html += '<td><span>' + data[i].PES_NOME + '</span></td>';
                //html += '<td><span>' + data[i].CaminhoURL + '</span></td>';
                html += '<td><span><a target="_blank" href="' + data[i].CaminhoURL + '" title="' + data[i].PES_NOME + '"><img src="' + data[i].CaminhoURL + '" width="70" class="border-top-r border-bottom-r" /></a></span></td>';
                html += '';
                /**/
                html += '</tr>';
            }
            if (count == 0)
                html = '<tr><td colspan="4">Nenhum registo foi encontrado</td></tr>';
            $('#GetTranferFilesGPTbl').html(html);
            loadOut();
        }
    });
});




/*
 * *******************************************
 * RELATORIOS E BI
 * *******************************************
*/

$(document).on("change", "#GAApplicationsBISel", function () {
    if ($(this).val() == '1') {
        document.getElementById("BIForms").reset();
        $('.filterActionscol div input').removeClass('disabled').attr("disabled", false);
        $('.filterActionscol div select').removeClass('disabled').attr("disabled", false);
    }
    else if ($(this).val() == '2') {
        document.getElementById("BIForms").reset();
        $('.filterActionscol div input').addClass('disabled').attr("disabled", true);
         $('.filterActionscol div select').removeClass('disabled').attr("disabled", false); //remove all sel first
         $('.filterActionscol div select').not('#Processo').not('#Curso').not('#Sala').addClass('disabled').attr("disabled", true);
     }
    else if ($(this).val() == '3') {
        document.getElementById("BIForms").reset();
         $('.filterActionscol div input').addClass('disabled').attr("disabled", true);
         $('.filterActionscol div select').removeClass('disabled').attr("disabled", false);//remove all sel first
         $('.filterActionscol div select').not('#ALectivo').not('#Curso').addClass('disabled').attr("disabled", true);
    }
});

function GetBIFc() {
    $('.bitextinitial').hide();
    var table = $('.table-responsive');
    var container = $('.progress');
    var bar = $('.progress-bar');
    var excel = $('#DownloadExcel');
    var pdf = $('#DownloadPDF');

    var Relatorio = $('#GAFCBISel').val();
    var RelatorioTxt = $('#GAFCBISel').find(':selected').text();
    var DateIni = $('#DateIni').val();
    var DateEnd = $('#DateEnd').val();
    var MetodoPagamentoId = $('#MetodoPagamentoId').val();
    var MetodoPagamentoTxt = $('#MetodoPagamentoId option:selected').text();
    var Numero = $('#Login').val();
    var Employer = $('#Employer').val();

    var url = "/bi/GetFolhaCaixa";

    $.ajax({
        xhr: function () {
            var xhr = new window.XMLHttpRequest();
            // Upload progress
            xhr.upload.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    //Do something with upload progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    //bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);
            // Download progress
            /*
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    // Do something with download progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    //bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);*/
            return xhr;
        },
        type: 'POST',
        url: url,
        datatype: "json",
        data: { "DateIni": DateIni, "DateEnd": DateEnd, "PaymentMethod": MetodoPagamentoId, "Login": Numero, "Employer": Employer, "Relatorio" :Relatorio },
        success: function (data) {
            var Html = '';
            var count = 0;
            for (var i = 0; i < data.data.length; i++) {
                count++;
                Html += '<tr>';
                    Html += '<td><a title="Conta Corrente" href="/gpagmanagement/checkingaccounts/' + data.data[i].USER_ID + '" target="_blank"><i class="fa fa-external-link-square"></i>&nbsp;' + data.data[i].NUMERO + '<a/></td>';
                    Html += '<td>' + data.data[i].NOME + '</td>';
                    Html += '<td>' + data.data[i].RECIBO_NUMERO + '</td>';
                    Html += '<td>' + data.data[i].EMOLUMENTO + '</td>';
                    Html += '<td>' + data.data[i].METODOPAG + '</td>';
                    Html += '<td>' + data.data[i].IDENTPAG + '</td>';
                    Html += '<td>' + data.data[i].DATAPAG + '</td>';
                    Html += '<td>' + data.data[i].DATA + '</td>';
                    Html += '<td>' + data.data[i].VALOR + '</td>';
                Html += '</tr>';
                $("#spanTotalPayment").text(data.data[i].TOTAL);
            }
            if (count > 0) {
                $('#BIGPAGFCTbl tbody').html(Html);
                excel.attr("href", "/xlsreports/GetFolhaCaixa?Login=" + Numero + "&DateIni=" + DateIni + "&DateEnd=" + DateEnd + "&PaymentMethod=" + MetodoPagamentoId + "&Employer=" + Employer + "&Relatorio=" + Relatorio);
                excel.removeClass("disabled");
                pdf.attr("href", "/pdfreports/GetFolhaCaixa?Login=" + Numero + "&DateIni=" + DateIni + "&DateEnd=" + DateEnd + "&PaymentMethod=" + MetodoPagamentoId + "&Employer=" + Employer + "&MetodoPagamentoTxt=" + MetodoPagamentoTxt + "&Relatorio=" + Relatorio + "&RelatorioTxt=" + RelatorioTxt);
                pdf.removeClass("disabled");
            }
            else {
                Html = '<tr><td colspan="8">Nenhum registo foi encontrado</td></tr>';
                $('#BIGPAGFCTbl tbody').html(Html);
                excel.addClass("disabled");
                pdf.addClass("disabled");
            }
            var percentVal = '100%';
            bar.width(percentVal);
            container.hide();
            table.show();
        }
    });
}

function GetBIGAApplications() {
    $('.bitextinitial').hide();
    var table = $('.table-responsive');
    var container = $('.progress');
    var bar = $('.progress-bar');
    var excel = $('#DownloadExcel');
    var pdf = $('#DownloadPDF');
    var Relatorio = $('#GAApplicationsBISel').val();  

    var Processo = $('#Processo').val();
    var Curso = $('#Curso').val();
    var DateIni = $('#DateIni').val();
    var DateEnd = $('#DateEnd').val();
    var Identificacao = $('#Identificacao').val();
    var RegFreq = $('#RegFreq').val();
    var RegIng = $('#RegIng').val();
    var ALectivo = $('#ALectivo').val();
    var Opcao = $('#Opcao').val();
    var Fase = $('#Fase').val();
    var Estado = $('#Estado').val();
    var Sexo = $('#Sexo').val();
    var Sala = $('#Sala').val();
    var Resultado = $('#Resultado').val();
    var Nota = $('#Nota').val();
    var Nota2 = $('#Nota2').val();
    var Finalizada = $('#Finalizada').val();
    var Validada = $('#Validada').val();
    var Files = '';
    if ($('#CandFilesSearchCheck').is(":checked")) Files = 1;
    var Pautas = '';
    if ($('#CandPautaSearchCheck').is(":checked")) Pautas = 1;
    var Salas = '';
    if ($('#CandSalaSearchCheck').is(":checked")) Salas = 1;
   
    var filters = '';

    if (Processo != '') filters += "Processo " + $('#Processo').find(':selected').text() + " ";
    if (Curso != '') filters += "Curso " + $('#Curso').find(':selected').text() + " ";
    if (Identificacao != '') filters += "Tipo de Identificação " + $('#Identificacao').find(':selected').text() + " ";
    if (RegFreq != '') filters += "Turno " + $('#RegFreq').find(':selected').text() + " ";
    if (ALectivo != '') filters += "Ano lectivo " + $('#ALectivo').find(':selected').text() + " ";
    if (Opcao != '') filters += "Opção " + $('#Opcao').val() + " ";
    if (Fase != '') filters += "Fase " + $('#Fase').val() + " ";
    if (Estado != '') filters += "Estado " + $('#Estado').find(':selected').text() + " ";
    if (Sexo != '') filters += "Sexo " + $('#Sexo').find(':selected').text() + " ";
    if (Sala != '') filters += "Sala " + $('#Sala').find(':selected').text() + " ";
    if (Resultado != '') filters += "Resultado " + $('#Resultado').find(':selected').text() + " ";
    if (DateIni != '' && DateEnd != '') filters += "Data de inscrição entre " + $("#DateIni").val() + " e " + $("#DateEnd").val() + " ";
    if (Nota != '') filters += "Nota Min. " + $('#Nota').val() + " ";
    if (Nota2 != '') filters += "Nota Max. " + $('#Nota2').val() + " ";
    if (Finalizada != '') filters += "Finalizada " + $('#Finalizada').find(':selected').text() + " ";
    if (Validada != '') filters += "Validada " + $('#Validada').find(':selected').text() + " ";
    if (Files != '') filters += "Arquivos anexados ";
    if (Pautas != '') filters += "Sem pauta atribuída ";
    if (Salas != '') filters += "Sem sala atribuída ";
    
    //if (/\S/.test(filters)) { } else { alert('Deve selecionar (1) um ou mais filtros para continuar.'); return;  }
    //$('#filters').text(filters);
    var url = '';
    if (Relatorio == '1') {
        url = "/bi/GetGAApplications";
        $('#lblNumero').text('Número');
        $('#lblNome').text('Nome');
        $('#lblBI').text('BI/Passaporte');
        $('#lblBI').show();
        $('tfoot tr:first-child th').attr('colspan', 7);
        $('#lblCurso').text('Curso');
        $('#lblTurno').text('Turno');
        $('#lblData').text('Data');
        $('#lblEstado').text('Estado');
        $('#lblOpcao').text('Opção');
    }
    if (Relatorio == '2') {
        url = "/bi/GetGAApplicationsSpaces";
        $('#lblNumero').text('Número');
        $('#lblNome').text('Nome');
        $('#lblBI').text('BI/Passaporte');
        $('#lblBI').show();
        $('tfoot tr:first-child th').attr('colspan', 7);
        $('#lblCurso').text('Curso');
        $('#lblTurno').text('Sala');
        $('#lblData').text('Data');
        $('#lblEstado').text('Hora');
        $('#lblOpcao').text('Opção');
    }
    if (Relatorio == '3') {
        url = "/bi/GetGAApplicationsRpt3";
        $('#lblNumero').text('Curso');
        $('#lblNome').text('Ano Lectivo');
        $('#lblBI').hide();
        $('tfoot tr:first-child th').attr('colspan', 6);
        $('#lblCurso').text('Total de Inscrições');
        $('#lblTurno').text('Total de Inscritos');
        $('#lblData').text('Total Admitidos');
        $('#lblEstado').text('Total Não Admitidos');
        $('#lblOpcao').text('Total Matriculados');
    }

    $.ajax({
        xhr: function () {
            var xhr = new window.XMLHttpRequest();
            // Upload progress
            xhr.upload.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    //Do something with upload progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);
            // Download progress
            /*
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    // Do something with download progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);*/
            return xhr;
        },
        type: 'POST',
        url: url,
        datatype: "json",
        data: {
            ProcessoPai: Processo,  curso: Curso, dateini: DateIni, dateend: DateEnd,
            identificacao: Identificacao, regfreq: RegFreq, reging: RegIng, alectivo: ALectivo, opcao: Opcao,
            fase: Fase, estado: Estado, sexo: Sexo, sala: Sala, resultado: Resultado, nota: Nota, nota2: Nota2, finalizada: Finalizada,
            validada: Validada, files: Files, pautas: Pautas, salas: Salas, relatorio: Relatorio
        },
            success: function (data) {
            var Html = '';
                var count = 0;
              
               if (data.data != null) {
                   
            for (var i = 0; i < data.data.length; i++) {
                count++;
                if (Relatorio == '1' || Relatorio == '2') {
                    Html += '<tr>';
                    Html += '<td><a title="Visualizar inscrição" href="/gamanagement/viewapplications/' + data.data[i].Id + '" target="_blank"><i class="fa fa-external-link-square"></i>&nbsp;' + data.data[i].NRTEMP + '<a/></td>';
                    Html += '<td>' + data.data[i].NOME + '</td>';
                    Html += '<td>' + data.data[i].IDENTIFICACAO + '</td>';
                    Html += '<td>' + data.data[i].CURSO + '</td>';
                    Html += '<td>' + data.data[i].REGFREQ + '</td>';
                    Html += '<td>' + data.data[i].DTCANDIDATURA + '</td>';
                    Html += '<td>' + data.data[i].ESTADO + '</td>';
                    Html += '<td>' + data.data[i].OPCAO + '</td>';
                    Html += '</tr>';
                }
                if (Relatorio == '3') {
                    Html += '<tr>';
                    Html += '<td>' + data.data[i].CURSO + '</td>';
                    Html += '<td>' + data.data[i].ALECTIVO + '</td>';
                    //Html += '<td>' + data.data[i].FASE + '</td>';
                    Html += '<td>' + data.data[i].TotalInscricoes + '</td>';
                    Html += '<td>' + data.data[i].TotalInscritos + '</td>';
                    Html += '<td>' + data.data[i].TotalAdmitidos + '</td>';
                    Html += '<td>' + data.data[i].TotalNaoAdmitidos + '</td>';
                    Html += '<td>' + data.data[i].TotalMatriculados + '</td>';
                    Html += '</tr>';
                }
                 }
                }
              
                $("#spanTotalPayment").text(count);
                if (count > 0) {
                $('#BIGAApplicationsTbl tbody').html(Html);

                if (Relatorio == '1' || Relatorio == '3') {
                    excel.attr("href", "/xlsreports/GetApplicationsReports?ProcessoPai=" + Processo + "&curso=" + Curso + "&dateini=" + DateIni + "&dateend=" + DateEnd + "&identificacao=" + Identificacao + "&regfreq=" + RegFreq + "&reging=" + RegIng + "&alectivo=" + ALectivo + "&opcao=" + Opcao + "&fase=" + Fase + "&estado=" + Estado + "&sexo=" + Sexo + "&sala=" + Sala + "&resultado=" + Resultado + "&nota=" + Nota + "&nota2=" + Nota2 + "&finalizada=" + Finalizada + "&validada=" + Validada + "&files=" + Files + "&Pautas=" + Pautas + "&Salas=" + Salas + "&relatorio=" + Relatorio);
                    pdf.attr("href", "/pdfreports/GetApplicationsReports?ProcessoPai=" + Processo + "&curso=" + Curso + "&dateini=" + DateIni + "&dateend=" + DateEnd + "&identificacao=" + Identificacao + "&regfreq=" + RegFreq + "&reging=" + RegIng + "&alectivo=" + ALectivo + "&opcao=" + Opcao + "&fase=" + Fase + "&estado=" + Estado + "&sexo=" + Sexo + "&sala=" + Sala + "&resultado=" + Resultado + "&nota=" + Nota + "&nota2=" + Nota2 + "&finalizada=" + Finalizada + "&validada=" + Validada + "&files=" + Files + "&Pautas=" + Pautas + "&Salas=" + Salas + "&filters=" + filters + "&relatorio=" + Relatorio);
                 }
                else if (Relatorio == '2') {
                        excel.attr("href", "/xlsreports/gaprocessspaces/" + Processo + "?courseid=" + Curso + "&spaceid=" + Sala);
                        pdf.attr("href", "/pdfreports/gaprocessspaces/" + Processo + "?courseid=" + Curso + "&spaceid=" + Sala);
                }
               
                if (count <= 1000) pdf.removeClass("disabled");
                excel.removeClass("disabled");
            }
            else {
                Html = '<tr><td colspan="8">Nenhum registo foi encontrado</td></tr>';
                $('#BIGAApplicationsTbl tbody').html(Html);
                excel.addClass("disabled");
                pdf.addClass("disabled");
            }
            var percentVal = '100%';
            bar.width(percentVal);
            container.hide();
                table.show();
        }
    });
}

function GetBIStd() {
    $('.bitextinitial').hide();
    var table = $('.table-responsive');
    var container = $('.progress');
    var bar = $('.progress-bar');
    var excel = $('#DownloadExcel');
    var pdf = $('#DownloadPDF');

    var Unidade = $('#UnidadeId').val();
    var Curso = $('#Curso').val();
    var DateIni = $('#DateIni').val();
    var DateEnd = $('#DateEnd').val();
    var ALectivo = $('#ALectivo').val();
    var Acurricular = $('#Acurricular').val();
    var RegFreq = $('#RegFreq').val();
    var Turma = $('#Turma').val();
    var Estatuto = $('#Estatuto').val();
    var EntidadeBolsa = $('#EntidadeBolsa').val();
    var BolsaConfirmada = $('#BolsaConfirmada').val();
    var GrauAcad = $('#BIStdGrauAcad').val();
    var Estado = $('#Estado').val();
    var Sexo = $('#Sexo').val();
    var Nacionalidade = $('#Nacionalidade').val();
    var Requests = '';
    if ($('#GAStudentRequestSearchCheck').is(":checked")) Requests = 1;
    var nPrestacao = $('#nPrestacao').val();
    var nPrestacaoEmol = $('#nPrestacaoEmol').val();
   
    var filters = '';

    if (Unidade != '') filters += "Unidade Orgânica " + $('#UnidadeId').find(':selected').text() + " ";
    if (Curso != '') filters += "Curso " + $('#Curso').find(':selected').text() + " ";
    if (DateIni != '' && DateEnd != '') filters += "Data de inscrição entre " + $("#DateIni").val() + " e " + $("#DateEnd").val() + " ";
    if (ALectivo != '') filters += "Ano lectivo " + $('#ALectivo').find(':selected').text() + " ";
    if (Acurricular != '') filters += "Ano Curricular " + $('#Acurricular').find(':selected').text() + " ";
    if (RegFreq != '') filters += "Turno " + $('#RegFreq').find(':selected').text() + " ";
    if (Turma != '') filters += "Turma " + $('#Turma').find(':selected').text() + " ";
    if (Estatuto != '') filters += "Estatuto " + $('#Estatuto').find(':selected').text() + " ";
    if (GrauAcad != '') filters += "Grau Académico " + $('#BIStdGrauAcad').find(':selected').text() + " ";
    if (Estado != '') filters += "Estado " + $('#Estado').find(':selected').text() + " ";
    if (Sexo != '') filters += "Sexo " + $('#Sexo').find(':selected').text() + " ";
    if (Nacionalidade != '') filters += "Nacionalidade " + $('#Nacionalidade').find(':selected').text() + " ";
    if (EntidadeBolsa != '') filters += "Entidade Bolseira " + $('#EntidadeBolsa').find(':selected').text() + " ";
    if (BolsaConfirmada != '') filters += "Bolsa Confirmada " + $('#BolsaConfirmada').find(':selected').text() + " ";
    if (nPrestacao != '' && nPrestacaoEmol != '') filters += "n Emol(s) " + $("#nPrestacao").val() + " " + $('#nPrestacaoEmol').find(':selected').text() + " ";

    if (Requests != '') filters += "Pedidos e/ou Certidões requisitadas ";
   
    $.ajax({
        xhr: function () {
            var xhr = new window.XMLHttpRequest();
            // Upload progress
            xhr.upload.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    //Do something with upload progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    //bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);
            // Download progress
            /*
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    // Do something with download progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    //bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);*/
            return xhr;
        },
        type: 'POST',
        url: "/bi/GetGAStudents",
        datatype: "json",
        data: {
            Unidade: Unidade, curso: Curso, dateini: DateIni, dateend: DateEnd,
            ALectivo: ALectivo, Acurricular: Acurricular, RegFreq: RegFreq, Turma: Turma, Estatuto: Estatuto,
            GrauAcad: GrauAcad, Estado: Estado, Sexo: Sexo, Nacionalidade: Nacionalidade,
             Requests: Requests, EntidadeBolsa: EntidadeBolsa, BolsaConfirmada: BolsaConfirmada, nPrestacao: nPrestacao, nPrestacaoEmol: nPrestacaoEmol
        },
        success: function (data) {
            var Html = '';
            var count = 0;
            for (var i = 0; i < data.data.length; i++) {
                count++;
                Html += '<tr>';
                Html += '<td><a title="Visualizar estudante" href="/gamanagement/viewstudent/' + data.data[i].Id + '" target="_blank"><i class="fa fa-external-link-square"></i>&nbsp;' + data.data[i].NRTEMP + '<a/></td>';
                Html += '<td>' + data.data[i].NOME + '</td>';
                Html += '<td>' + data.data[i].CURSO + '</td>';
                Html += '<td>' + data.data[i].REGFREQ + '</td>';
                Html += '<td>' + data.data[i].TURMA + '</td>';
                Html += '<td>' + data.data[i].DTCANDIDATURA + '</td>';
                Html += '<td>' + data.data[i].ESTADO + '</td>';
                Html += '</tr>';
                $("#spanTotalPayment").text(data.data[i].TOTAL);
            }
            $("#spanTotalPayment").text(count);
            if (count > 0) {
                $('#BIGPAGFCTbl tbody').html(Html);
                excel.attr("href", "/xlsreports/GetStudentsReports?Unidade=" + Unidade + "&curso=" + Curso + "&dateini=" + DateIni + "&dateend=" + DateEnd + "&ALectivo=" + ALectivo + "&Acurricular=" + Acurricular + "&RegFreq=" + RegFreq + "&Turma=" + Turma + "&Estatuto=" + Estatuto + "&GrauAcad=" + GrauAcad + "&Estado=" + Estado + "&Sexo=" + Sexo + "&Nacionalidade=" + Nacionalidade + "&Requests=" + Requests + "&EntidadeBolsa=" + EntidadeBolsa + "&BolsaConfirmada=" + BolsaConfirmada + "&nPrestacao=" + nPrestacao + "&nPrestacaoEmol=" + nPrestacaoEmol);
                excel.removeClass("disabled");
                pdf.attr("href", "/pdfreports/GetStudentsReports?Unidade=" + Unidade + "&curso=" + Curso + "&dateini=" + DateIni + "&dateend=" + DateEnd + "&ALectivo=" + ALectivo + "&Acurricular=" + Acurricular + "&RegFreq=" + RegFreq + "&Turma=" + Turma + "&Estatuto=" + Estatuto + "&GrauAcad=" + GrauAcad + "&Estado=" + Estado + "&Sexo=" + Sexo + "&Nacionalidade=" + Nacionalidade +  "&Requests=" + Requests + "&EntidadeBolsa=" + EntidadeBolsa + "&BolsaConfirmada=" + BolsaConfirmada + "&nPrestacao=" + nPrestacao + "&nPrestacaoEmol=" + nPrestacaoEmol+ "&filters=" + filters);
                if (count <= 1000) pdf.removeClass("disabled");
            }
            else {
                Html = '<tr><td colspan="7">Nenhum registo foi encontrado</td></tr>';
                $('#BIGPAGFCTbl tbody').html(Html);
                excel.addClass("disabled");
                pdf.addClass("disabled");
            }
            var percentVal = '100%';
            bar.width(percentVal);
            container.hide();
            table.show();
        }
    });
}

function GetBITimeTrack() {
    $('.bitextinitial').hide();
    var table = $('.table-responsive');
    var container = $('.progress');
    var bar = $('.progress-bar');
    var excel = $('#DownloadExcel');
    var pdf = $('#DownloadPDF');

    var Relatorio = $('#TimeTrackBISel').val();
    var RelatorioTxt = $('#TimeTrackBISel').find(':selected').text();
    var DateIni = $('#imeTrackBIDateIni').val();
    var DateEnd = $('#imeTrackBIDateEnd').val();
    var Departamento = $('#imeTrackBIDepartamento').val();
    var MetodoPagamentoTxt = $('#imeTrackBIDepartamento option:selected').text();
    var Numero = $('#TimeTrackBINumero').val();

    var url = "/bi/GetTimeTrackReport";

    $.ajax({
        xhr: function () {
            var xhr = new window.XMLHttpRequest();
            // Upload progress
            xhr.upload.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    //Do something with upload progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    //bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);
            // Download progress
            /*
            xhr.addEventListener("progress", function (evt) {
                if (evt.lengthComputable) {
                    var percentComplete = (evt.loaded / evt.total);
                    // Do something with download progress
                    percentComplete = (Math.round(percentComplete * 100)) + '%';
                    bar.width(percentComplete)
                    //bar.html(percentComplete);
                    container.show();
                    table.hide();
                }
            }, false);*/
            return xhr;
        },
        type: 'POST',
        url: url,
        datatype: "json",
        data: { "DateIni": DateIni, "DateEnd": DateEnd, "Departamento": Departamento, "Numero": Numero,  "Relatorio": Relatorio },
        success: function (data) {
            var Html = '';
            var count = 0;
            for (var i = 0; i < data.data.length; i++) {
                count++;
                Html += '<tr>';
                Html += '<td>' + data.data[i].NUMERO + '</td>';
                Html += '<td>' + data.data[i].NOME + '</td>';
                Html += '<td>' + data.data[i].DEPARTAMENTO + '</td>';
                Html += '<td>' + data.data[i].DATA + '</td>';
                Html += '<td>' + data.data[i].SEMANA + '</td>';
                Html += '<td>' + data.data[i].HORARIO + '</td>';
                Html += '<td>' + data.data[i].P1 + '</td>';
                Html += '<td>' + data.data[i].P2 + '</td>';
                Html += '<td>' + data.data[i].P3 + '</td>';
                Html += '<td>' + data.data[i].P4 + '</td>';
                Html += '<td>' + data.data[i].PREVISTA + '</td>';
                Html += '<td>' + data.data[i].EFETUADO + '</td>';
                Html += '<td>' + data.data[i].HORAEXTRA + '</td>';
                Html += '<td>' + data.data[i].HORAEXTRACON + '</td>';
                Html += '<td>' + data.data[i].ATRASO + '</td>';
                Html += '</tr>';
            }
            $("#spanTotalPayment").text(count);
            if (count > 0) {
                $('#BIGPAGFCTbl tbody').html(Html);
                //excel.attr("href", "/xlsreports/GetFolhaCaixa?Login=" + Numero + "&DateIni=" + DateIni + "&DateEnd=" + DateEnd + "&PaymentMethod=" + MetodoPagamentoId + "&Employer=" + Employer + "&Relatorio=" + Relatorio);
                //excel.removeClass("disabled");
                //pdf.attr("href", "/pdfreports/GetTimeTrackReport?Numero=" + Numero + "&DateIni=" + DateIni + "&DateEnd=" + DateEnd + "&Departamento=" + Departamento + "&Relatorio=" + Relatorio + "&filters=" + RelatorioTxt);
                //pdf.removeClass("disabled");
            }
            else {
                Html = '<tr><td colspan="8">Nenhum registo foi encontrado</td></tr>';
                $('#BIGPAGFCTbl tbody').html(Html);
                excel.addClass("disabled");
                pdf.addClass("disabled");
            }
            var percentVal = '100%';
            bar.width(percentVal);
            container.hide();
            table.show();
        }
    });
}


/*
 * *******************************************
 * RECURSOS HUMANOS
 * *******************************************
*/
$(document).on("click", ".processHRTimetrack", function () {
    var id = $(this).data('id');
    var date = $(this).data('date');
    var dw = $(this).data('dw');
    var ppr = $(this).data('ppr');
    var pef = $(this).data('pef');
    var idemployee = $(this).data('idemployee');
    
    loadIn();

    $.ajax({
        type: "POST",
        url: "/Ajax/HRTimetrack",
        data: { "id": id, "date": date, "dw": dw, "ppr": ppr, "pef": pef, "idemployee": idemployee },
        cache: false,
        success: function (data) {
            $('#processarMovs').html(data);
            if ($('div').hasClass('col-md-4')) { $('.border-top-r').show(); }
            loadOut();
            quillEditor();
        }
    });
});
$(document).on("change", ".timetrackchangemov", function () {
    var val = $(this).val();
    $('#TimeTrackMov').val(val);
});

// Toogle View
/*
function togglesmHalfTTR(btn) {
    if ($('div').hasClass('col-md-9')) {
        $('.col-md-9').addClass('col-md-11').removeClass('col-md-9');
        $('.col-md-3').addClass('col-md-1').removeClass('col-md-3');
        $(btn).next('.card-header').hide();
        $(this).addClass('active');
    }
    else {
        $('.col-md-11').addClass('col-md-9').removeClass('col-md-11');
        $('.col-md-1').addClass('col-md-3').removeClass('col-md-1');
        if ($('#processarMovs').html().length > 0)
           $(btn).next('.card-header').show();
        $(this).removeClass('active');
    }
}*/


/*
 * *******************************************
 * PESQUISA GERAL
 * *******************************************
*/
var searchgrlfilter = 0
$(".search-perfil-group").click(function (event) {
    //event.preventDefault()
    $(".piaget-bg-active").removeClass("piaget-bg-active")
    $(this).addClass("piaget-bg-active")

    searchgrlfilter = $(this).data("group-id")
    pesquisaGeral.context[0].ajax.data.filter = searchgrlfilter
    pesquisaGeral.draw()
})
var pesquisaGeral = $("#PesquisaGeralTable").DataTable({
    processing: true,
    serverSide: true,
    "language": {
        "url": "/Assets/lib/datatable/pt-PT.json"
    },
    "dom": '<"toolbox">rtp',//remove componentes i - for pagination information, l -length, p -pagination
    "ajax": {
        "url": "/home/GetSearchResult",
        "type": "POST",
        "datatype": "json",
        "data": {
            "Key": $("#GeralSearch").val(),
            "filter": searchgrlfilter
        }
    },
    "columns": [
        {
            sortable: false,
            ordering: false,
            "render": function (data, type, full, meta) {
                return `
                                        <div class="media d-flex flex-nowrap align-items-center" style="white-space: nowrap;">
                                            <div class="avatar avatar-sm mr-8pt">
                                                <img src="${full.Foto}" class="img-fluid avatar-title rounded-circle">
                                            </div>
                                            <div class="media-body">
                                                <div class="d-flex align-items-center">
                                                    <div class="flex d-flex flex-column">
                                                        <p class="mb-0"><strong class="js-lists-values-name">${full.Nome}</strong></p>
                                                        <small class="js-lists-values-email text-50">${full.Login}</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="btn-group py-4 mt-3">
                                                <a style="display:${full.AccessControlUser}" href="/administration/viewusers/${full.UtilizadorID}" target="_blank" class="btn btn-danger btn-rounded btn-sm" title="Utilizador"><i class="fas fa-user-lock"></i></a>
                                                <a style="display:${full.AccessControlGP}" href="/gpmanagement/viewusers/${full.PessoaID}" target="_blank" class="btn btn-primary btn-rounded btn-sm" title="Dados Pessoais"><i class="fas fa-user-edit"></i></a>
                                                <a style="display:${full.AccessControlGaAluno}" href="/gamanagement/viewstudent/${full.AlunoID}" target="_blank" class="btn btn-info btn-rounded btn-sm" title="Perfil do Estudante" target="_blank"><i class="fa fa-user-graduate fa-fw"></i></a>
                                                <a style="display:${full.AccessControlGPAG}" href="/gpagmanagement/checkingaccounts/${full.UtilizadorID}" target="_blank" class="btn btn-success btn-rounded btn-sm" title="Conta Corrente"><i class="fas fa-circle-dollar-to-slot"></i></a>
                                            </div>
                                        </div>
                                    `
            }
        },
    ],
    drawCallback: function (settings) {
        processInfo(this.api().page.info(), 'paginateInfoPesquisaGeralTable');
        processInfoGroups(settings)
    },
    //Remove pagination from table and add to custom Div
    initComplete: (settings, json) => {
        $('#PesquisaGeralTable_paginate').appendTo('#paginatePesquisaGeralTable');
    },
});
function processInfoGroups(settings) {
    var data = settings.json
    $("#totalResult").text("Todos (" + data.totalGeral+")")

    for (var i = 0; i <= data.groups.length - 1; i++) {
        var total = $('[data-group-id="' + data.groups[i].Key + '"]').find(".group_total")
        total.text(data.groups[i].Total)
    }
}